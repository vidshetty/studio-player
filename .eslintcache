[{"F:\\F-Projects\\language_framework_library\\electronjs\\src\\index.js":"1","F:\\F-Projects\\language_framework_library\\electronjs\\src\\opening\\index.js":"2","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\index.js":"3","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\index.js":"4","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\index.js":"5","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\HomeScreen.js":"6","F:\\F-Projects\\language_framework_library\\electronjs\\src\\common.js":"7","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\AlbumView.js":"8","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Library.js":"9","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Queue.js":"10","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Radio.js":"11","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Search.js":"12","F:\\F-Projects\\language_framework_library\\electronjs\\src\\Button.js":"13"},{"size":2290,"mtime":1622374021505,"results":"14","hashOfConfig":"15"},{"size":25962,"mtime":1622956937638,"results":"16","hashOfConfig":"15"},{"size":44687,"mtime":1624086570959,"results":"17","hashOfConfig":"15"},{"size":21391,"mtime":1623336673547,"results":"18","hashOfConfig":"15"},{"size":9865,"mtime":1621767679517,"results":"19","hashOfConfig":"15"},{"size":26438,"mtime":1623258465644,"results":"20","hashOfConfig":"15"},{"size":9741,"mtime":1624086551685,"results":"21","hashOfConfig":"15"},{"size":45244,"mtime":1623420758519,"results":"22","hashOfConfig":"15"},{"size":15269,"mtime":1622964109266,"results":"23","hashOfConfig":"15"},{"size":27064,"mtime":1624089472188,"results":"24","hashOfConfig":"15"},{"size":2425,"mtime":1612003562897,"results":"25","hashOfConfig":"15"},{"size":30716,"mtime":1623297821263,"results":"26","hashOfConfig":"15"},{"size":1268,"mtime":1622996987791,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"bkz516",{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"31"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"31"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"31"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"31"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"31"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"31"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"F:\\F-Projects\\language_framework_library\\electronjs\\src\\index.js",["64","65","66","67"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Opening from \"./opening\";\r\nimport Home from \"./homepage\";\r\nimport {\r\n    keepServersActive,\r\n    fullScreenGlobal,\r\n    playingGlobal,\r\n    CustomUseState,\r\n    queueOpenedGlobal,\r\n    openerGlobal,\r\n    prefix,\r\n    httpCheck,\r\n    global\r\n} from \"./common\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nlet queueOpenedLocal, intervalTimeout = null, playingLocal, screenLocal;\r\n\r\n\r\nconst App = () => {\r\n    httpCheck();\r\n    const [screen, setScreen] = CustomUseState(fullScreenGlobal);\r\n    const [queueOpened, setQueueOpened] = CustomUseState(queueOpenedGlobal);\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [playing,] = CustomUseState(playingGlobal);\r\n    screenLocal = screen;\r\n    playingLocal = playing;\r\n    queueOpenedLocal = queueOpened;\r\n\r\n    if (intervalTimeout === null) {\r\n        intervalTimeout = setInterval(() => {\r\n            keepServersActive();\r\n        }, 3*60*1000);\r\n    }\r\n\r\n    const screenSet = () => {\r\n        setScreen({\r\n            ...screenLocal,\r\n            show: !screenLocal.show\r\n        });\r\n    };\r\n\r\n    const keyDown = e => {\r\n        // if (e.keyCode === 122 || e.keyCode === 27) {\r\n        //     e.preventDefault();\r\n        // }\r\n        if (e.keyCode === 70 && !global.searchBarOpen) {\r\n            e.preventDefault();\r\n            if (playingLocal) {\r\n                // screenSet();\r\n            }\r\n        }\r\n    };\r\n\r\n    const check = e => {\r\n        if (queueOpenedLocal) {\r\n            setQueueOpened(false);\r\n        }\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"keydown\",keyDown);\r\n        window.addEventListener(\"popstate\",check);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\",keyDown);\r\n            window.removeEventListener(\"popstate\",check);\r\n        }\r\n    },[]);\r\n\r\n    return(\r\n        <Router>\r\n            <Route exact path={ prefix === \"\" ? \"/\" : prefix } component={Opening} />\r\n            <Route path={`${prefix}/home`} component={Home} />\r\n        </Router>\r\n    )\r\n};\r\n\r\nReactDOM.render(<App/>, document.getElementById(\"root\"));",["68","69"],"F:\\F-Projects\\language_framework_library\\electronjs\\src\\opening\\index.js",["70","71","72","73"],"import { useState, useEffect, useRef } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n// import \"../css/openingstyles.css\";\r\nimport \"../css/opening2styles.css\";\r\n// import \"../css/loginstyles.css\";\r\n// import \"../css/signupstyles.css\";\r\n// import logo2 from \"../assets/colouredlogo.svg\";\r\n// import logo2 from \"../assets/aquamarinelogo.svg\";\r\n// import logo2 from \"../assets/bluelogo.svg\";\r\nimport logo2 from \"../assets/latest-whiteblack.svg\";\r\n// import logo2 from \"../assets/latest-bluewhite.svg\";\r\nimport logo from \"../assets/blackandwhitelogo.svg\";\r\nimport {\r\n    wait,\r\n    CustomUseState,\r\n    homeClass,\r\n    tabGlobal,\r\n    playingGlobal,\r\n    albumGlobal,\r\n    queueGlobal,\r\n    sendRequest,\r\n    keepServersActive,\r\n    // keepButtonGlobal\r\n    topBarGlobal,\r\n    prefix\r\n} from \"../common\";\r\nlet topBar, setup;\r\n\r\n\r\nconst Error = ({ msg }) => {\r\n    return(\r\n        <div className=\"errordiv\">\r\n            <p>Error: {msg}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\n// const Login = ({ shiftPage, setRedirectValue, setMainClass }) => {\r\n//     const [compClass, setCompClass] = useState(\"loginmain-fadein\");\r\n//     const [type, setType] = useState(\"password\");\r\n//     const [checkClass, setCheckClass] = useState(\"checkbox-start\");\r\n//     const [smallBallClass, setSmallBallClass] = useState(\"smallball-password\");\r\n//     const [loginErr, setLoginErr] = useState(false);\r\n//     const [isLoading, setIsLoading] = useState(\"Log In\");\r\n//     const [errMsg, setErrMsg] = useState(\"\");\r\n//     const emailRef = useRef();\r\n//     const passwordRef = useRef();\r\n\r\n//     const change = () => {\r\n//         if(type === \"text\") {\r\n//             setType(\"password\");\r\n//             setSmallBallClass(\"smallball-password\");\r\n//         } else {\r\n//             setType(\"text\");\r\n//             setSmallBallClass(\"smallball-text\");\r\n//         }\r\n//     };\r\n\r\n//     const checkbox = () => {\r\n//         if(checkClass === \"checkbox-start\") setCheckClass(\"checkbox-end\");\r\n//         else setCheckClass(\"checkbox-start\");\r\n//     };\r\n\r\n//     const submit = async () => {\r\n//         if(emailRef.current.value == \"\") {\r\n//             setErrMsg(\"Can't leave email empty\");\r\n//             setLoginErr(true);\r\n//         } else if (passwordRef.current.value == \"\") {\r\n//             setErrMsg(\"Can't leave password empty\");\r\n//             setLoginErr(true);\r\n//         } else {\r\n//             setIsLoading(\"Loading\");\r\n//             const res = await axios({\r\n//                 method: \"POST\",\r\n//                 url: `${baseLink}/login`,\r\n//                 data: {\r\n//                     em: emailRef.current.value,\r\n//                     pass: passwordRef.current.value\r\n//                 }\r\n//             });\r\n//             setIsLoading(\"Log In\");\r\n//             if (res.data.status === \"allowed\") {\r\n//                 if (checkClass === \"checkbox-end\") {\r\n//                     localStorage.setItem(\"email\",emailRef.current.value)\r\n//                     localStorage.setItem(\"password\",passwordRef.current.value)\r\n//                 }\r\n//                 setMainClass(\"main-end\");\r\n//                 setTimeout(() => {\r\n//                     setRedirectValue(true);\r\n//                 },1000);\r\n//             } else {\r\n//                 setErrMsg(\"Invalid credentials\");\r\n//                 setLoginErr(true);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const changePage = () => {\r\n//         setCompClass(\"loginmain-fadeout\");\r\n//         setTimeout(() => {\r\n//             shiftPage(false);\r\n//         },500);\r\n//     };\r\n\r\n//     const remError = () => {\r\n//         if(loginErr) {\r\n//             setTimeout(() => {\r\n//                 setLoginErr(false);\r\n//             },3000);\r\n//         }\r\n//     };\r\n//     remError();\r\n\r\n//     useEffect(() => {\r\n//         const email = localStorage.getItem(\"email\");\r\n//         const password = localStorage.getItem(\"password\");\r\n//         if (email != null && password != null) {\r\n//             emailRef.current.value = email;\r\n//             passwordRef.current.value = password;\r\n//             setCheckClass(\"checkbox-end\");\r\n//         }\r\n//     },[]);\r\n\r\n//     return(\r\n//         <div className={compClass}>\r\n//             <div className=\"logintitle\">\r\n//                 <p>Log in to continue.</p>\r\n//             </div>\r\n//             { loginErr ? <Error msg={errMsg}/> : <div className=\"empty\"></div> \r\n//             }\r\n//             <div className=\"email\">\r\n//                 <input type=\"email\" placeholder=\"Email\" spellCheck=\"false\" ref={emailRef} />\r\n//             </div>\r\n//             <div className=\"password\">\r\n//                 <div className=\"join\">\r\n//                     <input type={type} placeholder=\"Password\" spellCheck=\"false\" ref={passwordRef} />\r\n//                     <div className=\"viewdiv\" onClick={change}>\r\n//                         <div className={smallBallClass}></div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"remember\">\r\n//                 <p>Remember Me?</p>\r\n//                 <div className={checkClass} onClick={checkbox}>\r\n//                     <div className=\"ball\"></div>\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"login\">\r\n//                 <button onClick={submit}>{isLoading}</button>\r\n//             </div>\r\n//             <div className=\"gotosignup\">\r\n//                 <p>Not on Studio?</p>\r\n//                 <p onClick={changePage}>Sign Up</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const SignUp = ({ shiftPage }) => {\r\n//     const [compClass, setCompClass] = useState(\"signupmain-fadein\");\r\n//     const [loginErr, setLoginErr] = useState(false);\r\n//     const [type, setType] = useState(\"password\");\r\n//     const [smallBallClass, setSmallBallClass] = useState(\"smallball-password\");\r\n//     const [errMsg, setErrMsg] = useState(\"\");\r\n//     const emailRef = useRef();\r\n//     const passwordRef = useRef();\r\n//     const nameRef = useRef();\r\n//     const [isLoading, setIsLoading] = useState(\"Continue\");\r\n\r\n//     const change = () => {\r\n//         if(type === \"text\") {\r\n//             setType(\"password\");\r\n//             setSmallBallClass(\"smallball-password\");\r\n//         } else {\r\n//             setType(\"text\");\r\n//             setSmallBallClass(\"smallball-text\");\r\n//         }\r\n//     };\r\n\r\n//     const submit = async () => {\r\n//         if(emailRef.current.value === \"\") {\r\n//             setErrMsg(\"Can't leave email empty\");\r\n//             setLoginErr(true);\r\n//         } else if (passwordRef.current.value === \"\") {\r\n//             setErrMsg(\"Can't leave password empty\");\r\n//             setLoginErr(true);\r\n//         } else if (nameRef.current.value === \"\") {\r\n//             setErrMsg(\"Can't leave username empty\");\r\n//             setLoginErr(true);\r\n//         } else {\r\n//             setIsLoading(\"Loading\");\r\n//             const res = await axios({\r\n//                 method: \"POST\",\r\n//                 url: `${baseLink}/signup`,\r\n//                 data: {\r\n//                     em: emailRef.current.value,\r\n//                     pass: passwordRef.current.value,\r\n//                     name: nameRef.current.value\r\n//                 }\r\n//             });\r\n//             setIsLoading(\"Continue\");\r\n//             if (res.data.status === \"registered\") {\r\n//                 changePage();\r\n//             } else {\r\n//                 setErrMsg(\"Email already exists\");\r\n//                 setLoginErr(true);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const changePage = () => {\r\n//         setCompClass(\"signupmain-fadeout\");\r\n//         setTimeout(() => {\r\n//             shiftPage(true);\r\n//         },500);\r\n//     };\r\n\r\n//     const remError = () => {\r\n//         if(loginErr) {\r\n//             setTimeout(() => {\r\n//                 setLoginErr(false);\r\n//             },3000);\r\n//         }\r\n//     };\r\n//     remError();\r\n\r\n//     return(\r\n//         <div className={compClass}>\r\n//             <div className=\"title\">\r\n//                 <p>Sign up for free.</p>\r\n//             </div>\r\n//             { loginErr ? <Error msg={errMsg}/> : <div className=\"empty\"></div> \r\n//             }\r\n//             <div className=\"email\">\r\n//                 <input type=\"email\" placeholder=\"Email\" spellCheck=\"false\" ref={emailRef} />\r\n//             </div>\r\n//             <div className=\"password\">\r\n//                 <div className=\"join\">\r\n//                     <input type={type} placeholder=\"Password\" spellCheck=\"false\" ref={passwordRef} />\r\n//                     <div className=\"viewdiv\" onClick={change}>\r\n//                         <div className={smallBallClass}></div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"username\">\r\n//                 <input type=\"text\" placeholder=\"What do we call you?\" spellCheck=\"false\" ref={nameRef} />\r\n//             </div>\r\n//             <div className=\"signup\">\r\n//                 <button onClick={submit}>{isLoading}</button>\r\n//             </div>\r\n//             <div className=\"gotologin\">\r\n//                 <p>Already on Studio?</p>\r\n//                 <p onClick={changePage}>Log In</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const Opening = () => {\r\n//     const [logoClass, setLogoClass] = useState(\"logo-start\");\r\n//     const [barClass, setBarClass] = useState(\"bar-initial\");\r\n//     const [mainClass, setMainClass] = useState(\"main-start\");\r\n//     const [redirectValue, setRedirectValue] = useState(false);\r\n//     const [logInScreen, setLogInScreen] = useState(true);\r\n\r\n//     const firstCheck = async () => {\r\n//         await setTimeout(async () => {\r\n//             // let res = { data: { status: \"\" } };\r\n//             let res;\r\n//             res = await axios({\r\n//                 method: \"GET\",\r\n//                 url: `${baseLink}/activateCheck`\r\n//             });\r\n//             // res.data.status = \"active\";\r\n//             if (res.data.status === \"active\") {\r\n//                 const token = localStorage.getItem(\"access\");\r\n//                 if (token === \"allowed\") {\r\n//                     setMainClass(\"main-end\");\r\n//                     setTimeout(() => {\r\n//                         setRedirectValue(true);\r\n//                     },1000);\r\n//                 } else {\r\n//                     setLogoClass(\"logo-mid\");\r\n//                     setBarClass(\"bar-start\");\r\n//                 }\r\n//             }\r\n//         },2000);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         firstCheck();\r\n//     },[]);\r\n\r\n//     if(redirectValue) {\r\n//         return ( <Redirect to=\"/home/homescreen\" /> );\r\n//     }\r\n//     return(\r\n//         <div className={mainClass}>\r\n//             <div className={logoClass}>\r\n//                 <div className=\"left\">\r\n//                     <img className=\"logoimg\" src={logo} alt=\"logo\"/>\r\n//                 </div>\r\n//                 <div className=\"right\">\r\n//                     <p>Studio</p>\r\n//                 </div>\r\n//             </div>\r\n//             <div className={barClass}>\r\n//                 <div className=\"logincontainer\">\r\n//                     { logInScreen ? \r\n//                         <Login \r\n//                             shiftPage={setLogInScreen}\r\n//                             setRedirectValue={setRedirectValue}\r\n//                             setMainClass={setMainClass}\r\n//                         /> : \r\n//                         <SignUp \r\n//                             shiftPage={setLogInScreen}\r\n//                         /> }\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\nconst Login2 = ({ setGoToLogin, setGoToSignUp, setMainClass, setRedirectValue }) => {\r\n    const [loginClass, setLoginClass] = useState(\"loginscreen-in\");\r\n    const [smallBallClass, setSmallBallClass] = useState(\"ball-password\");\r\n    const [type, setType] = useState(\"password\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [button, setButton] = useState(\"Log In\");\r\n    const [loginButton, setLoginButton] = useState(\"loginbutton\");\r\n    const [link, setLink] = useState(\"gotosignup\");\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [checkClass, setCheckClass] = useState(\"checkbox-start\");\r\n    const [,setClass] = CustomUseState(homeClass);\r\n    const [tab, setTab] = CustomUseState(tabGlobal);\r\n    // const [,setKeepButton] = CustomUseState(keepButtonGlobal);\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    topBar = topBarConfig;\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n\r\n    const fillIn = () => {\r\n        const text = localStorage.getItem(\"email\");\r\n        const pwd = localStorage.getItem(\"password\");\r\n        if (text !== null && pwd !== null) {\r\n            emailRef.current.value = text;\r\n            passwordRef.current.value = pwd;\r\n            setCheckClass(\"checkbox-end\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fillIn();\r\n    },[]);\r\n\r\n    const change = async () => {\r\n        setLoginClass(\"loginscreen-out\");\r\n        await wait(100);\r\n        setGoToLogin(false);\r\n        setGoToSignUp(true);\r\n    };\r\n\r\n    const goToMain = async () => {\r\n        // await setup();\r\n        setClass(\"homemain start\");\r\n        setMainClass(\"mainwindow-end\");\r\n        if (tab !== \"Home\") setTab(\"Home\");\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            button: false,\r\n            buttonFunc: () => {},\r\n            title: \"\",\r\n            bgColor: \"transparent\"\r\n        });\r\n        // setKeepButton(false);\r\n        await wait(500);\r\n        setRedirectValue(true);\r\n    };\r\n\r\n    const shift = () => {\r\n        if (type === \"password\") {\r\n            setType(\"text\");\r\n            setSmallBallClass(\"ball-text\");\r\n        } else {\r\n            setType(\"password\");\r\n            setSmallBallClass(\"ball-password\");\r\n        }\r\n    };\r\n\r\n    const checkbox = () => {\r\n        setCheckClass( checkClass === \"checkbox-start\" ?\r\n            \"checkbox-end\" : \"checkbox-start\" );\r\n    };\r\n\r\n    const submit = async () => {\r\n        if (emailRef.current.value === \"\") {\r\n            setIsError(true);\r\n            setMsg(\"Cannot leave email empty!\")\r\n            return;\r\n        }\r\n        if (passwordRef.current.value === \"\") {\r\n            setIsError(true);\r\n            setMsg(\"Cannot leave password empty!\");\r\n            return;\r\n        }\r\n        setButton(\"Logging you in....\");\r\n        setLoginButton(\"loginbutton-loading\");\r\n        setLink(\"gotosignup-loading\");\r\n        let res = await sendRequest({\r\n            method: \"POST\",\r\n            endpoint: \"/login\",\r\n            data: {\r\n                text: emailRef.current.value,\r\n                password: passwordRef.current.value\r\n            }\r\n        });\r\n        if (res.status === \"loggedin\") {\r\n            localStorage.setItem(\"token\",res.status);\r\n            localStorage.setItem(\"username\",res.username);\r\n            localStorage.setItem(\"userId\",res.userId);\r\n            if (checkClass === \"checkbox-end\") {\r\n                localStorage.setItem(\"email\",emailRef.current.value);\r\n                localStorage.setItem(\"password\",passwordRef.current.value);\r\n            }\r\n            goToMain();\r\n        } else {\r\n            setIsError(true);\r\n            setMsg(res.error);\r\n            setButton(\"Log In\");\r\n            setLoginButton(\"loginbutton\");\r\n            setLink(\"gotosignup\");\r\n        }\r\n    };\r\n\r\n    const remError = () => {\r\n        if (isError) {\r\n            setTimeout(() => {\r\n                setIsError(false);\r\n            },3000);\r\n        }\r\n    };\r\n    remError();\r\n\r\n    return(\r\n        <div className={loginClass}>\r\n            <div className=\"logocontainer\">\r\n                <div className=\"leftlogo\">\r\n                    <img src={logo} alt=\"Studio\" />\r\n                </div>\r\n                <div className=\"rightlogo\">\r\n                    <p>Studio</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"title\">\r\n                <p>Log in to continue.</p>\r\n            </div>\r\n            <div className=\"inputfields\">\r\n                {\r\n                    isError ? <Error msg={msg}/> : <div className=\"errordivreplacement\">\r\n                    </div>\r\n                }\r\n                <div className=\"email\">\r\n                    <input type=\"text\" name=\"email\" placeholder=\"Email / Username\" spellCheck=\"false\" ref={emailRef}/>\r\n                </div>\r\n                <div className=\"password\">\r\n                    <input type={type} name=\"password\" placeholder=\"Password\" ref={passwordRef}/>\r\n                    <div className=\"viewer\">\r\n                        <div className={smallBallClass} onClick={shift}></div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"remember\">\r\n                    <p>Remember Me?</p>\r\n                    <div className={checkClass} onClick={checkbox}>\r\n                        <div className=\"ball\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={loginButton}>\r\n                <button onClick={submit}>{button}</button>\r\n            </div>\r\n            <div className={link}>\r\n                <p>Not on Studio?</p><p onClick={change}>Sign Up</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SignUp2 = ({ setGoToLogin, setGoToSignUp }) => {\r\n    const [signUpClass, setSignUpClass] = useState(\"signupscreen-in\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [button, setButton] = useState(\"Sign Up\");\r\n    const [signUpButton, setSignUpButton] = useState(\"signupbutton\");\r\n    const [link, setLink] = useState(\"gotologin\");\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [type, setType] = useState(\"password\");\r\n    const [smallBallClass, setSmallBallClass] = useState(\"ball-password\");\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const usernameRef = useRef();\r\n\r\n    const change = async () => {\r\n        setSignUpClass(\"signupscreen-out\");\r\n        await wait(100);\r\n        setGoToSignUp(false);\r\n        setGoToLogin(true);\r\n    };\r\n\r\n    const shift = () => {\r\n        if (type === \"password\") {\r\n            setType(\"text\");\r\n            setSmallBallClass(\"ball-text\");\r\n        } else {\r\n            setType(\"password\");\r\n            setSmallBallClass(\"ball-password\");\r\n        }\r\n    };\r\n\r\n    const submit = async () => {\r\n        if (usernameRef.current.value === \"\") {\r\n            setIsError(true);\r\n            setMsg(\"Cannot leave username empty!\")\r\n            return;\r\n        }\r\n        if (emailRef.current.value === \"\") {\r\n            setIsError(true);\r\n            setMsg(\"Cannot leave email empty!\")\r\n            return;\r\n        }\r\n        const pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/;\r\n        if (!pattern.test(emailRef.current.value)) {\r\n            setIsError(true);\r\n            setMsg(\"Invalid email!\");\r\n            return;\r\n        }\r\n        if (passwordRef.current.value === \"\") {\r\n            setIsError(true);\r\n            setMsg(\"Cannot leave password empty!\");\r\n            return;\r\n        }\r\n        setButton(\"Signing you up....\");\r\n        setSignUpButton(\"signupbutton-loading\");\r\n        setLink(\"gotologin-loading\");\r\n        let res = await sendRequest({\r\n            method: \"POST\",\r\n            endpoint: `/signup`,\r\n            data: {\r\n                username: usernameRef.current.value,\r\n                email: emailRef.current.value,\r\n                password: passwordRef.current.value\r\n            }\r\n        });\r\n        if (res.status === \"registered\") {\r\n            change();\r\n        } else {\r\n            setIsError(true);\r\n            setMsg(res.error);\r\n            setButton(\"Sign Up\");\r\n            setSignUpButton(\"signupbutton\");\r\n            setLink(\"gotologin\");\r\n        }\r\n    };\r\n\r\n    const remError = () => {\r\n        if (isError) {\r\n            setTimeout(() => {\r\n                setIsError(false);\r\n            },3000);\r\n        }\r\n    };\r\n    remError();\r\n\r\n    return(\r\n        <div className={signUpClass}>\r\n            <div className=\"logocontainer\">\r\n                <div className=\"leftlogo\">\r\n                    <img src={logo} alt=\"Studio\" />\r\n                </div>\r\n                <div className=\"rightlogo\">\r\n                    <p>Studio</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"title\">\r\n                <p>Sign up for free.</p>\r\n            </div>\r\n            <div className=\"inputfields\">\r\n                {\r\n                    isError ? <Error msg={msg}/> : <div className=\"errordivreplacement\">\r\n                    </div>\r\n                }\r\n                <div className=\"username\">\r\n                    <input type=\"text\" name=\"username\" placeholder=\"Username\" spellCheck=\"false\" ref={usernameRef} />\r\n                </div>\r\n                <div className=\"email\">\r\n                    <input type=\"email\" name=\"email\" placeholder=\"Email\" spellCheck=\"false\" ref={emailRef}/>\r\n                </div>\r\n                <div className=\"password\">\r\n                    <input type={type} name=\"password\" placeholder=\"Password\" ref={passwordRef}/>\r\n                    <div className=\"viewer\">\r\n                        <div className={smallBallClass} onClick={shift}></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={signUpButton}>\r\n                <button onClick={submit}>{button}</button>\r\n            </div>\r\n            <div className={link}>\r\n                <p>Already on Studio?</p><p onClick={change}>Log In</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Opening2 = () => {\r\n    const [redirectValue, setRedirectValue] = useState(false);\r\n    // const [mainClass, setMainClass] = useState(\"mainwindow-start\");\r\n    const [loaderClass, setLoaderClass] = useState(\"openingloader hidden\");\r\n    // const [goToLogin, setGoToLogin] = useState(false);\r\n    // const [goToSignUp, setGoToSignUp] = useState(false);\r\n    // const [,setClass] = CustomUseState(homeClass);\r\n    const [,setIsPlaying] = CustomUseState(playingGlobal);\r\n    const [,setSong] = CustomUseState(albumGlobal);\r\n    const [,setQueue] = CustomUseState(queueGlobal);\r\n\r\n    setup = async () => {\r\n        const queue = JSON.parse(localStorage.getItem(\"queue\"));\r\n        if (queue) {\r\n            setIsPlaying(true);\r\n            let nowplaying = JSON.parse(localStorage.getItem(\"nowplaying\"));\r\n            if (nowplaying !== null) {\r\n                const res = await sendRequest({\r\n                    method: \"POST\",\r\n                    endpoint: \"/updateUrls\",\r\n                    data: {\r\n                        list: queue.concat([nowplaying])\r\n                    }\r\n                });\r\n                queue = res.slice(0,res.length - 1);\r\n                nowplaying = res[res.length - 1];\r\n                localStorage.setItem(\"queue\",JSON.stringify(queue));\r\n                localStorage.setItem(\"nowplaying\",JSON.stringify(nowplaying));\r\n\r\n                const index = queue.findIndex(each => {\r\n                    if (each.Title && nowplaying.Title) {\r\n                        return each.Title === nowplaying.Title;\r\n                    } else {\r\n                        return each.Album === nowplaying.Album;\r\n                    }\r\n                });\r\n                if (nowplaying.url !== \"\") {\r\n                    nowplaying.backup = nowplaying.url;\r\n                    nowplaying.url = \"\";\r\n                }\r\n                queue[index] = nowplaying;\r\n                setSong(nowplaying);\r\n                setQueue(queue);\r\n            } else {\r\n                localStorage.removeItem(\"nowplaying\");\r\n                localStorage.removeItem(\"queue\");\r\n                setIsPlaying(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const call = async () => {\r\n        await wait(2000);\r\n        setLoaderClass(\"openingloader\");\r\n        let res;\r\n        keepServersActive();\r\n        res = await sendRequest({\r\n            method: \"GET\",\r\n            endpoint: \"/activateCheck\"\r\n        });\r\n        if (res.status === \"active\") {\r\n            sendRequest({\r\n                method: \"GET\",\r\n                endpoint: \"/recordTime\"\r\n            });\r\n            // setClass(\"homemain start\");\r\n            // await wait(500);\r\n            // await setup();\r\n            // setLoaderClass(\"openingloader hidden\");\r\n            await wait(500);\r\n            // setMainClass(\"mainwindow-end\");\r\n            // await wait(500);\r\n            setRedirectValue(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        call();\r\n    }, []);\r\n\r\n    if (redirectValue) {\r\n        return <Redirect to={prefix+\"/home/homescreen\"} />;\r\n    }\r\n    return(\r\n        // <div className={mainClass}>\r\n        <div className=\"mainwindow\">\r\n            {/* {\r\n                !goToLogin && !goToSignUp ?\r\n                <> */}\r\n                    <div className=\"logoholder\">\r\n                        <img src={logo2} alt=\"Studio\" />\r\n                    </div>\r\n                    <div className={loaderClass}>\r\n                        <div className=\"firstcircle\"></div>\r\n                        <div className=\"secondcircle\"></div>\r\n                        <div className=\"thirdcircle\"></div>\r\n                        <div className=\"fourthcircle\"></div>\r\n                    </div>\r\n                {/* </> : \"\"\r\n            } */}\r\n            {/* {\r\n                goToLogin ? <Login2 setGoToLogin={setGoToLogin} setGoToSignUp={setGoToSignUp}\r\n                    setMainClass={setMainClass} setRedirectValue={setRedirectValue}/> : \"\"\r\n            }\r\n            {\r\n                goToSignUp ? <SignUp2 setGoToLogin={setGoToLogin} setGoToSignUp={setGoToSignUp}/> : \"\"\r\n            } */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Opening2;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\index.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105"],"F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\index.js",["106","107","108","109","110","111","112","113","114","115","116","117","118"],"import Mid, { MidPanelLoader } from \"./midpanel\";\r\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\n// import logo from \"../../assets/bluelogo.svg\";\r\n// import logo from \"../../assets/latest-whiteblack.svg\";\r\nimport logo from \"../../assets/latest-bluewhite.svg\";\r\n// import logo from \"../../assets/aquamarinelogo.svg\";\r\n// import logo from \"../../assets/blackandwhitelogo.svg\";\r\nimport home from \"../../assets/homewhite.svg\";\r\nimport search from \"../../assets/searchwhite.svg\";\r\nimport library from \"../../assets/librarywhite.svg\";\r\nimport homelight from \"../../assets/homelight.svg\";\r\nimport searchlight from \"../../assets/searchlight.svg\";\r\nimport librarylight from \"../../assets/librarylight.svg\";\r\nimport radio from \"../../assets/radio2.svg\";\r\n// import BackButton from \"../../assets/backbutton-white.svg\";\r\nimport BackButton from \"../../assets/backbutton-909090.svg\";\r\nimport Close from \"../../assets/delete-909090.svg\";\r\n// import radio from \"../../assets/mainshuffle.svg\";\r\nimport radiolight from \"../../assets/radiolight2.svg\";\r\nimport dropdown from \"../../assets/dropdown.png\";\r\n// import radiolight from \"../../assets/mainshufflelight.svg\";\r\nimport tick from \"../../assets/tickmark.svg\";\r\nimport \"../../css/homestyles.css\";\r\nimport \"../../css/teststyles.css\";\r\nimport \"../../css/searchstyles.css\";\r\nimport {\r\n    CustomUseState,\r\n    playingGlobal,\r\n    tabGlobal,\r\n    routesGlobal,\r\n    queueOpenedGlobal,\r\n    topBarGlobal,\r\n    searchBarGlobal,\r\n    searchInputGlobal,\r\n    prefix,\r\n    profileOpener,\r\n    global\r\n} from \"../../common\";\r\nimport Button from \"../../Button\";\r\nlet topBar, tabLocal, queueOpenedLocal, searchInputTimeout = null, noLocal, showListLocal;\r\n\r\n\r\nconst Left = () => {\r\n    const topList = [\"Home\", \"Search\", \"Library\"];\r\n    const normalList = [\"Home\",\"Search\",\"New Releases\",\"Albums\",\"Artists\",\"Shuffle\"];\r\n    const playlists = [\"Most Played\",\"Favorites\",\"New Releases\",\"Liked\"];\r\n    // const playlists = [];\r\n    // const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [playing,] = useState(false);\r\n    const [tab, setTab] = CustomUseState(tabGlobal);\r\n    const [,setRoutes] = CustomUseState(routesGlobal);\r\n    const [searchConfig, setSearchConfig] = CustomUseState(searchBarGlobal);\r\n    let searchBar = searchConfig;\r\n    // const [keepButton, setKeepButton] = CustomUseState(keepButtonGlobal);\r\n    // const [,setOnClickFunc] = CustomUseState(onClickFuncGlobal);\r\n    // const [topTitle, setTopTitle] = CustomUseState(topTitleGlobal);\r\n    // const [topColor, setBgColor] = CustomUseState(topBgColor);\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [queueOpened, setQueueOpened] = CustomUseState(queueOpenedGlobal);\r\n    topBar = topBarConfig;\r\n    tabLocal = tab;\r\n\r\n\r\n    (() => {\r\n        let loc;\r\n        if (window.location.hash !== \"\") {\r\n            loc = window.location.hash.split(\"/\")[2];\r\n        } else {\r\n            loc = window.location.pathname.split(\"/\")[2];\r\n        }\r\n        if (queueOpened) {\r\n            setTab(\"\");\r\n            return;\r\n        }\r\n        switch(loc) {\r\n            case \"homescreen\":\r\n                if (tabLocal === loc) break;\r\n                setTab(\"Home\");\r\n                break;\r\n            case \"search\":\r\n                if (tabLocal === loc) break;\r\n                setTab(\"Search\");\r\n                break;\r\n            case \"library\":\r\n                if (tabLocal === loc) break;\r\n                setTab(\"Library\");\r\n                break;\r\n            case \"radio\":\r\n                if (tabLocal === loc) break;\r\n                setTab(\"Radio\");\r\n                break;\r\n            case \"new-releases\":\r\n                if (tabLocal === loc) break;\r\n                setTab(\"New Releases\");\r\n                break;\r\n            default:\r\n                if (tabLocal === \"\") break;\r\n                setTab(\"\");\r\n                break;\r\n        }\r\n    })();\r\n\r\n    const goToHome = () => {\r\n        setTopBarConfig({\r\n            button: false,\r\n            buttonFunc: () => {},\r\n            title: \"\",\r\n            bgColor: \"transparent\"\r\n        });\r\n        // setKeepButton(false);\r\n        // setOnClickFunc(() => {});\r\n        // setTopTitle(\"\");\r\n        // setBgColor(\"transparent\");\r\n        setQueueOpened(false);\r\n        setTab(\"Home\");\r\n        setRoutes([\"/home/homescreen\"]);\r\n    };\r\n\r\n    const calc = (item) => {\r\n        if(item === \"Home\") return \"/home/homescreen\";\r\n        else if(item === \"Search\") return \"/home/search\";\r\n        else if(item === \"New Releases\") return \"/home/new-releases\";\r\n        else if(item === \"Library\") return \"/home/library\";\r\n        else if(item === \"Radio\") return \"/home/radio\";\r\n        return \"/home/homescreen\";\r\n    };\r\n\r\n    const setFuncs = (item) => {\r\n        if (item === tabLocal) {\r\n            return;\r\n        }\r\n        console.log(\"clicked\")\r\n        setTopBarConfig({\r\n            button: false,\r\n            buttonFunc: () => {},\r\n            title: \"\",\r\n            bgColor: \"transparent\"\r\n        });\r\n        if (item !== \"Search\" && searchBar.show) {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                show: false\r\n            });\r\n        } \r\n        setQueueOpened(false);\r\n        sessionStorage.setItem(\"home-scroll\",0);\r\n        sessionStorage.setItem(\"library-scroll\",0);\r\n    };\r\n\r\n    const setRouteFunc = (item) => {\r\n        if(item === \"Home\") setRoutes([\"/home/homescreen\"]);\r\n        else if(item === \"Search\") setRoutes([\"/home/search\"]);\r\n        else if(item === \"New Releases\") setRoutes([\"/home/new-releases\"]);\r\n        else if(item === \"Library\") setRoutes([\"/home/library\"]);\r\n        else if(item === \"Radio\") setRoutes([\"/home/radio\"]);\r\n        else if(item === \"Most Played\") setRoutes([\"/home/mostplayed\"]);\r\n        else setRoutes([\"/home/homescreen\"]);\r\n    };\r\n\r\n    const setIcon = (item) => {\r\n        if (item === \"Home\") return item === tab ? home : homelight;\r\n        else if (item === \"Search\") return item === tab ? search : searchlight;\r\n        else if (item === \"Library\") return item === tab ? library : librarylight;\r\n        else if (item === \"Radio\") return item === tab ? radio : radiolight;\r\n    };\r\n\r\n    const onMouseOver = (item, e) => {\r\n        if (item === \"Home\") {\r\n            e.currentTarget.children[0].src = home;\r\n        } else if (item === \"Search\") {\r\n            e.currentTarget.children[0].src = search;\r\n        } else if (item === \"Library\") {\r\n            e.currentTarget.children[0].src = library;\r\n        } else if (item === \"Radio\") {\r\n            e.currentTarget.children[0].src = radio;\r\n        } else {\r\n            e.currentTarget.children[0].src = \"\";\r\n        }\r\n    };\r\n    \r\n    const onMouseOut = (item, e) => {\r\n        if (item === \"Home\") {\r\n            e.currentTarget.children[0].src = item === tab ? home : homelight;\r\n        } else if (item === \"Search\") {\r\n            e.currentTarget.children[0].src = item === tab ? search : searchlight;\r\n        } else if (item === \"Library\") {\r\n            e.currentTarget.children[0].src = item === tab ? library : librarylight;\r\n        } else if (item === \"Radio\") {\r\n            e.currentTarget.children[0].src = item === tab ? radio : radiolight;\r\n        } else {\r\n            e.currentTarget.children[0].src = \"\";\r\n        }\r\n    };\r\n\r\n    const resetTop = () => {\r\n        // if (keepButton === true) {\r\n        //     setKeepButton(false);\r\n        // }\r\n        // if (topColor !== \"transparent\") {\r\n        //     setBgColor(\"transparent\");\r\n        // }\r\n        // if (topTitle !== \"\") {\r\n        //     setTopTitle(\"\");\r\n        // }\r\n    };\r\n\r\n    return(\r\n        <div className={ playing ? \"leftmain-with-player\" : \"leftmain-without-player\" }\r\n        // onClick={resetTop}\r\n        >\r\n            <Link to=\"/home/homescreen\" style={{ textDecoration: \"none\" }}>\r\n                <div className=\"logodiv\">\r\n                    <img src={logo} alt=\"logo\" onClick={goToHome}/>\r\n                    <p onClick={goToHome}>Studio</p>\r\n                </div>\r\n            </Link>\r\n            <div className=\"headlist\">\r\n                {\r\n                    topList.map(item => {\r\n                        return(\r\n                            <Link to={calc(item)} style={{ textDecoration: \"none\" }} onClick={() => setFuncs(item)}>\r\n                                <div onClick={() => {\r\n                                    setRouteFunc(item);\r\n                                    setTab(item);\r\n                                    }} className={ item === tab ? \"eachactive\" : \"each\" }\r\n                                    onMouseOver={(e) => onMouseOver(item, e)}\r\n                                    onMouseOut={(e) => onMouseOut(item,e)}\r\n                                    >\r\n                                    <img src={setIcon(item)} alt=\"\"/>\r\n                                    <p>{item}</p>\r\n                                </div>\r\n                            </Link>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <div className=\"divider\"></div>\r\n            {\r\n                playlists.length !== 0 ? <div className=\"playlisttitle\">PLAYLISTS</div> : \"\"\r\n            }\r\n            {\r\n                playlists.map(item => {\r\n                    return(\r\n                        <Link to={calc(item)} style={{ textDecoration: \"none\" }}>\r\n                            <div onClick={() => {\r\n                                    console.log(\"item\",item)\r\n                                    setRouteFunc(item);\r\n                                    setTab(item);\r\n                                }}\r\n                                className={ item === tab ? \"playlist active1\" : \"playlist\" }>\r\n                                <p>{item}</p>\r\n                            </div>\r\n                        </Link>\r\n                    )\r\n                })\r\n            }\r\n            {/* <div className=\"playlisttitlebutton\">+ CREATE PLAYLIST</div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst TopSearchBar = () => {\r\n    const [queueOpen, setQueueOpen] = CustomUseState(queueOpenedGlobal);\r\n    const [searchConfig, setSearchConfig] = CustomUseState(searchBarGlobal);\r\n    const [input, setInput] = CustomUseState(searchInputGlobal);\r\n    const [value, setValue] = useState(\"\");\r\n    const [showList, setShowList] = useState(true);\r\n    const [no, setNo] = useState(-1);\r\n    const search = useRef(null);\r\n    const location = useLocation();\r\n    const hist = useHistory();\r\n    let list = localStorage.getItem(\"searches\") || \"[]\";\r\n    list = JSON.parse(list).reverse();\r\n    noLocal = no;\r\n    showListLocal = showList;\r\n\r\n    const goBack = e => {\r\n        global.searchBarOpen = false;\r\n        setSearchConfig({\r\n            ...searchConfig,\r\n            open: false\r\n        });\r\n    };\r\n\r\n    const clear = e => {\r\n        e.stopPropagation();\r\n        setValue(\"\");\r\n        document.querySelector(\".search-input\").focus();\r\n    };\r\n\r\n    const click = e => {\r\n        if (!(e.target === search.current || search.current.contains(e.target))) {\r\n            global.searchBarOpen = false;\r\n            setSearchConfig({\r\n                ...searchConfig,\r\n                open: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleInput = e => {\r\n        setValue(e.target.value);\r\n        if (!showList) {\r\n            setShowList(true);\r\n        }\r\n    };\r\n\r\n    const handleSearch = e => {\r\n        e.preventDefault();\r\n\r\n        let list = localStorage.getItem(\"searches\") || \"[]\";\r\n        list = JSON.parse(list);\r\n        value && list.push(value);\r\n        localStorage.setItem(\"searches\", JSON.stringify(list));\r\n\r\n        if (queueOpen) setQueueOpen(false);\r\n        setInput(value);\r\n        setNo(-1);\r\n        setShowList(false);\r\n        if (location.pathname !== `${prefix}/home/search`) {\r\n            hist.push(`${prefix}/home/search`);\r\n        }\r\n    };\r\n\r\n    const setThis = (val,e) => {\r\n        e.stopPropagation();\r\n        setValue(val);\r\n        setShowList(false);\r\n        \r\n        if (queueOpen) setQueueOpen(false);\r\n        setInput(val);\r\n        if (location.pathname !== `${prefix}/home/search`) {\r\n            hist.push(`${prefix}/home/search`);\r\n        }\r\n    };\r\n\r\n    const keyDown = e => {\r\n        if (e.keyCode === 40 && showListLocal) {\r\n            if (noLocal+1 >= 8) {\r\n                noLocal = 0;\r\n                setNo(0);\r\n                return;\r\n            }\r\n            setNo(noLocal+1);\r\n        } else if (e.keyCode === 38 && showListLocal) {\r\n            if (noLocal === -1) {\r\n                return;\r\n            }\r\n            setNo(noLocal-1);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (no === -1) {\r\n            return;\r\n        }\r\n        setValue(list[noLocal]);\r\n    }, [no]);\r\n\r\n    useEffect(() => {\r\n        search.current = document.querySelector(\".search-bar\");\r\n        document.addEventListener(\"click\",click);\r\n        // document.addEventListener(\"keydown\",keyDown);\r\n        document.querySelector(\".search-input\").focus();\r\n        return () => {\r\n            document.removeEventListener(\"click\",click);\r\n            // document.removeEventListener(\"keydown\",keyDown);\r\n        };\r\n    }, []);\r\n\r\n    return(\r\n        <div className=\"top-search-bar-container\">\r\n            <div className=\"search-bar\">\r\n                <div className=\"search-top-row\">\r\n                    <div className=\"back-container\">\r\n                        <button className=\"back-button\" title=\"Back\" onClick={goBack}>\r\n                            <img src={BackButton} alt=\"\" />\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"input-container\">\r\n                        <form onSubmit={handleSearch}>\r\n                            <input type=\"text\" className=\"search-input\" placeholder=\"Search\" align=\"middle\"\r\n                            onChange={handleInput} value={value} spellCheck=\"false\" />\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"close-container\">\r\n                        {\r\n                            value !== \"\" ?\r\n                            <button className=\"back-button\" title=\"Clear\" onClick={clear}>\r\n                                <img src={Close} alt=\"\" />\r\n                            </button> : null\r\n                        }\r\n                    </div>\r\n                </div>\r\n                {\r\n                    list.length !== 0 && showList ?\r\n                    <div className=\"list-container\">\r\n                        {\r\n                            list.map((each,i) => {\r\n                                if (i<8) {\r\n                                    return(\r\n                                        <div className={ i === noLocal ? \"each-list-highlight\" : \"each-list\" } onClick={(e) => setThis(each,e)}>\r\n                                            <div className=\"first-each-list\">{each}</div>\r\n                                            <div className=\"last-each-list\"></div>\r\n                                        </div> \r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                    </div> : null\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst TopNav = () => {\r\n    const userName = localStorage.getItem(\"username\");\r\n    const picture = localStorage.getItem(\"picture\");\r\n    const topList = [\"Home\", \"Library\", \"Search\"];\r\n    const [tab, setTab] = CustomUseState(tabGlobal);\r\n    const [queueOpened, setQueueOpened] = CustomUseState(queueOpenedGlobal);\r\n    const [searchConfig, setSearchConfig] = CustomUseState(searchBarGlobal);\r\n    const [,setProfileOpen] = CustomUseState(profileOpener);\r\n    const currentLocation = useLocation();\r\n    const hist = useHistory();\r\n    tabLocal = tab;\r\n    queueOpenedLocal = queueOpened;\r\n\r\n    const initial = () => {\r\n        const loc = currentLocation.pathname.split(\"/\")[2];\r\n        if (queueOpened) {\r\n            setTab(\"\");\r\n            return;\r\n        }\r\n        switch(loc) {\r\n            case \"homescreen\":\r\n                if (tabLocal === loc) break;\r\n                setTab(\"Home\");\r\n                break;\r\n            case \"search\":\r\n                if (tabLocal === loc) break;\r\n                setTab(\"Search\");\r\n                break;\r\n            case \"library\":\r\n                if (tabLocal === loc) break;\r\n                setTab(\"Library\");\r\n                break;\r\n            case \"radio\":\r\n                if (tabLocal === loc) break;\r\n                setTab(\"Radio\");\r\n                break;\r\n            case \"new-releases\":\r\n                if (tabLocal === loc) break;\r\n                setTab(\"New Releases\");\r\n                break;\r\n            default:\r\n                if (tabLocal === \"\") break;\r\n                setTab(\"\");\r\n                break;\r\n        }\r\n    };\r\n\r\n    initial();\r\n\r\n    const goToHome = () => {\r\n        if (queueOpenedLocal) {\r\n            setQueueOpened(false);\r\n        }\r\n        if (tabLocal !== \"Home\") {\r\n            setTab(\"Home\");\r\n            hist.push(prefix+\"/home/homescreen\");\r\n        }\r\n    };\r\n\r\n    const setFuncs = (item, currentTab) => {\r\n        if (item === \"Search\") {\r\n            global.searchBarOpen = true;\r\n            setSearchConfig({\r\n                ...searchConfig,\r\n                open: true,\r\n                prevTab: currentTab\r\n            });\r\n        }\r\n        if (item === tabLocal) {\r\n            return;\r\n        }\r\n        if (queueOpenedLocal && item !== \"Search\") {\r\n            setQueueOpened(false);\r\n        }\r\n    };\r\n\r\n    const getCorrespondingRoute = item => {\r\n        if(item === \"Home\") return `${prefix}/home/homescreen`;\r\n        else if(item === \"Search\") return `${prefix}/home/search`;\r\n        else if(item === \"New Releases\") return `${prefix}/home/new-releases`;\r\n        else if(item === \"Library\") return `${prefix}/home/library`;\r\n        else if(item === \"Radio\") return `${prefix}/home/radio`;\r\n        else if(item === \"Most Played\") return `${prefix}/home/mostplayed`;\r\n        else return `${prefix}/home/homescreen`;\r\n    };\r\n\r\n    const setRouteFunc = item => {\r\n        const route = getCorrespondingRoute(item);\r\n        if (route !== `${prefix}/home/search`) hist.push(route);\r\n    };\r\n\r\n    const openProfile = e => {\r\n        setProfileOpen(true);\r\n    };\r\n\r\n\r\n    return(\r\n        <div className=\"dummyleft\"\r\n        // style={{ borderBottom: `${ queueOpened ? \"\" : \"0.5px solid rgba(255,255,255,0.1)\" }` }}\r\n        >\r\n            <div className=\"logopart\" onClick={goToHome}>\r\n                <div className=\"logopartdiv\" title=\"StudioMusic\">\r\n                    <img src={logo} alt=\"logo\" />\r\n                    <p>Studio</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"middlepart\">\r\n                {\r\n                    searchConfig.open ?\r\n                    <TopSearchBar /> :\r\n                    // null :\r\n                    <div className=\"centermiddlepart\">\r\n                        {\r\n                            topList.map(each => {\r\n                                return(\r\n                                    <div className={ tabLocal === each ? \"tabs\" : \"lighttabs\" }\r\n                                    onClick={() => {\r\n                                        setFuncs(each, tabLocal);\r\n                                        setRouteFunc(each);\r\n                                        setTab(each);\r\n                                    }}>\r\n                                        {each}\r\n                                    </div>\r\n                                ); \r\n                            })\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n            <div className=\"profilepart\">\r\n                {/* <div className=\"profilebardiv\">\r\n                    <div className=\"name\">{userName}</div>\r\n                    <div className=\"logoutbutton\">\r\n                        <img src={dropdown} alt=\"\"/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"topbuttons\">\r\n                    <div className=\"minimize\"></div>\r\n                    <div className=\"close\"></div>\r\n                </div> */}\r\n                {\r\n                    picture ?\r\n                    <div className=\"picture-container\" onClick={openProfile}>\r\n                        <img className=\"center-picture-img\" src={picture} alt=\"\" title={userName} />\r\n                    </div> :\r\n                    <div className=\"picture-container\" onClick={openProfile} style={{ backgroundColor: \"violet\", color: \"black\", fontSize: \"1em\" }}>\r\n                        {userName[0].toUpperCase()}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst MainPanel = () => {\r\n    const [isPlaying,] = CustomUseState(playingGlobal);\r\n\r\n    return(\r\n        // <div className={ isPlaying ? \"mainpanel-with-player\" : \"mainpanel-without-player\" }>\r\n        <div className=\"mainpanel-without-player\">\r\n            <TopNav/>\r\n            <Mid/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MainPanel;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\index.js",["119","120","121","122","123"],"import \"../../../css/homestyles.css\";\r\nimport \"../../../css/teststyles.css\";\r\nimport \"../../../css/albumview.css\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\nimport HomeScreen from \"./HomeScreen\";\r\nimport AlbumView from \"./AlbumView\";\r\nimport Library from \"./Library\";\r\nimport Radio from \"./Radio\";\r\nimport Search from \"./Search\";\r\nimport back from \"../../../assets/backbutton.png\";\r\nimport dropdown from \"../../../assets/dropdown.png\";\r\nimport SearchIcon from \"../../../assets/searchicon.svg\";\r\nimport Close from \"../../../assets/blackclose.png\";\r\nimport { \r\n    CustomUseState,\r\n    openerGlobal,\r\n    homeClass,\r\n    wait,\r\n    sendRequest,\r\n    albumGlobal,\r\n    topBarGlobal,\r\n    searchBarGlobal,\r\n    playingGlobal,\r\n    prefix\r\n} from \"../../../common\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport Queue from \"./Queue\";\r\nlet actualIsOpen, topBar, timeout = undefined, searchBar, openLocal;\r\nlet scrollTimeout = null;\r\n// const { ipcRenderer } =  window.electron;\r\n\r\n\r\nexport const MidPanelLoader = () => {\r\n    return(\r\n        <div className=\"loader\">\r\n            <div className=\"loaderinner\">\r\n                <div className=\"one\"></div>\r\n                <div className=\"two\"></div>\r\n                <div className=\"three\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst NewReleases = () => {\r\n    return(\r\n        <div className=\"third\"></div>\r\n    );\r\n};\r\n\r\nconst SearchBar = () => {\r\n    const [searchConfig, setSearchConfig] = CustomUseState(searchBarGlobal);\r\n    searchBar = searchConfig;\r\n\r\n    const call = async () => {\r\n        timeout = undefined;\r\n        let res;\r\n        if (searchBar.input !== \"\") {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                callLoading: true\r\n            });\r\n            res = await sendRequest({\r\n                method: \"GET\",\r\n                endpoint: `/search?name=${searchBar.input}`\r\n            });\r\n            console.log(\"res\",res);\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                result: res,\r\n                callLoading: false\r\n            });\r\n        } else {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                callLoading: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleInput = e => {\r\n        if (e.target.value) {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                input: e.target.value,\r\n                callLoading: true,\r\n                result: {}\r\n            }); \r\n        } else {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                input: e.target.value,\r\n                callLoading: true\r\n            });\r\n        }\r\n        // setInput(e.target.value);\r\n        if (timeout) clearTimeout(timeout);\r\n        timeout = setTimeout(call,500);\r\n    };\r\n\r\n    const clearInput = e => {\r\n        // setInput(\"\");\r\n        // setResult({ songs: {}, albums: {} });\r\n        setSearchConfig({\r\n            ...searchBar,\r\n            input: \"\",\r\n            result: { songs: {}, albums: {} }\r\n        });\r\n        timeout = undefined;\r\n    };\r\n\r\n    if (searchBar.show) {\r\n        return(\r\n            <div className=\"searchrelated\">\r\n                <div className=\"searchbar\">\r\n                    <div className=\"searchimg\">\r\n                        <img src={SearchIcon} alt=\"\" />\r\n                    </div>\r\n                    <input type=\"text\" value={searchBar.input} placeholder=\"Search for Songs or Albums\"\r\n                    className=\"searchinput\" spellCheck=\"false\" onInput={handleInput} autoFocus={true}/>\r\n                    {\r\n                        searchBar.input !== \"\" ?\r\n                        <div className=\"clearinput\">\r\n                            <img src={Close} alt=\"\" onClick={clearInput} />\r\n                        </div> : <div style={{ width: \"50px\", height: \"100%\" }}></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return <></>;\r\n};\r\n\r\nconst ProfileBar = () => {\r\n    const userName = localStorage.getItem(\"username\");\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [redirectValue, setRedirectValue] = useState({ status: false, to: \"\" });\r\n    const [,setClass] = CustomUseState(homeClass);\r\n    const [,setSong] = CustomUseState(albumGlobal);\r\n    const [topBarConfig,] = CustomUseState(topBarGlobal);\r\n    actualIsOpen = openerDetails.open;\r\n    topBar = topBarConfig;\r\n    let { button, buttonFunc, title, bgColor } = topBar;\r\n\r\n    const min = () => {\r\n        // ipcRenderer.send(\"minimize\");\r\n        // ipcRenderer.send(\"full\");\r\n    };\r\n\r\n    // const max = () => {\r\n    //     ipcRenderer.send(\"maximize\");\r\n    // };\r\n\r\n    const close = () => {\r\n        // ipcRenderer.send(\"close\");\r\n    };\r\n\r\n    const handleClick = (e) => {\r\n        const list = [\"rowinmenu\",\"rowtext\"];\r\n        if (list.indexOf(e.target.className) === -1 && actualIsOpen) {\r\n            setOpenerDetails({\r\n                open: false,\r\n                xValue: 0,\r\n                yValue: 0,\r\n                type: null\r\n            });\r\n        }\r\n        // setOpenerDetails({ ...openerDetails, open: false });\r\n    };\r\n\r\n    const modifyLocalStorage = async () => {\r\n        let text = localStorage.getItem(\"email\");\r\n        let password = localStorage.getItem(\"password\");\r\n        await wait(1000);\r\n        localStorage.clear();\r\n        localStorage.setItem(\"email\",text);\r\n        localStorage.setItem(\"password\",password);\r\n        await wait(1000);\r\n        sessionStorage.clear();\r\n    };\r\n\r\n    const logOut = async () => {\r\n        modifyLocalStorage();\r\n        sendRequest({\r\n            method: \"GET\",\r\n            endpoint: `/logout`\r\n        });\r\n        setClass(\"homemain end\");\r\n        setSong({});\r\n        await wait(500);\r\n        setRedirectValue({ status: true, to: \"/\" });\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n    };\r\n\r\n    const openNew = async () => {\r\n        // ipcRenderer.send(\"opennew\");\r\n    };\r\n\r\n    const handleMenu = (e) => {\r\n        e.stopPropagation();\r\n        setOpenerDetails({\r\n            open: !actualIsOpen,\r\n            yValue: e.clientY + 10,\r\n            xValue: e.clientX - 200,\r\n            type: \"album\",\r\n            data: [\r\n                // {\r\n                //     name: \"Account\",\r\n                //     func: openNew\r\n                // },\r\n                {\r\n                    name: \"Log out\",\r\n                    func: logOut\r\n                }\r\n            ]\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousedown\",handleClick);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\",handleClick);\r\n        }\r\n    },[]);\r\n\r\n\r\n    if (redirectValue.status) {\r\n        // return <Redirect to={redirectValue.to} />\r\n    }\r\n    return(\r\n        <div className=\"entiretop\"\r\n        style={ bgColor === \"transparent\" ? { backgroundColor: \"transparent\" } : { backgroundColor: \"#121212\" } }\r\n        >\r\n            <div className=\"topbar\" style={{backgroundColor: bgColor}}>\r\n                <SearchBar/>\r\n                { button ?\r\n                    <div className=\"backbutton\" onClick={buttonFunc}>\r\n                        <img src={back} alt=\"\"/>\r\n                    </div> : \"\"\r\n                }\r\n                {\r\n                    title ? \r\n                    <div className=\"toptitlediv\">{title}</div> : \"\"\r\n                }\r\n                <div className=\"profilebardiv\">\r\n                    <div className=\"name\">{userName}</div>\r\n                    <div className=\"logoutbutton\">\r\n                        <img src={dropdown} alt=\"\" onClick={handleMenu}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"topbuttons\">\r\n                    <div onClick={min} className=\"minimize\"></div>\r\n                    {/* <div onClick={max} className=\"maximize\"></div> */}\r\n                    <div onClick={close} className=\"close\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Mid = () => {\r\n    const [openerDetails,] = CustomUseState(openerGlobal);\r\n    const [playing,] = CustomUseState(playingGlobal);\r\n    openLocal = openerDetails.open;\r\n    const scrollRef = useRef(null);\r\n\r\n    const removeClass = () => {\r\n        scrollRef.current.classList.remove(\"scrolling\");\r\n    };\r\n\r\n    const handleScroll = e => {\r\n        if (scrollTimeout) {\r\n            clearTimeout(scrollTimeout);\r\n        }\r\n        scrollRef.current.classList.add(\"scrolling\");\r\n        scrollTimeout = setTimeout(removeClass, 1000);\r\n    };\r\n\r\n    useEffect(() => {\r\n        scrollRef.current = document.querySelector(\".main-outer-container\");\r\n        scrollRef.current && scrollRef.current.addEventListener(\"scroll\", handleScroll);\r\n\r\n        return () => {\r\n            scrollRef.current && scrollRef.current.removeEventListener(\"scroll\", handleScroll);\r\n        };\r\n    }, []);\r\n\r\n    return(\r\n        <div className=\"midmain-without-player\">\r\n            { playing ? <Queue/> : null }\r\n            <div className=\"main-outer-container\"\r\n            style={{ overflowY: `${ openLocal ? \"hidden\" : \"overlay\" }` }}\r\n            >\r\n                <Switch>\r\n                    <Route path={`${prefix}/home/homescreen`}><HomeScreen/></Route>\r\n                    <Route path={`${prefix}/home/search`}><Search/></Route>\r\n                    <Route path={`${prefix}/home/new-releases`}><NewReleases/></Route>\r\n                    <Route path={`${prefix}/home/album/:name`}><AlbumView/></Route>\r\n                    <Route path={`${prefix}/home/library`}><Library/></Route>\r\n                    <Route path={`${prefix}/home/radio`}><Radio/></Route>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Mid;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\HomeScreen.js",["124","125","126","127","128","129","130","131"],"import \"../../../css/homestyles.css\";\r\nimport \"../../../css/teststyles.css\";\r\nimport \"../../../css/hometeststyles.css\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport playbutton from \"../../../assets/playwhite.png\";\r\nimport pausebutton from \"../../../assets/pausewhite.png\";\r\nimport Close from \"../../../assets/deletewhite.svg\";\r\nimport Play from \"../../../assets/playbutton-white.svg\";\r\nimport Pause from \"../../../assets/pausebutton-white.svg\";\r\nimport Placeholder from \"../../../assets/placeholder.svg\";\r\nimport {\r\n    CustomUseState,\r\n    routesGlobal,\r\n    queueOpenedGlobal,\r\n    sendRequest,\r\n    topBarGlobal,\r\n    openerGlobal,\r\n    albumGlobal,\r\n    songIsPausedGlobal,\r\n    playingGlobal,\r\n    queueGlobal,\r\n    topBgColorGlobal,\r\n    modifyLibrary,\r\n    checkX,\r\n    checkY,\r\n    prefix,\r\n    global,\r\n    responseBar\r\n} from \"../../../common\";\r\nimport Queue from \"./Queue\";\r\nimport Button from \"../../../Button\";\r\nimport { pauseOrPlay } from \"../../../homepage\";\r\nlet topBar, actualIsOpen;\r\n\r\n\r\nconst EachInList = ({ addCloseButton, closeFunc, item }) => {\r\n    const [routes, setRoutes] = CustomUseState(routesGlobal);\r\n    const [redirectTo, setRedirectTo] = useState(\"\");\r\n    const [song, setAlbumForPlayer] = CustomUseState(albumGlobal);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [, setQueue] = CustomUseState(queueGlobal);\r\n    let songPausedLocal = songPaused;\r\n\r\n\r\n    const display = item => {\r\n        routes.push(`/home/album/${item.Album}`);\r\n        setRoutes(routes);\r\n        setRedirectTo(`${item.Album}`);\r\n    };\r\n\r\n    const handlePlayPause = (e) => {\r\n        e.stopPropagation();\r\n        if (song.Album === item.Album) {\r\n            pauseOrPlay();\r\n            return;\r\n        }\r\n        const main = item.Type === \"Album\" ? item.Tracks : [item];\r\n        if (!playing) setPlaying(true);\r\n        if (item.Type === \"Single\") {\r\n            setQueue(main);\r\n            setAlbumForPlayer(main[0]);\r\n        } else {\r\n            main.forEach(song => {\r\n                song.Album = item.Album;\r\n                song.Thumbnail = item.Thumbnail;\r\n                song.Color = item.Color;\r\n            });\r\n            setQueue(main);\r\n            setAlbumForPlayer(main[0]);\r\n        }\r\n        localStorage.setItem(\"queue\",JSON.stringify(main));\r\n        setSongPaused(true);\r\n    };\r\n\r\n    const handleMenu = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    if (redirectTo !== \"\") {\r\n        return <Redirect to={`/home/album/${redirectTo}`} />\r\n    }\r\n    return(\r\n        <div className=\"cover\">\r\n            {\r\n                addCloseButton ? \r\n                <div className=\"crossinsearch\" onClick={() => closeFunc(item)}>\r\n                    <img src={Close} alt=\"\" />\r\n                </div> : \"\"\r\n            }\r\n            <div className=\"inner\" \r\n            onClick={() => display(item)}\r\n            onContextMenu={handleMenu}\r\n            >\r\n                {\r\n                    // noBg ?\r\n                    // <img src={item.Thumbnail} alt=\"\" className=\"innercoverimg\"/> :\r\n                    // <div className=\"coverimg\"\r\n                    // style={{ backgroundImage: `url(${Placeholder})`, backgroundSize: \"cover\" }}\r\n                    // >\r\n                        <img src={item.Thumbnail} alt=\"\" className=\"innercoverimg\"/>\r\n                    // </div>\r\n                }\r\n                <p className=\"album\">{item.Album}</p>\r\n                <p className=\"artist\">{item.AlbumArtist}</p>\r\n                {/* <div className={ show ? \"blackblurtop\" : \"blackblurtop hidden\" }></div>\r\n                <div className={ show ? \"blackblurbottom\" : \"blackblurbottom hidden\" }></div> */}\r\n                <div className={ (!songPausedLocal && song.Album === item.Album) ? \"floater-stay\" : \"floater\" }>\r\n                    <div className=\"rowplaybutton\" onClick={handlePlayPause}>\r\n                        <img src={ !songPausedLocal && song.Album === item.Album ? pausebutton : playbutton } alt=\"\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport const HorizontalList = ({ list, addCloseButton = false, closeFunc = ()=>{} }) => {\r\n    // const [redirectTo, setRedirectTo] = useState(\"\");\r\n    // const [, setTab] = CustomUseState(tabGlobal);\r\n    // const [routes, setRoutes] = CustomUseState(routesGlobal);\r\n    // const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    // actualIsOpen = openerDetails.open;\r\n\r\n    // const handleMenu = (e) => {\r\n    //     e.stopPropagation();\r\n    //     e.preventDefault();\r\n    //     setOpenerDetails({\r\n    //         open: !actualIsOpen,\r\n    //         yValue: e.clientY,\r\n    //         xValue: e.clientX,\r\n    //         type: \"album\",\r\n    //         data: [\r\n    //             {\r\n    //                 name: \"Add album to queue\",\r\n    //                 func: () => {}\r\n    //             },\r\n    //             {\r\n    //                 name: `Play next`,\r\n    //                 func: () => {}\r\n    //             }\r\n    //         ]\r\n    //     });\r\n    // };\r\n\r\n    // if (redirectTo !== \"\") {\r\n    //     return <Redirect to={`/home/album/${redirectTo}`} />\r\n    // }\r\n    return(\r\n        <>\r\n        <div className=\"innerlist\">\r\n            {\r\n                list.map((item,i) => {\r\n                    if (i<5) {\r\n                        return(\r\n                            <EachInList addCloseButton={addCloseButton} closeFunc={closeFunc} item={item} />\r\n                        );\r\n                    }\r\n                    return null;\r\n                })\r\n            }\r\n        </div>\r\n        </>\r\n    );\r\n};\r\nconst EachTile = ({ mouseOver, mouseOut, album }) => {\r\n    let songPausedLocal;\r\n    const [redirectTo, setRedirectTo] = useState(\"\");\r\n    const [routes, setRoutes] = CustomUseState(routesGlobal);\r\n    const [song, setAlbumForPlayer] = CustomUseState(albumGlobal);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [, setQueue] = CustomUseState(queueGlobal);\r\n    songPausedLocal = songPaused;\r\n\r\n    const moveOver = (album,e) => {\r\n        e.stopPropagation();\r\n        routes.push(`/home/album/${album}`);\r\n        setRoutes(routes);\r\n        setRedirectTo(`${album}`);\r\n    };\r\n    \r\n    const handlePlayPause = (e) => {\r\n        e.stopPropagation();\r\n        // console.log(\"album\",album,\"song\",song);\r\n        if (song.Album === album.Album) {\r\n            pauseOrPlay();\r\n            return;\r\n        }\r\n        const main = album.Type === \"Album\" ? album.Tracks : [album];\r\n        if (!playing) setPlaying(true);\r\n        if (album.Type === \"Single\") {\r\n            setQueue(main);\r\n            setAlbumForPlayer(main[0]);\r\n        } else {\r\n            main.forEach(song => {\r\n                song.Album = album.Album;\r\n                song.Thumbnail = album.Thumbnail;\r\n                song.Color = album.Color;\r\n            });\r\n            setQueue(main);\r\n            setAlbumForPlayer(main[0]);\r\n        }\r\n        localStorage.setItem(\"queue\",JSON.stringify(main));\r\n        setSongPaused(true);\r\n    };\r\n\r\n    if (redirectTo !== \"\") {\r\n        return <Redirect to={`/home/album/${redirectTo}`} />\r\n    }\r\n    return(\r\n        <div className=\"rowfirst\"\r\n        onMouseOver={() => mouseOver(album.Color)}\r\n        onClick={(e) => moveOver(album.Album,e)}\r\n        onMouseOut={mouseOut}>\r\n            <img src={album.Thumbnail} alt=\"\" className=\"rowimage\" />\r\n            <div className=\"rowname\">{album.Album}</div>\r\n            <div className={  (!songPausedLocal && song.Album === album.Album) ? \r\n            \"rowplaybuttoncontainer-stay\" : \"rowplaybuttoncontainer\" }>\r\n                <div className=\"rowplaybutton\" onClick={handlePlayPause}>\r\n                    <img src={ !songPausedLocal && song.Album === album.Album ? pausebutton : playbutton } alt=\"\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst EachRow = ({ row, mouseOver, mouseOut }) => {\r\n    return(\r\n        <div className=\"row\">\r\n            {\r\n                row.map(each => {\r\n                    return(\r\n                        <EachTile mouseOver={mouseOver} mouseOut={mouseOut} album={each} />\r\n                    );\r\n                })\r\n            }\r\n            {/* <div className=\"rowfirst\"></div>\r\n            <div className=\"rowfirst\"></div> */}\r\n        </div>\r\n    );\r\n};\r\nconst TopDisplay = ({ mostPlayed, mouseOver, mouseOut }) => {\r\n    const { title, list } = mostPlayed;\r\n\r\n    return(\r\n        <div className=\"shortcuts\">\r\n            <div className=\"bigmaintitle\">\r\n                <p>{title}</p>\r\n            </div>\r\n            <div style={{ width: \"100%\", height: \"15px\" }}></div>\r\n            {\r\n                Object.keys(list).map(each => {\r\n                    return(\r\n                        <EachRow row={list[each]} mouseOver={mouseOver} mouseOut={mouseOut}/>\r\n                    );\r\n                })\r\n            }\r\n            <div style={{ width: \"100%\", height: \"15px\" }}></div>\r\n        </div>\r\n    );\r\n};\r\nconst ActualHomeScreen = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [all, setAll] = useState({});\r\n    const [played, setPlayed] = useState({});\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [bg, setBg] = useState(\"\");\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [, setTopBgColor] = CustomUseState(topBgColorGlobal);\r\n    actualIsOpen = openerDetails.open;\r\n    topBar = topBarConfig;\r\n\r\n    const mouseOut = () => {\r\n        const { list } = played;\r\n        if (Object.keys(list).length === 0) {\r\n            // setBg(`#121212`);\r\n            // setTopBgColor(\"#202020\");\r\n            setTopBgColor(\"#252525\");\r\n            return;\r\n        }\r\n        let color = list[0][0].Color.split(\",\");\r\n        let another = color;\r\n        color[3] = \"0.3)\";\r\n        color = color.join(\",\");\r\n        setBg(color);\r\n        another[3] = \"0.3)\";\r\n        another = another.join(\",\");\r\n        setTopBgColor(another);\r\n        // return color;\r\n    };\r\n\r\n    const mouseOver = (color) => {\r\n        let changedColor = color.split(\",\");\r\n        changedColor[3] = \"0.3)\";\r\n        changedColor = changedColor.join(\",\");\r\n        setBg(changedColor);\r\n    };\r\n\r\n    const scrollHandler = (e) => {\r\n        const top = e.currentTarget.scrollTop;\r\n        sessionStorage.setItem(\"home-scroll\",top);\r\n        if (Object.keys(played.list).length === 0) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                // bgColor: bg\r\n                bgColor: \"#252525\"\r\n            });\r\n            return;\r\n        }\r\n        if (top > 200 && topBar.bgColor === \"transparent\") {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                bgColor: bg\r\n            });\r\n        }\r\n        if (top < 200 && topBar.bgColor !== \"transparent\") {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                bgColor: \"transparent\"\r\n            });\r\n        }\r\n        if (actualIsOpen) {\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const call = async () => {\r\n            const res = await sendRequest({\r\n                method: \"GET\",\r\n                endpoint: `/getHomeAlbums`\r\n            });\r\n            setAll(res.albums);\r\n            setPlayed(res.mostPlayed);\r\n            setIsLoading(false);\r\n        };\r\n        if (isLoading) {\r\n            call();\r\n        } else {\r\n            const main = document.querySelector(\".main\");\r\n            main.scrollTop = sessionStorage.getItem(\"home-scroll\") || 0;\r\n            mouseOut();\r\n        }\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            button: false,\r\n            bgColor: \"transparent\"\r\n        });\r\n    }, [isLoading]);\r\n\r\n    const list = [\"New Releases\",\"Recently Added\",\"Most Played\",\"On Loop\",\"More Like DIVINE\"];\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader />\r\n    }\r\n    return(\r\n        <div className=\"homescreen\">\r\n            <div className=\"main\" onScroll={scrollHandler}>\r\n                <div className=\"colourtop\"\r\n                style={ Object.keys(played.list).length !== 0 ?\r\n                    // { backgroundImage: `linear-gradient(${bg},#121212)` } : \r\n                    { backgroundColor: `${bg}` } : \r\n                    // { backgroundImage: `linear-gradient(rgba(127,255,212,0.2),#121212,#121212,#121212)` } }\r\n                    // { backgroundColor: `#121212` } }\r\n                    { backgroundColor: `#252525` } }\r\n                >\r\n                    <div className=\"forblur\"></div>\r\n                </div>\r\n                <div className=\"noncolour\">\r\n                    {\r\n                        Object.keys(played.list).length !== 0 ? <TopDisplay mostPlayed={played} mouseOver={mouseOver} mouseOut={mouseOut}/> : \"\"\r\n                    }\r\n                    {   \r\n                        Object.keys(all).map((key,i) => {\r\n                            if (all[key].length !== 0) {\r\n                                return(\r\n                                    <div className=\"outline\">\r\n                                        <div className={ i === 0 && Object.keys(played.list).length === 0 ? \"bigmaintitle\" : \"maintitle\" }>\r\n                                            <p>{key}</p>\r\n                                            {/* { all[key].length > 5 ?\r\n                                                <div className=\"viewmore\">\r\n                                                    <p>VIEW MORE</p>\r\n                                                </div> : \"\"\r\n                                            } */}\r\n                                        </div>\r\n                                        <div className=\"list\">\r\n                                            <HorizontalList list={all[key]} />\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst QuickPickRow = ({ row }) => {\r\n    return(\r\n        <div className=\"quickpickrow\">\r\n            {\r\n                row.map(item => {\r\n                    return <EachInQuickPick song={item} />\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst EachInQuickPick = ({\r\n    song,\r\n    openerFunc,\r\n    openerDetails,\r\n    setOpenerDetails,\r\n    playing,\r\n    setPlaying,\r\n    queue,\r\n    setQueue,\r\n    songIsPaused,\r\n    setSongIsPaused,\r\n    playingSong,\r\n    setPlayingSong\r\n}) => {\r\n    const [hovered, setHovered] = useState(false);\r\n\r\n    const handleMenu = e => {\r\n        e.stopPropagation();\r\n        const dimensions = { x: e.clientX, y: e.clientY };\r\n        const windowDim = { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight };\r\n        openerFunc(e, { dimensions, windowDim, song });\r\n    };\r\n\r\n    const determine = () => {\r\n        const nameOfSong = song.Title || song.Album;\r\n        const nameOfPlayingSong = playingSong.Title || playingSong.Album;\r\n        if (nameOfSong === nameOfPlayingSong) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const handlePlayPause = e => {\r\n        e.stopPropagation();\r\n        if (openerDetails.open) {\r\n            setOpenerDetails({ ...openerDetails, open: false });\r\n        }\r\n        if (determine()) {\r\n            pauseOrPlay();\r\n            return;\r\n        }\r\n        const main = { ...song };\r\n        if (!playing) setPlaying(true);\r\n        main.id = global.id = 0;\r\n        setQueue([main]);\r\n        setPlayingSong(main);\r\n        localStorage.setItem(\"queue\",JSON.stringify([main]));\r\n        setSongIsPaused(true);\r\n    };\r\n\r\n    return(\r\n        <div className=\"eachinquick\" onMouseOver={() => setHovered(true)} onMouseOut={() => setHovered(false)}>\r\n            <div className=\"tile-art\">\r\n                <img src={song.Thumbnail || \"\"} alt=\"\" />\r\n                <div className=\"tiledummyshadow\">\r\n                    {/* <img src={Play} alt=\"\" /> */}\r\n                    <Button className=\"tile-button\" onClick={handlePlayPause}>\r\n                        {\r\n                            determine() ?\r\n                            <img src={ songIsPaused ? Play : Pause } alt=\"\" /> :\r\n                            <img src={Play} alt=\"\" />\r\n                        }\r\n                    </Button>\r\n                </div>\r\n                {\r\n                    !hovered && determine() ? \r\n                    <div className=\"anim-cover\">\r\n                        {\r\n                            !songIsPaused ?\r\n                            <div className=\"playinganim\">\r\n                                <div className=\"div1\"></div>\r\n                                <div className=\"div2\"></div>\r\n                                <div className=\"div3\"></div>\r\n                                <div className=\"div4\"></div>\r\n                            </div> : \r\n                            <div className=\"pausedanim\">\r\n                                <div className=\"div5\"></div>\r\n                                <div className=\"div6\"></div>\r\n                                <div className=\"div7\"></div>\r\n                                <div className=\"div8\"></div>\r\n                            </div> \r\n                        }\r\n                    </div> : null\r\n                }\r\n            </div>\r\n            <div className={ hovered ? \"tile-details-short\" : \"tile-details\" }>\r\n                <div className=\"tile-title\">{song.Title || song.Album}</div>\r\n                <div className=\"tile-artist\">\r\n                    <p>{song.Artist}</p>\r\n                    <div className=\"home-separator\"><div></div></div>\r\n                    <p>{song.Album}</p>\r\n                </div>\r\n            </div>\r\n            <div className={ hovered ? \"tile-last\" : \"tile-last-hidden\" }>\r\n                <div className=\"tileopener\" onClick={handleMenu}>\r\n                    <div className=\"tileopener1\"></div>\r\n                    <div className=\"tileopener2\"></div>\r\n                    <div className=\"tileopener3\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst StartRadio = (props) => {\r\n    const { picks, openerFunc } = props;\r\n\r\n    return(\r\n        <>\r\n            <div className=\"hugetitlename\">\r\n                <div className=\"top-title\">START RADIO FROM A SONG</div>\r\n                <div className=\"bottom-title\">Quick Picks</div>\r\n            </div>\r\n            <div className=\"quickpick-container\">\r\n                <div className=\"quickpick-grid\">\r\n                    {\r\n                        picks.map(item => {\r\n                            return <EachInQuickPick song={item} openerFunc={openerFunc} {...props} />\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst EachAlbum = ({ item }) => {\r\n    const [song,] = CustomUseState(albumGlobal);\r\n    const [songPaused,] = CustomUseState(songIsPausedGlobal);\r\n    let songPausedLocal = songPaused;\r\n\r\n    const handleMenu = e => {};\r\n\r\n    const handlePlayPause = e => {};\r\n\r\n    if (Object.keys(item).length > 0) {\r\n        return(\r\n            <div className=\"homealbum\">\r\n                <div className=\"innerhomealbum\">\r\n                    <div className=\"homeartcover\">\r\n                        <div className=\"homedummyshadow\"></div>\r\n                        <div className={ (song.Album === item.Album) ? \"homeplaybuttonfixed\" : \"homeplaybutton\" }>\r\n                            <Button className=\"innerhomeplaybutton\" onClick={handlePlayPause}>\r\n                                <img src={ (!songPausedLocal && song.Album === item.Album) ? Pause : Play} alt=\"\" />\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"libraryopener\" onClick={handleMenu}>\r\n                            <div className=\"libraryopener1\"></div>\r\n                            <div className=\"libraryopener2\"></div>\r\n                            <div className=\"libraryopener3\"></div>\r\n                        </div>\r\n                        <img src={item.Thumbnail || \"\"} alt=\"\" />\r\n                    </div>\r\n                    <div className=\"homealbumname\">{item.Title || item.Album}</div>\r\n                    <span className=\"homeartistname\">\r\n                        <span>{item.AlbumArtist}</span>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return <div style={{ width: \"15%\", height: \"100%\" }}></div>\r\n};\r\n\r\nconst NewActualHomeScreen = () => {\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [playingSong, setPlayingSong] = CustomUseState(albumGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [songIsPaused, setSongIsPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [,setResObj] = CustomUseState(responseBar);\r\n    // const [redirectTo, setRedirectTo] = useState(\"\");\r\n    // const [routes, setRoutes] = CustomUseState(routesGlobal);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [data, setData] = useState({});\r\n    const [picks, setPicks] = useState({});\r\n    const list = [\"tileopener\",\"tileopener1\",\"tileopener2\",\"tileopener3\"];\r\n    const hist = useHistory();\r\n    actualIsOpen = openerDetails.open;\r\n\r\n    const call = async () => {\r\n        let res = await sendRequest({\r\n            method: \"GET\",\r\n            endpoint: `/getHomeAlbums`\r\n        });\r\n        if (res) {\r\n            res.albums = modifyLibrary(res.albums,6);\r\n            setData(res.albums);\r\n            setPicks(res.quickPicks);\r\n            // setPlayed(res.mostPlayed);\r\n            // ipcRenderer.send(\"response\",res.albums);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const goToAlbum = song => {\r\n        // routes.push(`/home/album/${song.Album}`);\r\n        // setRoutes(routes);\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        hist.push(`${prefix}/home/album/${song.Album}`);\r\n        // hist.push(`/`);\r\n        // setRedirectTo(`${song.Album}`);\r\n    };\r\n\r\n    const addTrackToQueue = song => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        const dummy = [ ...queue ];\r\n        const len = dummy.length;\r\n        if (len === 0) return;\r\n        dummy[len] = { ...song, id: ++global.id };\r\n        setQueue(dummy);\r\n        setResObj({ open: true, msg: `Added ${song.Title || song.Album} to queue` });\r\n    };\r\n\r\n    const playTrackNext = song => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        if (queue.length === 0) return;\r\n        const curIndex = queue.indexOf(playingSong);\r\n        const dummy = [ ...queue ];\r\n        dummy.splice(curIndex+1, 0, { ...song, id: ++global.id });\r\n        setQueue(dummy);\r\n        setResObj({ open: true, msg: `Playing ${song.Title || song.Album} next` });\r\n    };\r\n\r\n    const handleMenu = (e, { dimensions, windowDim, song: album }) => {\r\n        const data = [\r\n            {\r\n                name: \"Go to album\",\r\n                func: () => goToAlbum(album)\r\n            },\r\n            {\r\n                name: \"Add to queue\",\r\n                func: () => addTrackToQueue(album)\r\n            },\r\n            {\r\n                name: \"Play next\",\r\n                func: () => playTrackNext(album)\r\n            }\r\n        ];\r\n        e.stopPropagation();\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: true,\r\n            xValue: checkX(dimensions.x, windowDim.width),\r\n            yValue: checkY(dimensions.y, windowDim.height, data.length),\r\n            data\r\n        });\r\n    };\r\n\r\n    const documentClick = e => {\r\n        if (!list.includes(e.target.className) && actualIsOpen) {\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isLoading) {\r\n            call();\r\n        }\r\n        // document.addEventListener(\"click\",documentClick);\r\n        return () => {\r\n            // document.removeEventListener(\"click\",documentClick);\r\n        };\r\n    },[isLoading]);\r\n\r\n    \r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"newhome\" style={{ overflowY: `${ openerDetails.open ? \"hidden\" : \"overlay\" }` }}>\r\n            {\r\n                picks.length !== 0 ?\r\n                <StartRadio picks={picks} openerFunc={handleMenu} openerDetails={openerDetails} setOpenerDetails={setOpenerDetails}\r\n                playing={playing} setPlaying={setPlaying} playingSong={playingSong} setPlayingSong={setPlayingSong}\r\n                queue={queue} setQueue={setQueue} songIsPaused={songIsPaused} setSongIsPaused={setSongIsPaused} /> : \"\"\r\n            }\r\n            {\r\n                Object.keys(data).map(each => {\r\n                    return(\r\n                        <>\r\n                        <div className=\"titlename\">{each}</div>\r\n                        <div className=\"homecontainer\">\r\n                            {\r\n                                data[each].map((item,i) => {\r\n                                    if (i<6) {\r\n                                        return <EachAlbum item={item} />\r\n                                    }\r\n                                    return \"\"\r\n                                })\r\n                            }\r\n                        </div>\r\n                        </>\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst HomeScreen = () => {\r\n    // const [queueOpened,] = CustomUseState(queueOpenedGlobal);\r\n\r\n    // if (queueOpened) {\r\n    //     return <Queue/>\r\n    // }\r\n    return <NewActualHomeScreen/>\r\n};\r\n\r\nexport default HomeScreen;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\common.js",["132"],"F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\AlbumView.js",["133","134","135","136","137","138","139","140","141","142","143","144","145"],"import { useState, useEffect, useRef } from \"react\";\r\nimport \"../../../css/albumview.css\";\r\nimport {\r\n    CustomUseState,\r\n    playingGlobal,\r\n    routesGlobal,\r\n    tabGlobal,\r\n    topBarGlobal,\r\n    checkArtist,\r\n    albumGlobal,\r\n    queueGlobal,\r\n    queueOpenedGlobal,\r\n    songIsPausedGlobal,\r\n    openerGlobal,\r\n    responseBar,\r\n    sendRequest,\r\n    checkX,\r\n    checkY,\r\n    global\r\n} from \"../../../common\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport { HorizontalList } from \"./HomeScreen\";\r\nimport { useParams, Redirect, useHistory, useLocation } from \"react-router-dom\";\r\nimport play from \"../../../assets/playwhite.png\";\r\nimport Play from \"../../../assets/playbutton-black.svg\";\r\nimport Pause from \"../../../assets/pausebutton-black.svg\";\r\nimport BackButton from \"../../../assets/backbutton-white.svg\";\r\nimport PlayWhite from \"../../../assets/playbutton-white.svg\";\r\nimport PauseWhite from \"../../../assets/pausebutton-white.svg\";\r\nimport AddButton from \"../../../assets/addbutton-black.svg\";\r\nimport pause from \"../../../assets/pausewhite.png\";\r\nimport copyright from \"../../../assets/copyright.png\";\r\nimport Placeholder from \"../../../assets/placeholder.svg\";\r\nimport Queue from \"./Queue\";\r\nimport { pauseOrPlay } from \"../../../homepage\";\r\nimport Button from \"../../../Button\";\r\nlet mainscreen, actualIsOpen, bgChanged = false, topBar, isOpen = false;\r\n\r\n\r\nconst ShowMoreAlbum = ({ moreAlbums, albumartist }) => {\r\n    if (moreAlbums.length === 0) {\r\n        return \"\";\r\n    }\r\n    return(\r\n        <div className=\"morealbumdiv\">\r\n            <div className=\"morebydisplay\">More By {albumartist.split(\",\")[0]}</div>\r\n            <div className=\"list\">\r\n                <HorizontalList list={moreAlbums} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst ActualAlbumView = () => {\r\n    const [p, setP] = useState(\"\");\r\n    const params = useParams();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [albumDetails, setAlbumDetails] = useState({});\r\n    const [routes, setRoutes] = CustomUseState(routesGlobal);\r\n    const [,setTab] = CustomUseState(tabGlobal);\r\n    const [redirectValue, setRedirectValue] = useState({ status: false, to: \"\" });\r\n    // const [,setKeepButton] = CustomUseState(keepButtonGlobal);\r\n    // const [,setOnClickFunc] = CustomUseState(onClickFuncGlobal);\r\n    // const [,setTopTitle] = CustomUseState(topTitleGlobal);\r\n    // const [,setBgColor] = CustomUseState(topBgColor);\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [albumSong, setAlbumForPlayer] = CustomUseState(albumGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    const [added, setAdded] = useState(false);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const albummain = useRef();\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [moreAlbums, setMoreAlbums] = useState([]);\r\n    const [,setResObj] = CustomUseState(responseBar);\r\n    actualIsOpen = openerDetails.open;\r\n    topBar = topBarConfig;\r\n    if (p !== params.name) {\r\n        setIsLoading(true);\r\n        setP(params.name);\r\n    }\r\n\r\n\r\n    const checkForLeftPanel = () => {\r\n        const route = routes[routes.length - 1];\r\n        if (route.toLowerCase().includes(\"homescreen\")) setTab(\"Home\");\r\n        else if (route.toLowerCase().includes(\"search\")) setTab(\"Search\");\r\n        else if (route.toLowerCase().includes(\"new-releases\")) setTab(\"New Releases\");\r\n        else if (route.toLowerCase().includes(\"library\")) setTab(\"Library\");\r\n    };\r\n\r\n    const scrollHandler = e => {\r\n        if (albummain.current.scrollTop > 300 && !bgChanged) {\r\n        // if (mainscreen.current.scrollTop > 300 && bgChanged === false) {\r\n            const initColor = albumDetails && albumDetails.Color.substring(5,albumDetails.Color.length-1).split(\",\");\r\n            bgChanged = true;\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                title: albumDetails.Album,\r\n                bgColor: `rgba(${initColor[0]},${initColor[1]},${initColor[2]},0.3)`\r\n            });\r\n            // setTopTitle(albumDetails.Album);\r\n            // setBgColor(`rgba(${initColor[0]},${initColor[1]},${initColor[2]},0.3)`);\r\n        }\r\n        if (albummain.current.scrollTop < 300 && bgChanged) {\r\n        // if (mainscreen.current.scrollTop < 300 && bgChanged === true) {\r\n            bgChanged = false;\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                title: \"\",\r\n                bgColor: \"transparent\"\r\n            });\r\n            // setTopTitle(\"\");\r\n            // setBgColor(\"transparent\");\r\n        }\r\n        if (actualIsOpen) {\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const goBack = () => {\r\n        if (routes.length > 1) {\r\n            routes.splice(routes.length-1,1);\r\n            setRoutes(routes);\r\n        }\r\n        // checkForLeftPanel();\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            button: false,\r\n            title: \"\",\r\n            bgColor: \"transparent\"\r\n        });\r\n        setRedirectValue({ status: true, to: routes[routes.length - 1] });\r\n    };\r\n\r\n    const call = async () => {\r\n        let res = await sendRequest({\r\n            method: \"POST\",\r\n            endpoint: `/getAlbumDetails`,\r\n            data: {\r\n                album: params.name\r\n            }\r\n        });\r\n        if (res) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: true,\r\n                buttonFunc: goBack\r\n            });\r\n            // setKeepButton(true);\r\n            // setOnClickFunc(goBack);\r\n            // setBgColor(\"transparent\")\r\n            setAlbumDetails(res.album);\r\n            setMoreAlbums(res.moreAlbums);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const playButton = (albumDetails) => {\r\n        console.log(\"clicked\");\r\n        if (decidePlayOrPause()) {\r\n        console.log(\"play/pause\");\r\n            pauseOrPlay();\r\n        } else {\r\n        console.log(\"other\");\r\n            const main = albumDetails.Type === \"Album\" ? albumDetails.Tracks : [albumDetails];\r\n            if (!playing) setPlaying(true);\r\n            if (albumDetails.Type === \"Single\") {\r\n                setQueue(main);\r\n                setAlbumForPlayer(main[0]);\r\n            } else {\r\n                main.forEach(song => {\r\n                    song.Album = albumDetails.Album;\r\n                    song.Thumbnail = albumDetails.Thumbnail;\r\n                    song.Color = albumDetails.Color;\r\n                    song.Year = albumDetails.Year;\r\n                });\r\n                setQueue(main);\r\n                setAlbumForPlayer(main[0]);\r\n            }\r\n            localStorage.setItem(\"queue\",JSON.stringify(main));\r\n            setSongPaused(true);\r\n        }\r\n    };\r\n\r\n    const addAlbumToQueue = () => {\r\n        // if (!added) {\r\n            const main = albumDetails.Type === \"Album\" ? albumDetails.Tracks : [albumDetails];\r\n            const mainQueue = queue;\r\n            const index = mainQueue.indexOf(albumSong);\r\n            if (index === -1) return;\r\n            if (albumDetails.Type === \"Single\") {\r\n                mainQueue.push(main[0]);\r\n                // mainQueue.splice(index,0,main[0]);\r\n                localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n                setQueue(mainQueue);\r\n                // setAlbumForPlayer(main[0]);\r\n                setResObj({ open: true, msg: \"Added single to queue\" });\r\n            } else {\r\n                // let i = 0;\r\n                main.forEach(song => {\r\n                    song.Album = albumDetails.Album;\r\n                    song.Color = albumDetails.Color;\r\n                    song.Thumbnail = albumDetails.Thumbnail;\r\n                    song.Year = albumDetails.Year;\r\n                    mainQueue.push(song);\r\n                    // mainQueue.splice(index+i,0,song);\r\n                    // ++i;\r\n                });\r\n                localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n                setQueue(mainQueue);\r\n                setResObj({ open: true, msg: \"Added album to queue\" });\r\n                // setAlbumForPlayer(main[0]);\r\n            }\r\n            setAdded(true);\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        // }\r\n    };\r\n\r\n    const playAlbumNext = () => {\r\n        if (queue.length !== 0) {\r\n            const index = queue.indexOf(albumSong);\r\n            if (albumDetails.Type === \"Single\") {\r\n                queue.splice(index+1,0,albumDetails);\r\n            } else {\r\n                albumDetails.Tracks.forEach((song,i) => {\r\n                    song.Album = albumDetails.Album;\r\n                    song.Color = albumDetails.Color;\r\n                    song.Thumbnail = albumDetails.Thumbnail;\r\n                    song.Year = albumDetails.Year;\r\n                    queue.splice(index+1+i,0,song);\r\n                });\r\n            }\r\n            localStorage.setItem(\"queue\",JSON.stringify(queue));\r\n            setQueue(queue);\r\n            setResObj({ open: true, msg: `Playing '${albumDetails.Album}' next` });\r\n        }\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: false\r\n        });\r\n    };\r\n\r\n    const displayDirect = (album) => {\r\n        if (Object.keys(album).length > 0) {\r\n            const type = album.Type === \"Album\";\r\n            const dur = type ? album.Tracks[0].Duration.split(\": \") : album.Duration.split(\": \");\r\n            const sec = parseInt(dur[1]);\r\n            return `${dur[0]} min${ sec !== 0 ? ` ${sec} sec` : `` }`;\r\n        }\r\n    };\r\n\r\n    const addAndDisplay = (album) => {\r\n        if (Object.keys(album).length > 0) {\r\n            let min = 0, sec = 0;\r\n            album.Tracks.forEach(track => {\r\n                const dur = track.Duration.split(\": \");\r\n                min += parseInt(dur[0]);\r\n                sec += parseInt(dur[1]);\r\n            });\r\n            min += Math.floor(sec/60);\r\n            sec = sec%60;\r\n            return `${min} min${ sec !== 0 ? ` ${sec} sec` : `` }`;\r\n        }\r\n    };\r\n\r\n    const decidePlayOrPause = () => {\r\n        let sameAlbum = false;\r\n        const titleInSong = albumSong.Title || false;\r\n        if (!titleInSong && albumDetails.Type === \"Album\") {\r\n            return false;\r\n        }\r\n        if (!titleInSong && albumDetails.Type === \"Single\") {\r\n            return albumSong.Album === albumDetails.Album;\r\n        }\r\n        albumDetails.Tracks && albumDetails.Tracks.every(song => {\r\n            if (song.Title === titleInSong) {\r\n                sameAlbum = true;\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return sameAlbum;\r\n    };\r\n\r\n    const handleClick = (e) => {\r\n        const list = [\"opener\",\"rowinmenu\",\"rowtext\"];\r\n        if (list.indexOf(e.target.className) === -1 && actualIsOpen) {\r\n            mainscreen.style.overflow = \"overlay\";\r\n            setOpenerDetails({\r\n                open: false,\r\n                xValue: 0,\r\n                yValue: 0,\r\n                type: null\r\n            });\r\n        }\r\n    };\r\n\r\n    const change = (color) => {\r\n        // color = color.split(\",\");\r\n        // color[3] = \"0.5)\";\r\n        // color = color.join(\",\");\r\n        // console.log(\"color\",color);\r\n        return color;\r\n    };\r\n\r\n    const handleMenu = (e) => {\r\n        e.stopPropagation();\r\n        setOpenerDetails({\r\n            open: !actualIsOpen,\r\n            yValue: e.clientY + 10,\r\n            xValue: e.clientX + 10,\r\n            type: \"album\",\r\n            data: [\r\n                {\r\n                    name: \"Add album to queue\",\r\n                    func: addAlbumToQueue\r\n                },\r\n                {\r\n                    name: `Play ${albumDetails.Type.toLowerCase()} next`,\r\n                    func: playAlbumNext\r\n                }\r\n            ]\r\n        });\r\n    };\r\n\r\n    const compare = (a,b) => {\r\n        if (a.Title > b.Title) return 1;\r\n        return -1;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isLoading) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: false,\r\n                title: \"\",\r\n                bgColor: \"transparent\"\r\n            });\r\n            call();\r\n        } else {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: true,\r\n                buttonFunc: goBack\r\n            });\r\n            mainscreen = document.querySelector(\".albummain\");\r\n            document.addEventListener(\"mousedown\",handleClick);\r\n        }\r\n        return () => {\r\n            setRedirectValue({ ...redirectValue, status: false });\r\n            document.removeEventListener(\"mousedown\",handleClick);\r\n        };\r\n    },[isLoading]);\r\n\r\n\r\n    if (redirectValue.status) {\r\n        return <Redirect to={`${redirectValue.to}`} />\r\n    }\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"albummain\" onScroll={scrollHandler} ref={albummain}>\r\n            <div className=\"topview\"\r\n            style={{background: `linear-gradient(to bottom, ${change(albumDetails.Color || \"\")}, #121212)`}}\r\n            >\r\n                <div className=\"albumcontainer\">\r\n                    <div className=\"albumart\" style={{\r\n                        backgroundImage: `url(${Placeholder})`,\r\n                        backgroundSize: \"cover\"\r\n                    }}>\r\n                        <img src={albumDetails.Thumbnail || \"\"} alt=\"albumart\" />\r\n                    </div>\r\n                    <div className=\"titlecontainer\">\r\n                        <div className=\"albumtype\">\r\n                            {(albumDetails.Type && albumDetails.Type.toUpperCase()) || \"\"}\r\n                        </div>\r\n                        <div className={albumDetails.Album && albumDetails.Album.length > 22 ? \"albumname-extrasmall\" :\r\n                            albumDetails.Album && albumDetails.Album.length > 18 ? \"albumname-small\" : \"albumname-large\"}>\r\n                        {/* <div className={albumDetails.Album && albumDetails.Album.length > 22 ? \"albumname-extrasmall\" :\r\n                            albumDetails.Album && albumDetails.Album.length > 18 ? \"albumname-extrasmall\" : \"albumname-extrasmall\"}> */}\r\n                            <p>{albumDetails.Album}</p>\r\n                        </div>\r\n                        <div className=\"albumartist\">\r\n                            {\r\n                                Object.keys(albumDetails).length > 0 ?\r\n                                albumDetails.AlbumArtist.split(\", \").map((item,i) => {\r\n                                    return(\r\n                                        <>\r\n                                            <div className=\"albumartistname\"\r\n                                            onMouseOver={(e) => checkArtist(item,e,\"albumartist\")}>\r\n                                                {item || \"\"}\r\n                                            </div>\r\n                                            {\r\n                                                i !== albumDetails.AlbumArtist.split(\", \").length - 1 ?\r\n                                                <div className=\"separator\"></div> : \"\"\r\n                                            }\r\n                                        </>\r\n                                    );\r\n                                }) : \"\"\r\n                            }\r\n                            <div className=\"separator\"></div>\r\n                            <div className=\"year\">{albumDetails.Year || \"\"}</div>\r\n                            <div className=\"separator\"></div>\r\n                            <div className=\"noofsongs\">\r\n                                {\r\n                                    albumDetails.Type === \"Album\" ? \r\n                                    albumDetails.Tracks.length === 1 ? `1 Song` : `${albumDetails.Tracks.length} Songs` : \"1 Song\"\r\n                                }\r\n                            </div>\r\n                            <div className=\"separator\"></div>\r\n                            <div className=\"noofsongs\">\r\n                                {\r\n                                    albumDetails.Tracks && albumDetails.Tracks.length >= 1 ? addAndDisplay(albumDetails) : displayDirect(albumDetails)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"bottomview\">\r\n                <div className=\"bottomcontainer\">\r\n                    <div className={ decidePlayOrPause() && !songPaused ? \"playcontainerpause\" : \"playcontainer\" }\r\n                    // style={{backgroundColor: albumDetails.Color || \"\"}}\r\n                    // style={{backgroundColor: \"rgba(127,255,212,0.9)\"}}\r\n                    onClick={() => playButton(albumDetails)}>\r\n                        <img src={ decidePlayOrPause() && !songPaused ? pause : play } alt=\"Play\" />\r\n                    </div>\r\n                    <div className=\"openercontrol\" onClick={handleMenu}>\r\n                        <div className=\"opener1\"></div>\r\n                        <div className=\"opener2\"></div>\r\n                        <div className=\"opener3\"></div>\r\n                    </div>\r\n                    {/* <div className=\"addqueuebutton\" onClick={addAlbumToQueue}>\r\n                        {\r\n                            added ? `Added to queue` : `Add ${albumDetails.Album} to queue`\r\n                        }\r\n                    </div>  */}\r\n                </div>\r\n                <div className=\"table\">\r\n                    <div className=\"innertable\">\r\n                        <div className=\"titlerow\">\r\n                            <div className=\"hash\">#</div>\r\n                            <div className=\"nameofthesong\">TITLE</div>\r\n                            <div className=\"duration\">DURATION</div>\r\n                        </div>\r\n                        {\r\n                            albumDetails.Type === \"Album\" ?\r\n                            albumDetails.Tracks.sort(compare).map((song,i) => {\r\n                                return <SongRow song={song} index={i} type=\"Album\" album={albumDetails} albummainDiv={mainscreen}/>\r\n                            }) : \r\n                            <SongRow song={albumDetails} index={0} type=\"Single\" album={albumDetails}/>\r\n                        }\r\n                    </div>        \r\n                </div>\r\n                <div className=\"copyright1\">\r\n                    <img src={copyright} alt=\"\" />\r\n                    All the songs on Studio are pirated and we are aware of this being illegal.\r\n                </div>\r\n                <div className=\"copyright2\">\r\n                    <img src={copyright} alt=\"\" />\r\n                    We do not own any of the songs. This is just a project. Please do not sue us.\r\n                </div>\r\n                {/* <div className=\"dummy\"></div> */}\r\n                <ShowMoreAlbum moreAlbums={moreAlbums} albumartist={albumDetails.AlbumArtist}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst SongRow = ({ song, index, type, album }) => {\r\n    const artistArr = song.Artist ? song.Artist.split(\", \") : [];\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [albumSong, setAlbumForPlayer] = CustomUseState(albumGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [hidden, setHide] = useState(true);\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [,setResObj] = CustomUseState(responseBar);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    actualIsOpen = openerDetails.open;\r\n    if (!actualIsOpen && isOpen) setIsOpen(false);\r\n\r\n\r\n    const setUpPlayer = (song) => {\r\n        if (!playing) setPlaying(true);\r\n        let newQueue = [];\r\n        if (album.Type === \"Album\") {\r\n            album.Tracks.forEach(each => {\r\n                each.Album = album.Album;\r\n                each.Color = album.Color;\r\n                each.Thumbnail = album.Thumbnail;\r\n            });\r\n            newQueue = album.Tracks;\r\n        }\r\n        if (album.Type === \"Single\") {\r\n            song.Color = album.Color;\r\n            song.Thumbnail = album.Thumbnail;\r\n            newQueue.push(song);\r\n        }\r\n        setQueue(newQueue);\r\n        localStorage.setItem(\"queue\",JSON.stringify(newQueue));\r\n        if (albumSong !== song) setSongPaused(true);\r\n        setAlbumForPlayer(song);\r\n    };\r\n\r\n    const addSongToQueue = () => {\r\n        if (album.Type === \"Album\") {\r\n            song.Album = album.Album;\r\n        }\r\n        song.Color = album.Color;\r\n        song.Thumbnail = album.Thumbnail;\r\n        song.Year = album.Year;\r\n        queue.push(song);\r\n        localStorage.setItem(\"queue\",JSON.stringify(queue));\r\n        setQueue(queue);\r\n        setResObj({ open: true, msg: `Added '${song.Title || song.Album}' to queue` });\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: false\r\n        });\r\n    };\r\n\r\n    const playNextInQueue = () => {\r\n        if (queue.length !== 0) {\r\n            if (album.Type === \"Album\") {\r\n                song.Album = album.Album;\r\n            }\r\n            song.Color = album.Color;\r\n            song.Thumbnail = album.Thumbnail;\r\n            song.Year = album.Year;\r\n            const index = queue.indexOf(albumSong);\r\n            queue.splice(index+1,0,song);\r\n            localStorage.setItem(\"queue\",JSON.stringify(queue));\r\n            setQueue(queue);\r\n            setResObj({ open: true, msg: `Playing '${song.Title || song.Album}' next` });\r\n        }\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: false\r\n        });\r\n    };\r\n\r\n    const isCurrentlyPlaying = () => {\r\n        const titleInSong = song.Title || false;\r\n        const titleInAlbumSong = albumSong.Title || false;\r\n        if (titleInSong && titleInAlbumSong) {\r\n            return song.Title === albumSong.Title;\r\n        } else if (!titleInSong && !titleInAlbumSong) {\r\n            return song.Album === albumSong.Album;\r\n        }\r\n    };\r\n\r\n    const handleSongMenu = (e) => {\r\n        e.stopPropagation();\r\n        setIsOpen(true);\r\n        setOpenerDetails({\r\n            open: !actualIsOpen,\r\n            yValue: e.clientY + 10,\r\n            xValue: e.clientX - 200,\r\n            type: \"song\",\r\n            data: [\r\n                {\r\n                    name: \"Add song to queue\",\r\n                    func: addSongToQueue\r\n                },\r\n                {\r\n                    name: \"Play next\",\r\n                    func: playNextInQueue\r\n                }\r\n            ]\r\n        });\r\n    };\r\n\r\n    const decide = () => {\r\n        if (isOpen && openerDetails.open) {\r\n            return false;\r\n        } else {\r\n            return hidden;\r\n        }\r\n    };\r\n\r\n\r\n    return(\r\n        <div className=\"songrow\" onClick={() => setUpPlayer(song)}\r\n        onMouseOver={() => setHide(false)} onMouseOut={() => setHide(true)}\r\n        style={{ backgroundColor: decide() ? \"transparent\" : \"rgba(255,255,255,0.1)\" }}>\r\n            <div className=\"number\">\r\n                {\r\n                    isCurrentlyPlaying() && !songPaused ?\r\n                    <div className=\"playinganim\">\r\n                        <div className=\"div1\"></div>\r\n                        <div className=\"div2\"></div>\r\n                        <div className=\"div3\"></div>\r\n                        <div className=\"div4\"></div>\r\n                    </div> : index+1\r\n                }\r\n            </div>\r\n            <div className=\"songname\">\r\n                <div className=\"song\" style={{ color: `${ isCurrentlyPlaying() && !songPaused ? \"aquamarine\" : \"white\" }` }}>\r\n                    {\r\n                        type === \"Album\" ? song.Title : song.Album\r\n                    }\r\n                </div>\r\n                <div className=\"artistlist\">\r\n                    {\r\n                        artistArr.map((artist,i) => {\r\n                            return(\r\n                                <>\r\n                                    <p className=\"artistpara\"\r\n                                    onMouseOver={(e) => checkArtist(artist,e,\"artist\")}>{artist}</p>\r\n                                    {\r\n                                        artistArr.length > 1 && i !== artistArr.length-1 ?\r\n                                        <div className=\"artistseparator\"></div> : \"\"\r\n                                    }\r\n                                </>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"songduration\">\r\n                <div className={ decide() ? \"beforesongduration hidden\" : \"beforesongduration\" } onClick={handleSongMenu}>\r\n                    <div className=\"songopenercontrol\">\r\n                        <div className=\"songopener1\"></div>\r\n                        <div className=\"songopener2\"></div>\r\n                        <div className=\"songopener3\"></div>\r\n                    </div>\r\n                </div>\r\n                {song.Duration || \"\"}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst NewSongRow = ({ song, index, album, openerFunc }) => {\r\n    const [hovered, setHovered] = useState(false);\r\n    const [currentSong, setCurrentSong] = CustomUseState(albumGlobal);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    const [resp, setResp] = CustomUseState(responseBar); \r\n\r\n    const isItSame = () => {\r\n        const currType = currentSong.Type === \"Single\";\r\n        const songType = album.Type === \"Single\";\r\n        const currName = currType ? currentSong.Album : currentSong.Title;\r\n        const songName = songType ? album.Album : song.Title;\r\n        return currName === songName;\r\n    };\r\n\r\n    const setUpPlayer = (song) => {\r\n        if (isItSame()) {\r\n            pauseOrPlay();\r\n            return;\r\n        }\r\n        if (!playing) setPlaying(true);\r\n        const newQueue = [];\r\n        let playingSong;\r\n        if (album.Type === \"Album\") {\r\n            album.Tracks.forEach((each,i) => {\r\n                each.id = global.id = i;\r\n                each.Album = album.Album;\r\n                each.Color = album.Color;\r\n                each.Year = album.Year;\r\n                each.Thumbnail = album.Thumbnail;\r\n                if (each.Title === song.Title) {\r\n                    playingSong = song;\r\n                }\r\n                newQueue.push(each);\r\n            });\r\n        }\r\n        if (album.Type === \"Single\") {\r\n            song.id = global.id = 0;\r\n            song.Color = album.Color;\r\n            song.Thumbnail = album.Thumbnail;\r\n            song.Year = album.Year;\r\n            newQueue.push(song);\r\n            playingSong = song;\r\n        }\r\n        setQueue(newQueue);\r\n        localStorage.setItem(\"queue\",JSON.stringify(newQueue));\r\n        if (currentSong !== playingSong) setSongPaused(true);\r\n        setCurrentSong(playingSong);\r\n        setResp({\r\n            ...resp,\r\n            open: true,\r\n            msg: `Playing '${song.Title || song.Album}' now`\r\n        });\r\n    };\r\n\r\n    const playButton = () => {\r\n        // if (isItSame()) {\r\n        //     pauseOrPlay();\r\n        // }\r\n        // if (decidePlayOrPause()) {\r\n        //     pauseOrPlay();\r\n        // } else {\r\n        //     const main = album.Type === \"Album\" ? album.Tracks : [album];\r\n        //     if (!playing) setPlaying(true);\r\n        //     if (album.Type === \"Single\") {\r\n        //         setQueue(main);\r\n        //         setPlayingSong(main[0]);\r\n        //     } else {\r\n        //         main.forEach(song => {\r\n        //             song.Album = album.Album;\r\n        //             song.Thumbnail = album.Thumbnail;\r\n        //             song.Color = album.Color;\r\n        //             song.Year = album.Year;\r\n        //         });\r\n        //         setQueue(main);\r\n        //         setPlayingSong(main[0]);\r\n        //     }\r\n        //     localStorage.setItem(\"queue\",JSON.stringify(main));\r\n        //     setSongPaused(true);\r\n        // }\r\n    };\r\n\r\n    const handleMenu = e => {\r\n        e.stopPropagation();\r\n        const dimensions = { x: e.clientX, y: e.clientY };\r\n        const windowDim = { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight };\r\n        openerFunc(e, { dimensions, windowDim, song });\r\n    };\r\n\r\n    return(\r\n        <div className=\"newsongrow\" onMouseOver={() => setHovered(true)} onMouseOut={() => setHovered(false)}\r\n        style={{ backgroundColor: `${ isItSame() ? \"#202020\" : \"transparent\" }` }}>\r\n            <div className=\"outerindex\">\r\n                <img className={ hovered || isItSame() ? \"outerindeximg\" : \"outerindeximg hidden\" }\r\n                src={ isItSame() && !songPaused ? PauseWhite : PlayWhite} alt=\"\" onClick={() => setUpPlayer(song)}\r\n                title={ isItSame() && !songPaused ? \"Pause\" : \"Play\" } />\r\n                {\r\n                    !hovered && !isItSame() ?\r\n                    <div className=\"index\">{index+1}</div> : \"\"\r\n                }\r\n            </div>\r\n            <div className=\"songnameview\">\r\n                <div>{album.Type === \"Album\" ? song.Title : album.Album}</div>\r\n            </div>\r\n            <div className=\"artistnameview\">\r\n                <div>{album.Type === \"Album\" ? song.Artist : album.Artist}</div>\r\n            </div>\r\n            <div className=\"streams\"></div>\r\n            <div className=\"durationview\">\r\n                <div className=\"opener-container\">\r\n                    <div className={ hovered ? \"openercontrol\" : \"openercontrol hidden\" } style={{marginLeft: \"0px\"}}\r\n                    onClick={handleMenu}\r\n                    title=\"More Options\">\r\n                        <div className=\"opener1\"></div>\r\n                        <div className=\"opener2\"></div>\r\n                        <div className=\"opener3\"></div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"durationcontainer\">\r\n                    <div>{album.Type === \"Album\" ? song.Duration : album.Duration}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst NewActualAlbumView = () => {\r\n    const params = useParams();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [album, setAlbum] = useState({});\r\n    const [playingSong, setPlayingSong] = CustomUseState(albumGlobal);\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    // const [routes, setRoutes] = CustomUseState(routesGlobal);\r\n    const [,setResObj] = CustomUseState(responseBar);\r\n    // const [redirectValue, setRedirectValue] = useState({ status: false, to: \"\" });\r\n    const topDiv = useRef(null);\r\n    const hist = useHistory();\r\n    const currentLocation = useLocation();\r\n    const list = [\"tileopener\",\"tileopener1\",\"tileopener2\",\"tileopener3\"];\r\n    isOpen = openerDetails.open;\r\n\r\n\r\n    const decidePlayOrPause = () => {\r\n        let sameAlbum = false;\r\n        const titleInSong = playingSong.Title || false;\r\n        if (!titleInSong && album.Type === \"Album\") {\r\n            return false;\r\n        }\r\n        if (!titleInSong && album.Type === \"Single\") {\r\n            return playingSong.Album === album.Album;\r\n        }\r\n        album.Tracks && album.Tracks.every(song => {\r\n            if (song.Title === titleInSong) {\r\n                sameAlbum = true;\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return sameAlbum;\r\n    };\r\n\r\n    const addAlbumToQueue = () => {\r\n        const main = album.Type === \"Album\" ? [ ...album.Tracks ] : { ...album };\r\n        const mainQueue = [ ...queue ];\r\n        const len = mainQueue.length;\r\n        if (len === 0) return;\r\n        if (album.Type === \"Single\") {\r\n            main.id = ++global.id;\r\n            mainQueue.push(main);\r\n            localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n            setQueue(mainQueue);\r\n            setResObj({ open: true, msg: `Added single to queue` });\r\n        } else {\r\n            main.forEach(song => {\r\n                song.id = ++global.id;\r\n                song.Album = album.Album;\r\n                song.Color = album.Color;\r\n                song.Thumbnail = album.Thumbnail;\r\n                song.Year = album.Year;\r\n                mainQueue.push(song);\r\n            });\r\n            localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n            setQueue(mainQueue);\r\n            setResObj({ open: true, msg: `Added album to queue` });\r\n        }\r\n    };\r\n\r\n    const playAlbumNext = () => {\r\n        const len = queue.length;\r\n        if (len !== 0) {\r\n            const index = queue.indexOf(playingSong);\r\n            const mainQueue = [ ...queue ];\r\n            if (album.Type === \"Single\") {\r\n                album.id = ++global.id;\r\n                mainQueue.splice(index+1, 0, { ...album });\r\n            } else {\r\n                album.Tracks.forEach((song,i) => {\r\n                    song.id = ++global.id;\r\n                    song.Album = album.Album;\r\n                    song.Color = album.Color;\r\n                    song.Thumbnail = album.Thumbnail;\r\n                    song.Year = album.Year;\r\n                    mainQueue.splice(index+1+i, 0, { ...song });\r\n                });\r\n            }\r\n            localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n            setQueue(mainQueue);\r\n            setResObj({ open: true, msg: `Playing ${album.Album} next` });\r\n        }\r\n    };\r\n\r\n    const goBack = () => {\r\n        hist.goBack();\r\n        // if (routes.length > 1) {\r\n        //     routes.splice(routes.length-1,1);\r\n        //     setRoutes(routes);\r\n        // }\r\n        // setRedirectValue({ status: true, to: routes[routes.length - 1] });\r\n    };\r\n\r\n    const playButton = () => {\r\n        if (decidePlayOrPause()) {\r\n            pauseOrPlay();\r\n        } else {\r\n            const main = album.Type === \"Album\" ? [ ...album.Tracks ] : { ...album };\r\n            if (!playing) setPlaying(true);\r\n            if (album.Type === \"Single\") {\r\n                main.id = 0;\r\n                global.id = 0;\r\n                setQueue([main]);\r\n                setPlayingSong(main);\r\n            } else {\r\n                main.forEach((song,i) => {\r\n                    song.id = global.id = i;\r\n                    song.Album = album.Album;\r\n                    song.Thumbnail = album.Thumbnail;\r\n                    song.Color = album.Color;\r\n                    song.Year = album.Year;\r\n                });\r\n                setQueue(main);\r\n                setPlayingSong(main[0]);\r\n            }\r\n            localStorage.setItem(\"queue\",JSON.stringify(main));\r\n            setSongPaused(true);\r\n        }\r\n    };\r\n\r\n    const call = async () => {\r\n        const res = await sendRequest({\r\n            method: \"POST\",\r\n            endpoint: `/getAlbumDetails`,\r\n            data: {\r\n                album: params.name\r\n            }\r\n        });\r\n        if (res) {\r\n            setAlbum(res.album);\r\n            // setMoreAlbums(res.moreAlbums);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const addAndDisplay = () => {\r\n        let min = 0, sec = 0;\r\n        if (album.Type === \"Album\") {\r\n            album.Tracks.forEach(track => {\r\n                const dur = track.Duration.split(\": \");\r\n                min += parseInt(dur[0]);\r\n                sec += parseInt(dur[1]);\r\n            });\r\n            min += Math.floor(sec/60);\r\n            sec = sec%60;\r\n        } else {\r\n            const div = album.Duration.split(\": \");\r\n            min = parseFloat(div[0]);\r\n            sec = parseFloat(div[1]);\r\n        }\r\n        return `${min} minutes${ sec !== 0 ? ` ${sec} seconds` : `` }`;\r\n    };\r\n\r\n    const handleMenu = e => {\r\n        e.stopPropagation();\r\n        const dimensions = { x: e.clientX, y: e.clientY };\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: true,\r\n            xValue: dimensions.x + 5,\r\n            yValue: dimensions.y + 5,\r\n            data: [\r\n                {\r\n                    name: `Play next in queue`,\r\n                    func: playAlbumNext\r\n                }\r\n            ]\r\n        });\r\n    };\r\n\r\n    const addTrackToQueue = each => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        const dummy = [ ...queue ];\r\n        const len = dummy.length;\r\n        if (len === 0) return;\r\n        if (album.Type === \"Album\") {\r\n            each.Album = album.Album;\r\n            each.Color = album.Color;\r\n            each.Thumbnail = album.Thumbnail;\r\n            each.Year = album.Year;\r\n        }\r\n        dummy[len] = { ...each, id: ++global.id };\r\n        setQueue(dummy);\r\n        setResObj({ open: true, msg: `Added ${each.Title || each.Album} to queue` });\r\n    };\r\n\r\n    const playTrackNext = each => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        if (queue.length === 0) return;\r\n        const curIndex = queue.indexOf(playingSong);\r\n        const dummy = [ ...queue ];\r\n        if (album.Type === \"Album\") {\r\n            each.Album = album.Album;\r\n            each.Color = album.Color;\r\n            each.Thumbnail = album.Thumbnail;\r\n            each.Year = album.Year;\r\n        }\r\n        dummy.splice(curIndex+1, 0, { ...each, id: ++global.id });\r\n        setQueue(dummy);\r\n        setResObj({ open: true, msg: `Playing ${each.Title || each.Album} next` });\r\n    };\r\n\r\n    const handleEachMenu = (e, { dimensions, windowDim, song: selectedSong }) => {\r\n        e.stopPropagation();\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: true,\r\n            xValue: checkX(dimensions.x, windowDim.width),\r\n            yValue: checkY(dimensions.y, windowDim.height, 2),\r\n            data: [\r\n                {\r\n                    name: \"Add track to queue\",\r\n                    func: () => addTrackToQueue(selectedSong)\r\n                },\r\n                {\r\n                    name: \"Play track next\",\r\n                    func: () => playTrackNext(selectedSong)\r\n                }\r\n            ]\r\n        });\r\n    };\r\n\r\n    const documentClick = e => {\r\n        if (!list.includes(e.target.className) && isOpen) {\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const documentScroll = e => {\r\n        if (isOpen) {\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n    }, [currentLocation.pathname]);\r\n\r\n    useEffect(() => {\r\n        if (isLoading) {\r\n            call();\r\n        }\r\n        topDiv.current = document.querySelector(\".newalbum\");\r\n        // document.addEventListener(\"click\", documentClick);\r\n        // topDiv.current && topDiv.current.addEventListener(\"scroll\", documentScroll);\r\n        return () => {\r\n            // document.removeEventListener(\"click\", documentClick);\r\n            // topDiv.current && topDiv.current.removeEventListener(\"scroll\", documentScroll);\r\n        };\r\n    }, [isLoading]);\r\n\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>;\r\n    }\r\n    return (\r\n        <div className=\"newalbum\">\r\n            <div className=\"topalbumview\">\r\n                {/* <div className=\"backbuttoncontainer\">\r\n                    <div className=\"backbuttonview\" onClick={goBack}>\r\n                        <img src={BackButton} alt=\"\" />\r\n                    </div>\r\n                </div> */}\r\n                <div className=\"coverview\">\r\n                    <img src={album.Thumbnail} alt=\"\" />\r\n                </div>\r\n                <div className=\"detailsview\">\r\n                    <div className=\"innerdetailsview\">\r\n                        <div className=\"albumnameview\">{album.Album}</div>\r\n                        <div style={{width: \"100%\", height: \"10px\"}}></div>\r\n                        <div className=\"detailsoneview\">\r\n                            <div className=\"albumtype\">{album.Type}</div>\r\n                            <div className=\"content-separator\"><div></div></div>\r\n                            {\r\n                                album.AlbumArtist.split(\", \").length > 1 ? \r\n                                album.AlbumArtist.split(\", \").map((each,i) => {\r\n                                    return (\r\n                                        <>\r\n                                            <div className=\"albumartistview\">{each}</div>\r\n                                            {\r\n                                                i !== album.AlbumArtist.split(\", \").length-1 ?\r\n                                                <div className=\"content-separator\"><div></div></div> : \"\"\r\n                                            }\r\n                                        </>\r\n                                    );\r\n                                }) :\r\n                                <div className=\"albumartistview\">{album.AlbumArtist}</div>\r\n                            }\r\n                            <div className=\"content-separator\"><div></div></div>\r\n                            <div className=\"albumyear\">{album.Year}</div>\r\n                        </div>\r\n                        <div className=\"detailsoneview\">\r\n                            <div className=\"albumtype\">\r\n                                { album.Type === \"Single\" ? \"1 Song\" : album.Tracks.length > 1 ? `${album.Tracks.length} songs` : \"1 song\" }\r\n                            </div>\r\n                            <div className=\"content-separator\"><div></div></div>\r\n                            <div className=\"albumtype\">{addAndDisplay()}</div>\r\n                        </div>\r\n                        <div style={{width: \"100%\", height: \"30px\"}}></div>\r\n                        <div className=\"buttonholder\">\r\n                            <Button className=\"playbuttonview\" onClick={playButton}>\r\n                                {\r\n                                    decidePlayOrPause() && !songPaused ?\r\n                                    <><img src={Pause} alt=\"\" /><p>PAUSE</p></> :\r\n                                    <><img src={Play} alt=\"\" /><p>PLAY</p></>\r\n                                }\r\n                            </Button>\r\n                            <Button className=\"addtoqueue\" onClick={addAlbumToQueue}>\r\n                                <img src={AddButton} alt=\"\" />\r\n                                ADD TO QUEUE\r\n                            </Button>\r\n                            <div className=\"opener-holder\">\r\n                                <div className=\"tileopener\" title=\"More Options\" onClick={handleMenu}>\r\n                                    <div className=\"tileopener1\"></div>\r\n                                    <div className=\"tileopener2\"></div>\r\n                                    <div className=\"tileopener3\"></div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div style={{width: \"100%\", height: \"50px\"}}></div>\r\n            <div className=\"bottomalbumview\">\r\n                {\r\n                    album.Type === \"Single\" ?\r\n                    <NewSongRow song={album} index={0} album={album} openerFunc={handleEachMenu} /> :\r\n                    album.Tracks.map((each,i) => {\r\n                        return <NewSongRow song={each} index={i} album={album} openerFunc={handleEachMenu} />\r\n                    })\r\n                }\r\n            </div>\r\n            <div style={{width: \"100%\", height: \"20px\"}}></div>\r\n            <div className=\"copyright1\">\r\n                <img src={copyright} alt=\"\" />\r\n                {`All the songs on Studio Music ${String.fromCharCode(8482)} are pirated and we are aware of this being illegal.`}\r\n            </div>\r\n            <div className=\"copyright2\">\r\n                <img src={copyright} alt=\"\" />\r\n                We do not own any of the songs. This is just a project. Please do not sue us.\r\n            </div>\r\n            { playing ? <div style={{width: \"100%\", height: \"100px\"}}></div> : null }\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst AlbumView = (props) => {\r\n    // const [queueOpened,] = CustomUseState(queueOpenedGlobal);\r\n\r\n    // if (queueOpened) {\r\n    //     return <Queue/>\r\n    // }\r\n    return <NewActualAlbumView/>\r\n};\r\n\r\n\r\nexport default AlbumView;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Library.js",["146","147","148","149","150","151","152","153","154","155","156","157","158"],"// import \"../../../css/library.css\";\r\nimport \"../../../css/teststyles.css\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport { pauseOrPlay } from \"../../../homepage\";\r\nimport { HorizontalList } from \"./HomeScreen\";\r\nimport Play from \"../../../assets/playbutton-white.svg\";\r\nimport Pause from \"../../../assets/pausebutton-white.svg\";\r\nimport {\r\n    wait,\r\n    queueOpenedGlobal,\r\n    CustomUseState,\r\n    sendRequest,\r\n    topBarGlobal,\r\n    topBgColorGlobal,\r\n    modifyLibrary,\r\n    routesGlobal,\r\n    albumGlobal,\r\n    songIsPausedGlobal,\r\n    playingGlobal,\r\n    queueGlobal,\r\n    openerGlobal,\r\n    checkX,\r\n    checkY,\r\n    responseBar,\r\n    prefix,\r\n    global\r\n} from \"../../../common\";\r\nimport Queue from \"./Queue\";\r\nimport Button from \"../../../Button\";\r\nlet topBar, isOpen = null;\r\n\r\n\r\nconst ActualLibrary = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [library, setLibrary] = useState({});\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [topBgColor, setBgColor] = CustomUseState(topBgColorGlobal);\r\n    topBar = topBarConfig;\r\n    // let scrolled = false;\r\n\r\n    const scrollHandler = (e) => {\r\n        const top = e.currentTarget.scrollTop;\r\n        sessionStorage.setItem(\"library-scroll\",top);\r\n        if (top > 200 && topBar.bgColor === \"transparent\") {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: false,\r\n                bgColor: topBgColor\r\n            });\r\n        } else if (top < 200 && topBar.bgColor !== \"transparent\") {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: false,\r\n                bgColor: \"transparent\"\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const call = async () => {\r\n            const saved = JSON.parse(sessionStorage.getItem(\"library\"));\r\n            if (saved !== null) {\r\n                setLibrary(saved);\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            const res = await sendRequest({\r\n                method: \"GET\",\r\n                endpoint: `/getLibrary`\r\n            });\r\n            await wait(500);\r\n            sessionStorage.setItem(\"library\",JSON.stringify(res));\r\n            setLibrary(res);\r\n            setIsLoading(false);\r\n        };\r\n        if (isLoading) {\r\n            call();\r\n        } else {\r\n            const main = document.querySelector(\".main\");\r\n            main.scrollTop = sessionStorage.getItem(\"library-scroll\") || 0;\r\n        }\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            button: false,\r\n            // bgColor: \"transparent\"\r\n        });\r\n        // return () => {\r\n        //     setTopBarConfig({\r\n        //         ...topBar,\r\n        //         button: false,\r\n        //         bgColor: \"transparent\"\r\n        //     }); \r\n        // };\r\n    },[isLoading]);\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"library\">\r\n            <div className=\"main\" onScroll={scrollHandler}>\r\n                <div className=\"librarytop\"\r\n                style={{ backgroundColor: `${topBgColor}` }}\r\n                >\r\n                    <div className=\"innerlibrarytop\">\r\n                        <div className=\"forblur\"></div>\r\n                        <div className=\"bigtitle\">Library</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"librarybottom\">\r\n                    <div className=\"outline\">\r\n                        {/* <div className=\"bigmaintitle\">\r\n                            <p>Library</p>\r\n                        </div> */}\r\n                        {   \r\n                            Object.keys(library).map(key => {\r\n                                if (library[key].length !== 0) {\r\n                                    return(\r\n                                        <div className=\"list\">\r\n                                            <HorizontalList list={library[key]}/>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst EachAlbum = ({ each, openerFunc }) => {\r\n    const [song, setAlbumForPlayer] = CustomUseState(albumGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal); \r\n    let songPausedLocal = songPaused;\r\n    const [element, setElement] = useState(null);\r\n    const [show, setShow] = useState(true);\r\n    const hist = useHistory();\r\n\r\n    const observer = useRef(new IntersectionObserver(([entry]) => {\r\n        const { isIntersecting } = entry;\r\n        setShow(isIntersecting);\r\n    }, { threshold: 0.1 }));\r\n\r\n\r\n    useEffect(() => {\r\n        const currentElement = element;\r\n        const currentObserver = observer.current;\r\n        if (currentElement) {\r\n            currentObserver.observe(currentElement);\r\n        }\r\n\r\n        return () => {\r\n            if (currentElement) {\r\n                currentObserver.unobserve(currentElement);\r\n            }\r\n        };\r\n    }, [element]);\r\n\r\n    const display = () => {\r\n        // routes.push(`/home/album/${each.Album}`);\r\n        // window.history.pushState({},\"\",`/home/album/${each.Album}`);\r\n        // setRoutes(routes);\r\n        setTimeout(() => {\r\n            hist.push(`${prefix}/home/album/${each.Album}`);\r\n        },500);\r\n        // setRedirectTo(`${each.Album}`);\r\n    };\r\n\r\n    const handleMenu = e => {\r\n        e.stopPropagation();\r\n        const dimensions = { x: e.clientX, y: e.clientY };\r\n        const windowDim = { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight };\r\n        openerFunc(e, { dimensions, windowDim, each });\r\n    };\r\n\r\n    const handlePlayPause = (e) => {\r\n        e.stopPropagation();\r\n        if (song.Album === each.Album) {\r\n            pauseOrPlay();\r\n            return;\r\n        }\r\n        const main = each.Type === \"Album\" ? each.Tracks : each;\r\n        if (!playing) setPlaying(true);\r\n        if (each.Type === \"Single\") {\r\n            main.id = global.id = 0;\r\n            setQueue([main]);\r\n            setAlbumForPlayer(main);\r\n        } else {\r\n            const dummy = [ ...main ];\r\n            dummy.forEach((song,i) => {\r\n                song.id = global.id = i;\r\n                song.Album = each.Album;\r\n                song.Thumbnail = each.Thumbnail;\r\n                song.Color = each.Color;\r\n                song.Year = each.Year;\r\n            });\r\n            setQueue(dummy);\r\n            setAlbumForPlayer(dummy[0]);\r\n        }\r\n        localStorage.setItem(\"queue\",JSON.stringify(main));\r\n        setSongPaused(true);\r\n    };\r\n\r\n    \r\n    return(\r\n        <div className=\"eachinrow\" ref={setElement}>\r\n            { show ?\r\n                <div className=\"innerineach\">\r\n                    <Button className=\"eachartcover\" onClick={display} title={each.Album}>\r\n                        <div className=\"eachshadow\"></div>\r\n                        <div className={ (song.Album === each.Album) ? \"showplaybuttonfixed\" : \"showplaybutton\" }>\r\n                            <Button className=\"innerplaybutton\" onClick={handlePlayPause}\r\n                            title={ (!songPausedLocal && song.Album === each.Album) ? \"Pause\" : \"Play\" } >\r\n                                <img src={ (!songPausedLocal && song.Album === each.Album) ? Pause : Play } alt=\"\" />\r\n                            </Button>\r\n                        </div>\r\n                        <div className=\"library-opener\" onClick={handleMenu} title=\"More Options\">\r\n                            <div className=\"library-opener1\"></div>\r\n                            <div className=\"library-opener2\"></div>\r\n                            <div className=\"library-opener3\"></div>\r\n                        </div>\r\n                        <img src={each.Thumbnail} alt=\"\" className=\"eachalbumart\" />\r\n                    </Button>\r\n                    <div className=\"eachalbumname\" onClick={display}>{each.Album}</div>\r\n                    <span className=\"eachbottom\">\r\n                        <span>{each.AlbumArtist}</span>\r\n                    </span>\r\n                </div> :\r\n                null\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CreateRow = ({ row, openerFunc }) => {\r\n    return(\r\n        <div className=\"createrow\">\r\n            {\r\n                row.map((each,i) => {\r\n                    // if (i<6) {\r\n                        if (Object.keys(each).length > 0) {\r\n                            return <EachAlbum each={each} openerFunc={openerFunc} />\r\n                        }\r\n                        return <div className=\"eachinrow\"></div>\r\n                    // }\r\n                    // return \"\";\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst CreateAnotherRow = ({ row }) => {\r\n    return(\r\n        <div className=\"createanotherrow\">\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nconst NewActualLibrary = () => {\r\n    const [library, setLibrary] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [playingSong,] = CustomUseState(albumGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    const [, setResObj] = CustomUseState(responseBar);\r\n    const topDiv = useRef(null);\r\n    isOpen = openerDetails.open;\r\n    const list = [\"libraryopener\",\"libraryopener1\",\"libraryopener2\",\"libraryopener3\"];\r\n\r\n\r\n    const addAlbumToQueue = each => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        const main = each.Type === \"Album\" ? each.Tracks : each;\r\n        if (queue.length === 0) return;\r\n        const index = queue.indexOf(playingSong);\r\n        if (index === -1) return;\r\n\r\n        const mainQueue = [ ...queue ];\r\n        if (each.Type === \"Single\") {\r\n            mainQueue.push({ ...main, id: ++global.id });\r\n            localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n            setQueue(mainQueue);\r\n            setResObj({ open: true, msg: `Added single to queue` });\r\n        } else {\r\n            main.forEach(song => {\r\n                song.id = ++global.id;\r\n                song.Album = each.Album;\r\n                song.Color = each.Color;\r\n                song.Thumbnail = each.Thumbnail;\r\n                song.Year = each.Year;\r\n                mainQueue.push({ ...song });\r\n            });\r\n            localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n            setQueue(mainQueue);\r\n            setResObj({ open: true, msg: `Added album to queue` });\r\n        }\r\n    };\r\n\r\n    const playAlbumNext = each => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        if (queue.length !== 0) {\r\n            const index = queue.indexOf(playingSong);\r\n            const mainQueue = [ ...queue ];\r\n            if (each.Type === \"Single\") {\r\n                mainQueue.splice(index+1,0,{ ...each, id: ++global.id });\r\n            } else {\r\n                each.Tracks.forEach((song,i) => {\r\n                    song.id = ++global.id;\r\n                    song.Album = each.Album;\r\n                    song.Color = each.Color;\r\n                    song.Thumbnail = each.Thumbnail;\r\n                    song.Year = each.Year;\r\n                    mainQueue.splice(index+1+i,0,{ ...song });\r\n                });\r\n            }\r\n            localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n            setQueue(mainQueue);\r\n            setResObj({ open: true, msg: `Playing ${each.Album} next` });\r\n        }\r\n    };\r\n\r\n    const handleMenu = (e, { dimensions, windowDim, each: album }) => {\r\n        e.stopPropagation();\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: true,\r\n            xValue: checkX(dimensions.x, windowDim.width),\r\n            yValue: checkY(dimensions.y, windowDim.height, 3),\r\n            data: [\r\n                {\r\n                    name: \"Add to queue\",\r\n                    func: () => addAlbumToQueue(album)\r\n                },\r\n                {\r\n                    name: \"Play next\",\r\n                    func: () => playAlbumNext(album)\r\n                },\r\n                {\r\n                    name: \"Start radio\",\r\n                    func: ()=>{}\r\n                }\r\n            ]\r\n        });\r\n    };\r\n\r\n    const documentClick = e => {\r\n        if (!list.includes(e.target.className)) {\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const documentScroll = e => {\r\n        if (isOpen) {\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const call = async () => {\r\n            const saved = JSON.parse(sessionStorage.getItem(\"library\"));\r\n            // const saved = null;\r\n            if (saved !== null) {\r\n                setLibrary(saved);\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            // await wait(1000);\r\n            const res = await sendRequest({\r\n                method: \"GET\",\r\n                endpoint: `/getLibrary`\r\n            });\r\n            if (res) {\r\n                sessionStorage.setItem(\"library\",JSON.stringify(res));\r\n                setLibrary(res);\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        if (isLoading) {\r\n            call();\r\n        }\r\n        topDiv.current = document.querySelector(\".dummymid\");\r\n        // topDiv.current && topDiv.current.addEventListener(\"scroll\", documentScroll);\r\n        // document.addEventListener(\"click\", documentClick);\r\n        return () => {\r\n            // topDiv.current && topDiv.current.removeEventListener(\"scroll\", documentScroll);\r\n            // document.removeEventListener(\"click\", documentClick);\r\n        };\r\n    }, [isLoading]);\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        // <div className=\"dummymid\" style={{ overflowY: `${ isOpen ? \"hidden\" : \"overlay\" }` }}>\r\n            <div className=\"dummymid\">\r\n                <div className=\"libraryname\">Library</div>\r\n                <div className=\"librarycontainer\">\r\n                    <div className=\"librarygrid\">\r\n                        {\r\n                            library.map(item => {\r\n                                return <EachAlbum each={item} openerFunc={handleMenu} />\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        // </div>\r\n    );\r\n};\r\n\r\nconst Library = () => {\r\n    // const [queueOpened,] = CustomUseState(queueOpenedGlobal);\r\n    \r\n    // if (queueOpened) {\r\n    //     return <Queue/>\r\n    // }\r\n    return <NewActualLibrary/>\r\n};\r\n\r\n\r\nexport default Library;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Queue.js",["159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Radio.js",["180","181","182","183"],"import { useState, useEffect } from \"react\";\r\nimport \"../../../css/radiostyles.css\";\r\nimport {\r\n    CustomUseState,\r\n    radioGlobal,\r\n    playingGlobal,\r\n    queueGlobal,\r\n    albumGlobal,\r\n    queueOpenedGlobal,\r\n    // topBarGlobal,\r\n    sendRequest\r\n} from \"../../../common\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport Queue from \"./Queue\";\r\n\r\n\r\nconst ActualRadio = () => {\r\n    const [isRadioOn,] = CustomUseState(radioGlobal);\r\n    // const [song, setSong] = CustomUseState(albumGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    // const [, setPlaying] = CustomUseState(playingGlobal);\r\n    // const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const decide = (color) => {\r\n        color = color.split(\",\");\r\n        color[3] = \"0.5)\";\r\n        color = color.join(\",\");\r\n        return color;\r\n    };\r\n\r\n    const call = async () => {\r\n        const res = await sendRequest({\r\n            method: \"GET\",\r\n            endpoint: `/shuffle`\r\n        });\r\n        setQueue(res);\r\n        setIsLoading(false);\r\n        // setPlaying(true);\r\n        // setSong(res.data[0]);\r\n        // setRadioOn(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isRadioOn) {\r\n            call();\r\n        } else {\r\n            setIsLoading(false);\r\n        }\r\n        // setTopBarConfig({\r\n        //     buttonFunc: () => {},\r\n        //     title: \"\",\r\n        //     bgColor: \"transparent\",\r\n        //     button: false\r\n        // });\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"radio\"\r\n        // style={{ backgroundColor: `${decide(queue[1].Color)}` }}\r\n        >\r\n            <div className=\"topdiv\">\r\n                <div className=\"firstalbum\">\r\n                    <img src={queue[0].Thumbnail} alt=\"\"/>\r\n                </div>\r\n                <div className=\"mainalbum\">\r\n                    <img src={queue[1].Thumbnail} alt=\"\"/>\r\n                </div>\r\n                <div className=\"secondalbum\">\r\n                    <img src={queue[2].Thumbnail} alt=\"\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Radio = () => {\r\n    const [queueOpened,] = CustomUseState(queueOpenedGlobal);\r\n\r\n    if (queueOpened) {\r\n        return <Queue/>\r\n    }\r\n    return <ActualRadio/>\r\n};\r\n\r\n\r\nexport default Radio;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Search.js",["184","185","186","187","188","189","190","191","192","193","194","195"],"import { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../../../css/searchstyles.css\";\r\nimport \"../../../css/homestyles.css\";\r\nimport \"../../../css/hometeststyles.css\";\r\nimport SearchIcon from \"../../../assets/searchicon.svg\";\r\nimport Close from \"../../../assets/blackclose.png\";\r\nimport Play from \"../../../assets/playbutton-white.svg\";\r\nimport Pause from \"../../../assets/pausebutton-white.svg\";\r\nimport {\r\n    sendRequest,\r\n    queueOpenedGlobal,\r\n    CustomUseState,\r\n    searchBarGlobal,\r\n    searchInputGlobal,\r\n    topBarGlobal,\r\n    topBgColorGlobal,\r\n    albumGlobal,\r\n    songIsPausedGlobal,\r\n    openerGlobal,\r\n    checkX,\r\n    checkY,\r\n    prefix,\r\n    playingGlobal,\r\n    queueGlobal,\r\n    responseBar,\r\n    global\r\n} from \"../../../common\";\r\nimport Queue from \"./Queue\";\r\nimport Button from \"../../../Button\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport { HorizontalList } from \"./HomeScreen\";\r\nimport { pauseOrPlay } from \"../../index\";\r\nlet timeout = undefined, searchBar, topBar, topBgColorLocal, setcolor = false;\r\n\r\n\r\n\r\nconst InnerSongList = ({ obj }) => {\r\n    const [hidden, setHidden] = useState(true);\r\n\r\n    const decide = () => {\r\n        if (hidden) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return(\r\n        <div className=\"leftlist\" onMouseOver={() => setHidden(false)} onMouseOut={() => setHidden(true)}\r\n        style={{ backgroundColor: decide() ? \"#181818\" : \"rgba(255,255,255,0.1)\" }}>\r\n            <div className=\"leftalbumart\">\r\n                {/* <div className=\"innerleftalbumart\"> */}\r\n                    <img src={obj.Thumbnail} alt=\"\" />\r\n                {/* </div> */}\r\n            </div>\r\n            <div className=\"names\">\r\n                <div className=\"songtitlename\">{obj.Title || obj.Album}</div>\r\n                <div className=\"songartist\">{obj.Artist}</div>\r\n            </div>\r\n            <div className={ decide() ? \"songplay hidden\" : \"songplay\" }>\r\n                <div className=\"innersongplay\">\r\n                    <img src={Play} alt=\"\" className=\"img\"/>\r\n                </div>\r\n            </div>\r\n            <div className={ decide() ? \"beforesongresult hidden\" : \"beforesongresult\" }>\r\n                <div className=\"customopener\">\r\n                    <div className=\"opener1\"></div>\r\n                    <div className=\"opener2\"></div>\r\n                    <div className=\"opener3\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SongList = ({ list }) => {\r\n    return(\r\n        <div className=\"songlist\">\r\n            {\r\n                list.map(each => {\r\n                    return <InnerSongList obj={each} />;\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Each = ({ each }) => {\r\n    const [hover, setHover] = useState(false);\r\n    // let hoverLocal = hover;\r\n\r\n    const lessen = (value) => {\r\n        let colors = each.Color.split(\",\");\r\n        colors[3] = `${value})`;\r\n        colors = colors.join(\",\");\r\n        return colors;\r\n    };\r\n\r\n    return(\r\n        <div className=\"eachitem\">\r\n            <div className=\"songitem\"\r\n            // style={{ backgroundColor: `${ hover ? lessen(0.1) : lessen(0.7) }` }}\r\n            // style={{ backgroundImage: `url(${each.Thumbnail})`, backgroundSize: \"cover\" }}\r\n            onMouseOver={() => setHover(true)}\r\n            onMouseOut={() => setHover(false)}\r\n            >\r\n                <div className=\"innersongitem\"\r\n                style={{ backgroundImage: `url(${each.Thumbnail})`, backgroundSize: \"cover\" }}\r\n                >\r\n                    <div className=\"fullscreen\"\r\n                    style={{ backgroundColor: `${ hover ? \"rgba(0,0,0,0.4)\" : \"rgba(0,0,0,0.7)\" }` }}>\r\n                        <div className=\"actualcontents\">\r\n                            {/* <img src={each.Thumbnail} className=\"itemart\" alt=\"\" /> */}\r\n                            <div className=\"itemalbum\">{each.Album}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst RecommendedRow = ({ row }) => {\r\n    return(\r\n        <div className=\"recommendedrow\">\r\n            {\r\n                row.map(each => {\r\n                    return(\r\n                        <Each each={each} />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ActualSearch = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [searchConfig, setSearchConfig] = CustomUseState(searchBarGlobal);\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [topBgColor, setTopBgColor] = CustomUseState(topBgColorGlobal);\r\n    const [recents, setRecents] = useState([]);\r\n    const [recommended, setRecommended] = useState({});\r\n    searchBar = searchConfig;\r\n    topBar = topBarConfig;\r\n    topBgColorLocal = topBgColor;\r\n    let { result, input, callLoading } = searchBar;\r\n\r\n    const recentSearches = async () => {\r\n        const res = await sendRequest({\r\n            method: \"GET\",\r\n            endpoint: \"/getRecentSearch\"\r\n        });\r\n        setIsLoading(false);\r\n        setRecents(res.recents);\r\n        setRecommended(res.recommended);\r\n        // setTopBarConfig({\r\n        //     ...topBar,\r\n        //     // bgColor: \"#121212\"\r\n        //     bgColor: topBgColor\r\n        // });\r\n    };\r\n\r\n    const closeFunc = async (item) => {\r\n        // console.log(\"item\",item);\r\n        const res = await sendRequest({\r\n            method: \"POST\",\r\n            endpoint: \"/removeFromRecents\",\r\n            data: {\r\n                item\r\n            }\r\n        });\r\n        console.log(\"res\",res);\r\n    };\r\n\r\n    const scrollHandler = (e) => {\r\n        const top = e.currentTarget.scrollTop;\r\n        if (top > 100 && !setcolor) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                bgColor: topBgColorLocal\r\n            });\r\n            setcolor = true;\r\n        }\r\n        if (top < 100 && setcolor) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                // bgColor: \"#121212\"\r\n                bgColor: \"transparent\"\r\n            });\r\n            setcolor = false;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSearchConfig({\r\n            ...searchBar,\r\n            show: true,\r\n            // input: \"\",\r\n            result: {}\r\n        });\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            // bgColor: \"#121212\"\r\n            bgColor: \"transparent\"\r\n        });\r\n        recentSearches();\r\n        return () => {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                input: \"\",\r\n                show: false,\r\n                callLoading: false\r\n            });\r\n\r\n        }\r\n    },[]);\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"searchmain\" onScroll={scrollHandler}>\r\n            <div className=\"librarytop\"\r\n            style={{ backgroundColor: topBgColor }}\r\n            >\r\n                <div className=\"innerlibrarytop\">\r\n                    <div className=\"forblur\"></div>\r\n                    <div className=\"bigtitle\">Search</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"noncolour\">\r\n            {\r\n                callLoading ? <MidPanelLoader/> : \"\"\r\n            }\r\n            {\r\n                recents.length !== 0 && !callLoading && input === \"\" ?\r\n                <>\r\n                    <div style={{ width: \"100%\", height: \"10px\" }}/>\r\n                    <div className=\"outline\">\r\n                        <div className=\"maintitle\">\r\n                            <p>Recent Searches</p>\r\n                            <div className=\"viewmore\">\r\n                                <p>Clear All</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"list\">\r\n                            <HorizontalList list={recents} addCloseButton={true} closeFunc={closeFunc}/>\r\n                        </div>\r\n                    </div>\r\n                </> : \"\"\r\n            }\r\n            {\r\n                Object.keys(recommended).length !== 0 && !callLoading && input === \"\" ?\r\n                <div className=\"outline\">\r\n                    <div className=\"maintitle\">\r\n                        <p>Recommended</p>\r\n                    </div>\r\n                    <div style={{ width: \"100%\", height: \"0px\" }}></div>\r\n                    {/* {\r\n                        Object.keys(recommended).map(row => {\r\n                            return(\r\n                                <RecommendedRow row={recommended[row]} />\r\n                            );\r\n                        })\r\n                    } */}\r\n                    {\r\n                        Object.keys(recommended).map(each => {\r\n                            return(\r\n                                <div className=\"list\">\r\n                                    <HorizontalList list={recommended[each]} />\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </div> : \"\"\r\n            }\r\n            {\r\n                result.noResults && !callLoading && input !== \"\" ?\r\n                <div className=\"noresults\">No results found for \"{input}\"</div> : \"\"\r\n            }\r\n            {   \r\n                Object.keys(result).length > 1 && input !== \"\" ?\r\n                <div className=\"smain\">\r\n                    <div className=\"outline\">\r\n                        {\r\n                            Object.keys(result.songs).length !== 0 ?\r\n                            <div className=\"maintitle\">\r\n                                <p>Songs</p>\r\n                            </div> : \"\"\r\n                        }\r\n                        {   \r\n                            Object.keys(result.songs).map(each => {\r\n                                return(\r\n                                    // <div className=\"list\">\r\n                                        <SongList list={result.songs[each]}/>\r\n                                    // </div>\r\n                                );\r\n                            })\r\n                        }\r\n                        {\r\n                            Object.keys(result.albums).length !== 0 ?\r\n                            <div style={{ width: \"100%\", height: \"15px\" }}></div> : \"\"\r\n                        }\r\n                        {\r\n                            Object.keys(result.albums).length !== 0 ?\r\n                            <div className=\"maintitle\">\r\n                                <p>Albums</p>\r\n                            </div> : \"\"\r\n                        }\r\n                        {   \r\n                            Object.keys(result.albums).map(each => {\r\n                                return(\r\n                                    <div className=\"list\">\r\n                                        <HorizontalList list={result.albums[each]}/>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div> \r\n                : \"\"\r\n            }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst EachInSongList = ({\r\n    song,\r\n    playingSong,\r\n    setPlayingSong,\r\n    songIsPaused,\r\n    openerFunc,\r\n    playing,\r\n    setPlaying,\r\n    setSongIsPaused,\r\n    setQueue,\r\n    openerDetails,\r\n    setOpenerDetails\r\n}) => {\r\n    const [hovered, setHovered] = useState(false);\r\n\r\n    const determine = () => {\r\n        const nameOfSong = song.Title || song.Album;\r\n        const nameOfPlayingSong = playingSong.Title || playingSong.Album;\r\n        if (nameOfSong === nameOfPlayingSong) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    const handlePlayPause = e => {\r\n        e.stopPropagation();\r\n        if (openerDetails.open) {\r\n            setOpenerDetails({ ...openerDetails, open: false });\r\n        }\r\n        if (determine()) {\r\n            pauseOrPlay();\r\n            return;\r\n        }\r\n        const main = { ...song };\r\n        if (!playing) setPlaying(true);\r\n        main.id = global.id = 0;\r\n        setQueue([main]);\r\n        setPlayingSong(main);\r\n        localStorage.setItem(\"queue\",JSON.stringify([main]));\r\n        setSongIsPaused(true);\r\n    };\r\n\r\n    const handleMenu = e => {\r\n        e.stopPropagation();\r\n        const dimensions = { x: e.clientX, y: e.clientY };\r\n        const windowDim = { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight };\r\n        openerFunc(e, { dimensions, windowDim, song });\r\n    };\r\n\r\n    return(\r\n        <div className=\"each-list-song\" onMouseOver={() => setHovered(true)} onMouseOut={() => setHovered(false)}\r\n        style={{ backgroundColor: `${ determine() ? \"#202020\" : \"\" }` }}\r\n        >\r\n            <div className=\"each-list-song-cover\">\r\n                <div className=\"each-list-song-cover-inner\">\r\n                    <img className=\"each-list-song-cover-inner-img\" src={song.Thumbnail} alt=\"\" />\r\n                    <div className=\"each-song-dummyshadow\">\r\n                        <Button className=\"each-button\" onClick={handlePlayPause}>\r\n                            {\r\n                                determine() ?\r\n                                <img src={ songIsPaused ? Play : Pause } alt=\"\" /> :\r\n                                <img src={Play} alt=\"\" />\r\n                            }\r\n                        </Button>\r\n                    </div>\r\n                    {\r\n                        !hovered && determine() ? \r\n                        <div className=\"anim-cover\">\r\n                            {\r\n                                !songIsPaused ?\r\n                                <div className=\"playinganim\">\r\n                                    <div className=\"div1\"></div>\r\n                                    <div className=\"div2\"></div>\r\n                                    <div className=\"div3\"></div>\r\n                                    <div className=\"div4\"></div>\r\n                                </div> : \r\n                                <div className=\"pausedanim\">\r\n                                    <div className=\"div5\"></div>\r\n                                    <div className=\"div6\"></div>\r\n                                    <div className=\"div7\"></div>\r\n                                    <div className=\"div8\"></div>\r\n                                </div> \r\n                            }\r\n                        </div> : null\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className={ hovered ? \"each-list-song-details short\" : \"each-list-song-details\" }>\r\n                <div className=\"each-list-song-title\">{song.Title || song.Album}</div>\r\n                <div className=\"each-list-song-below\">\r\n                    <p>Song</p>\r\n                    <div className=\"search-separator\"><div></div></div>\r\n                    <p>{song.Artist}</p>\r\n                    <div className=\"search-separator\"><div></div></div>\r\n                    <p>{song.Album}</p>\r\n                    <div className=\"search-separator\"><div></div></div>\r\n                    <p>{song.Duration}</p>\r\n                </div>\r\n            </div>\r\n            <div className={ hovered ? \"each-list-opener\" : \"each-list-opener hidden\" }>\r\n                <div className=\"tileopener\" onClick={handleMenu}>\r\n                    <div className=\"tileopener1\"></div>\r\n                    <div className=\"tileopener2\"></div>\r\n                    <div className=\"tileopener3\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst EachInAlbumList = ({\r\n    album,\r\n    playingSong,\r\n    songIsPaused,\r\n    setSongIsPaused,\r\n    openerFunc,\r\n    setPlayingSong,\r\n    playing,\r\n    setPlaying,\r\n    setQueue,\r\n    openerDetails,\r\n    setOpenerDetails\r\n}) => {\r\n    const hist = useHistory();\r\n    const [hovered, setHovered] = useState(false);\r\n\r\n    const display = e => {\r\n        setTimeout(() => {\r\n            hist.push(`${prefix}/home/album/${album.Album}`);\r\n        },500);\r\n    };\r\n\r\n    const handlePlayPause = e => {\r\n        e.stopPropagation();\r\n        if (openerDetails.open) {\r\n            setOpenerDetails({ ...openerDetails, open: false });\r\n        }\r\n        if (playingSong.Album === album.Album) {\r\n            pauseOrPlay();\r\n            return;\r\n        }\r\n        const main = album.Type === \"Album\" ? album.Tracks : album;\r\n        if (!playing) setPlaying(true);\r\n        if (album.Type === \"Single\") {\r\n            main.id = global.id = 0;\r\n            setQueue([main]);\r\n            setPlayingSong(main);\r\n        } else {\r\n            const dummy = [ ...main ];\r\n            dummy.forEach((song,i) => {\r\n                song.id = global.id = i;\r\n                song.Album = album.Album;\r\n                song.Thumbnail = album.Thumbnail;\r\n                song.Color = album.Color;\r\n                song.Year = album.Year;\r\n            });\r\n            setQueue(dummy);\r\n            setPlayingSong(dummy[0]);\r\n        }\r\n        localStorage.setItem(\"queue\",JSON.stringify(main));\r\n        setSongIsPaused(true);\r\n    };\r\n\r\n    const handleMenu = e => {\r\n        e.stopPropagation();\r\n        const dimensions = { x: e.clientX, y: e.clientY };\r\n        const windowDim = { width: document.documentElement.clientWidth, height: document.documentElement.clientHeight };\r\n        openerFunc(e, { dimensions, windowDim, song: album });\r\n    };\r\n\r\n    const determine = () => {\r\n        const nameOfSong = album.Album;\r\n        const nameOfPlayingSong = playingSong.Album;\r\n        if (nameOfSong === nameOfPlayingSong) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return(\r\n        <Button className=\"each-album-button\" onClick={display}>\r\n        <div className=\"each-list-song\" onMouseOver={() => setHovered(true)} onMouseOut={() => setHovered(false)}\r\n        // style={{ backgroundColor: `${ hovered ? \"#202020\" : \"\" }` }}\r\n        >\r\n            <div className=\"each-list-song-cover\">\r\n                <div className=\"each-list-song-cover-inner\">\r\n                    <img className=\"each-list-song-cover-inner-img\" src={album.Thumbnail} alt=\"\" />\r\n                    <div className=\"each-song-dummyshadow\">\r\n                        <Button className=\"each-button\" onClick={handlePlayPause}>\r\n                            {\r\n                                determine() ?\r\n                                <img src={ songIsPaused ? Play : Pause } alt=\"\" /> :\r\n                                <img src={Play} alt=\"\" />\r\n                            }\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={ hovered ? \"each-list-song-details short\" : \"each-list-song-details\" }>\r\n                <div className=\"each-list-song-title\">{album.Title || album.Album}</div>\r\n                <div className=\"each-list-song-below\">\r\n                    <p>{album.Type}</p>\r\n                    <div className=\"search-separator\"><div></div></div>\r\n                    <p>{album.AlbumArtist}</p>\r\n                    <div className=\"search-separator\"><div></div></div>\r\n                    <p>{album.Year}</p>\r\n                </div>\r\n            </div>\r\n            <div className={ hovered ? \"each-list-opener\" : \"each-list-opener hidden\" }>\r\n                <div className=\"tileopener\" onClick={handleMenu}>\r\n                    <div className=\"tileopener1\"></div>\r\n                    <div className=\"tileopener2\"></div>\r\n                    <div className=\"tileopener3\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </Button>\r\n    );\r\n    // return(\r\n    //     <div className=\"each-list-album\">\r\n    //         <div className=\"each-list-album-inner\">\r\n    //             <Button className=\"eachartcover\" onClick={display} title={album.Album}>\r\n    //                 <div className=\"eachshadow\"></div>\r\n    //                 <div className={ (playingSong.Album === album.Album) ? \"showplaybuttonfixed\" : \"showplaybutton\" }>\r\n    //                     <Button className=\"innerplaybutton\" onClick={handlePlayPause}\r\n    //                     title={ (!songIsPaused && playingSong.Album === album.Album) ? \"Pause\" : \"Play\" } >\r\n    //                         <img src={ (!songIsPaused && playingSong.Album === album.Album) ? Pause : Play } alt=\"\" />\r\n    //                     </Button>\r\n    //                 </div>\r\n    //                 <div className=\"library-opener\" onClick={handleMenu} title=\"More Options\">\r\n    //                     <div className=\"library-opener1\"></div>\r\n    //                     <div className=\"library-opener2\"></div>\r\n    //                     <div className=\"library-opener3\"></div>\r\n    //                 </div>\r\n    //                 <img src={album.Thumbnail} alt=\"\" className=\"eachalbumart\" />\r\n    //             </Button>\r\n    //             <div className=\"eachalbumname\" onClick={display}>{album.Album}</div>\r\n    //             <span className=\"eachbottom\">\r\n    //                 <span>{album.AlbumArtist}</span>\r\n    //             </span>\r\n    //         </div>\r\n    //     </div>\r\n    // );\r\n};\r\n\r\nconst SongsList = ({ songs, openerFunc, openerDetails, setOpenerDetails }) => {\r\n    const [playingSong, setPlayingSong] = CustomUseState(albumGlobal);\r\n    const [songIsPaused, setSongIsPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [,setQueue] = CustomUseState(queueGlobal);\r\n\r\n    return(\r\n        <div className=\"songs-list\">\r\n            <div className=\"songs-list-title\">Songs</div>\r\n            <div className=\"songs-list-container\">\r\n                {\r\n                    songs.map(each => {\r\n                        return <EachInSongList song={each} playingSong={playingSong} setPlayingSong={setPlayingSong}\r\n                                songIsPaused={songIsPaused} openerFunc={openerFunc} playing={playing} setPlaying={setPlaying}\r\n                                setSongIsPaused={setSongIsPaused} setQueue={setQueue}\r\n                                openerDetails={openerDetails} setOpenerDetails={setOpenerDetails} />;\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst AlbumsList = ({ albums, openerFunc, openerDetails, setOpenerDetails }) => {\r\n    const [playingSong, setPlayingSong] = CustomUseState(albumGlobal);\r\n    const [songIsPaused, setSongIsPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [,setQueue] = CustomUseState(queueGlobal);\r\n\r\n    return(\r\n        <div className=\"songs-list\">\r\n            <div className=\"songs-list-title\">Albums</div>\r\n            {/* <div className=\"albums-list-grid\"> */}\r\n            <div className=\"albums-list-container\">\r\n                {\r\n                    albums.map(each => {\r\n                        return <EachInAlbumList album={each} playingSong={playingSong} setPlayingSong={setPlayingSong}\r\n                                songIsPaused={songIsPaused} playing={playing} setPlaying={setPlaying}\r\n                                setSongIsPaused={setSongIsPaused} setQueue={setQueue} openerFunc={openerFunc}\r\n                                openerDetails={openerDetails} setOpenerDetails={setOpenerDetails} />;\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst NewSearch = () => {\r\n    const [playingSong, setPlayingSong] = CustomUseState(albumGlobal);\r\n    const [input,] = CustomUseState(searchInputGlobal);\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    const [, setResObj] = CustomUseState(responseBar);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [songsList, setSongsList] = useState([]);\r\n    const [albumsList, setAlbumsList] = useState([]);\r\n    const hist = useHistory();\r\n\r\n    const call = async () => {\r\n        console.log(\"calling\");\r\n        const res = await sendRequest({\r\n            method: \"GET\",\r\n            endpoint: `/search?name=${input}`\r\n        });\r\n        console.log(\"res\",res);\r\n        setSongsList(res.songs);\r\n        setAlbumsList(res.albums);\r\n        setIsLoading(false);\r\n    };\r\n\r\n    const addTrackToQueue = (song) => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        const dummy = [ ...queue ];\r\n        const len = dummy.length;\r\n        if (len === 0) return;\r\n        dummy[len] = { ...song, id: ++global.id };\r\n        setQueue(dummy);\r\n        setResObj({ open: true, msg: `Added ${song.Title || song.Album} to queue` });\r\n    };\r\n\r\n    const playTrackNext = (song) => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        if (queue.length === 0) return;\r\n        const curIndex = queue.indexOf(playingSong);\r\n        const dummy = [ ...queue ];\r\n        dummy.splice(curIndex+1, 0, { ...song, id: ++global.id });\r\n        setQueue(dummy);\r\n        setResObj({ open: true, msg: `Playing ${song.Title || song.Album} next` });\r\n    };\r\n\r\n    const goToAlbum = (song) => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        hist.push(`${prefix}/home/album/${song.Album}`);\r\n    };\r\n\r\n    const handleSongMenu = (e, { dimensions, windowDim, song: album }) => {\r\n        const data = [\r\n            {\r\n                name: \"Add to queue\",\r\n                func: () => addTrackToQueue(album)\r\n            },\r\n            {\r\n                name: \"Play next\",\r\n                func: () => playTrackNext(album)\r\n            },\r\n            {\r\n                name: \"Go to album\",\r\n                func: () => goToAlbum(album)\r\n            }\r\n            // {\r\n            //     name: \"Start radio\",\r\n            //     func: () => {}\r\n            // }\r\n        ];\r\n        e.stopPropagation();\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: true,\r\n            xValue: checkX(dimensions.x, windowDim.width),\r\n            yValue: checkY(dimensions.y, windowDim.height, data.length),\r\n            data\r\n        });\r\n    };\r\n\r\n    const addAlbumToQueue = (album) => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        const main = album.Type === \"Album\" ? album.Tracks : { ...album };\r\n        const mainQueue = [ ...queue ];\r\n        const len = mainQueue.length;\r\n        if (len === 0) return;\r\n        if (album.Type === \"Single\") {\r\n            main.id = ++global.id;\r\n            mainQueue.push(main);\r\n            localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n            setQueue(mainQueue);\r\n            setResObj({ open: true, msg: `Added single to queue` });\r\n        } else {\r\n            const newmain = [ ...main ];\r\n            newmain.forEach(song => {\r\n                song.id = ++global.id;\r\n                song.Album = album.Album;\r\n                song.Color = album.Color;\r\n                song.Thumbnail = album.Thumbnail;\r\n                song.Year = album.Year;\r\n                mainQueue.push(song);\r\n            });\r\n            localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n            setQueue(mainQueue);\r\n            setResObj({ open: true, msg: `Added album to queue` });\r\n        }\r\n    };\r\n\r\n    const playAlbumNext = (album) => {\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n        const len = queue.length;\r\n        if (len !== 0) {\r\n            const index = queue.indexOf(playingSong);\r\n            const mainQueue = [ ...queue ];\r\n            if (album.Type === \"Single\") {\r\n                album.id = ++global.id;\r\n                mainQueue.splice(index+1, 0, { ...album });\r\n            } else {\r\n                const tracks = album.Tracks || [];\r\n                [ ...tracks ].forEach((song,i) => {\r\n                    song.id = ++global.id;\r\n                    song.Album = album.Album;\r\n                    song.Color = album.Color;\r\n                    song.Thumbnail = album.Thumbnail;\r\n                    song.Year = album.Year;\r\n                    mainQueue.splice(index+1+i, 0, { ...song });\r\n                });\r\n            }\r\n            localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n            setQueue(mainQueue);\r\n            setResObj({ open: true, msg: `Playing ${album.Album} next` });\r\n        }\r\n    };\r\n\r\n    const handleAlbumMenu = (e, { dimensions, windowDim, song: album }) => {\r\n        const data = [\r\n            {\r\n                name: \"Add to queue\",\r\n                func: () => addAlbumToQueue(album)\r\n            },\r\n            {\r\n                name: \"Play next\",\r\n                func: () => playAlbumNext(album)\r\n            }\r\n        ];\r\n        e.stopPropagation();\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: true,\r\n            xValue: checkX(dimensions.x, windowDim.width),\r\n            yValue: checkY(dimensions.y, windowDim.height, data.length),\r\n            data\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setIsLoading(true);\r\n        call();\r\n    }, [input]);\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"search-page\">\r\n            <div className=\"inner-search-page\">\r\n                {\r\n                    songsList.length !== 0 ?\r\n                    <SongsList songs={songsList} openerFunc={handleSongMenu}\r\n                    openerDetails={openerDetails} setOpenerDetails={setOpenerDetails} /> : null\r\n                }\r\n                <div style={{ width: \"100%\", height: \"30px\" }}></div>\r\n                {\r\n                    albumsList.length !== 0 ?\r\n                    <AlbumsList albums={albumsList} openerFunc={handleAlbumMenu}\r\n                    openerDetails={openerDetails} setOpenerDetails={setOpenerDetails} /> : null\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Search = () => {\r\n    // const [queueOpened,] = CustomUseState(queueOpenedGlobal);\r\n    // const [searchConfig, setSearchConfig] = CustomUseState(searchBarGlobal);\r\n\r\n    // if (queueOpened) {\r\n    //     return <Queue/>\r\n    // }\r\n    // return <ActualSearch/>\r\n    // useEffect(() => {\r\n    //     console.log(\"search page\");\r\n    //     return () => {\r\n    //         setSearchConfig({\r\n    //             ...searchConfig,\r\n    //             open: false\r\n    //         });\r\n    //     };\r\n    // }, []);\r\n\r\n    // return <></>\r\n    return <NewSearch/>\r\n};\r\n\r\n\r\nexport default Search;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\Button.js",[],{"ruleId":"196","severity":1,"message":"197","line":1,"column":28,"nodeType":"198","messageId":"199","endLine":1,"endColumn":34},{"ruleId":"196","severity":1,"message":"200","line":1,"column":36,"nodeType":"198","messageId":"199","endLine":1,"endColumn":44},{"ruleId":"196","severity":1,"message":"201","line":36,"column":11,"nodeType":"198","messageId":"199","endLine":36,"endColumn":20},{"ruleId":"202","severity":1,"message":"203","line":69,"column":7,"nodeType":"204","endLine":69,"endColumn":9,"suggestions":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"196","severity":1,"message":"210","line":324,"column":7,"nodeType":"198","messageId":"199","endLine":324,"endColumn":13},{"ruleId":"196","severity":1,"message":"211","line":488,"column":7,"nodeType":"198","messageId":"199","endLine":488,"endColumn":14},{"ruleId":"196","severity":1,"message":"212","line":624,"column":5,"nodeType":"198","messageId":"199","endLine":624,"endColumn":10},{"ruleId":"213","severity":1,"message":"214","line":637,"column":17,"nodeType":"198","messageId":"215","endLine":637,"endColumn":22},{"ruleId":"196","severity":1,"message":"216","line":24,"column":8,"nodeType":"198","messageId":"199","endLine":24,"endColumn":18},{"ruleId":"196","severity":1,"message":"217","line":25,"column":8,"nodeType":"198","messageId":"199","endLine":25,"endColumn":23},{"ruleId":"196","severity":1,"message":"218","line":26,"column":8,"nodeType":"198","messageId":"199","endLine":26,"endColumn":28},{"ruleId":"196","severity":1,"message":"219","line":27,"column":8,"nodeType":"198","messageId":"199","endLine":27,"endColumn":23},{"ruleId":"196","severity":1,"message":"220","line":28,"column":8,"nodeType":"198","messageId":"199","endLine":28,"endColumn":27},{"ruleId":"196","severity":1,"message":"221","line":29,"column":8,"nodeType":"198","messageId":"199","endLine":29,"endColumn":22},{"ruleId":"196","severity":1,"message":"222","line":32,"column":8,"nodeType":"198","messageId":"199","endLine":32,"endColumn":14},{"ruleId":"196","severity":1,"message":"223","line":33,"column":8,"nodeType":"198","messageId":"199","endLine":33,"endColumn":17},{"ruleId":"196","severity":1,"message":"224","line":40,"column":5,"nodeType":"198","messageId":"199","endLine":40,"endColumn":9},{"ruleId":"196","severity":1,"message":"225","line":47,"column":5,"nodeType":"198","messageId":"199","endLine":47,"endColumn":14},{"ruleId":"196","severity":1,"message":"226","line":49,"column":5,"nodeType":"198","messageId":"199","endLine":49,"endColumn":20},{"ruleId":"196","severity":1,"message":"227","line":89,"column":7,"nodeType":"198","messageId":"199","endLine":89,"endColumn":18},{"ruleId":"196","severity":1,"message":"228","line":101,"column":7,"nodeType":"198","messageId":"199","endLine":101,"endColumn":12},{"ruleId":"196","severity":1,"message":"229","line":135,"column":12,"nodeType":"198","messageId":"199","endLine":135,"endColumn":22},{"ruleId":"196","severity":1,"message":"230","line":135,"column":24,"nodeType":"198","messageId":"199","endLine":135,"endColumn":37},{"ruleId":"196","severity":1,"message":"231","line":140,"column":26,"nodeType":"198","messageId":"199","endLine":140,"endColumn":41},{"ruleId":"196","severity":1,"message":"232","line":147,"column":5,"nodeType":"198","messageId":"199","endLine":147,"endColumn":11},{"ruleId":"196","severity":1,"message":"233","line":155,"column":5,"nodeType":"198","messageId":"199","endLine":155,"endColumn":20},{"ruleId":"196","severity":1,"message":"234","line":312,"column":11,"nodeType":"198","messageId":"199","endLine":312,"endColumn":34},{"ruleId":"196","severity":1,"message":"235","line":324,"column":11,"nodeType":"198","messageId":"199","endLine":324,"endColumn":38},{"ruleId":"196","severity":1,"message":"236","line":432,"column":11,"nodeType":"198","messageId":"199","endLine":432,"endColumn":17},{"ruleId":"196","severity":1,"message":"237","line":518,"column":11,"nodeType":"198","messageId":"199","endLine":518,"endColumn":17},{"ruleId":"196","severity":1,"message":"238","line":534,"column":11,"nodeType":"198","messageId":"199","endLine":534,"endColumn":24},{"ruleId":"196","severity":1,"message":"239","line":554,"column":11,"nodeType":"198","messageId":"199","endLine":554,"endColumn":20},{"ruleId":"202","severity":1,"message":"240","line":619,"column":7,"nodeType":"204","endLine":619,"endColumn":13,"suggestions":"241"},{"ruleId":"196","severity":1,"message":"242","line":654,"column":13,"nodeType":"198","messageId":"199","endLine":654,"endColumn":19},{"ruleId":"202","severity":1,"message":"243","line":740,"column":7,"nodeType":"204","endLine":740,"endColumn":21,"suggestions":"244"},{"ruleId":"202","severity":1,"message":"245","line":886,"column":8,"nodeType":"204","endLine":886,"endColumn":10,"suggestions":"246"},{"ruleId":"196","severity":1,"message":"247","line":906,"column":12,"nodeType":"198","messageId":"199","endLine":906,"endColumn":24},{"ruleId":"196","severity":1,"message":"248","line":906,"column":26,"nodeType":"198","messageId":"199","endLine":906,"endColumn":41},{"ruleId":"196","severity":1,"message":"249","line":915,"column":11,"nodeType":"198","messageId":"199","endLine":915,"endColumn":22},{"ruleId":"202","severity":1,"message":"245","line":1070,"column":8,"nodeType":"204","endLine":1070,"endColumn":10,"suggestions":"250"},{"ruleId":"196","severity":1,"message":"251","line":1,"column":15,"nodeType":"198","messageId":"199","endLine":1,"endColumn":29},{"ruleId":"196","severity":1,"message":"252","line":21,"column":8,"nodeType":"198","messageId":"199","endLine":21,"endColumn":16},{"ruleId":"196","severity":1,"message":"253","line":23,"column":8,"nodeType":"198","messageId":"199","endLine":23,"endColumn":12},{"ruleId":"196","severity":1,"message":"254","line":40,"column":8,"nodeType":"198","messageId":"199","endLine":40,"endColumn":14},{"ruleId":"196","severity":1,"message":"255","line":41,"column":41,"nodeType":"198","messageId":"199","endLine":41,"endColumn":59},{"ruleId":"196","severity":1,"message":"256","line":44,"column":7,"nodeType":"198","messageId":"199","endLine":44,"endColumn":11},{"ruleId":"196","severity":1,"message":"257","line":46,"column":11,"nodeType":"198","messageId":"199","endLine":46,"endColumn":21},{"ruleId":"196","severity":1,"message":"232","line":61,"column":5,"nodeType":"198","messageId":"199","endLine":61,"endColumn":11},{"ruleId":"196","severity":1,"message":"258","line":196,"column":11,"nodeType":"198","messageId":"199","endLine":196,"endColumn":19},{"ruleId":"196","severity":1,"message":"259","line":339,"column":11,"nodeType":"198","messageId":"199","endLine":339,"endColumn":18},{"ruleId":"202","severity":1,"message":"260","line":360,"column":8,"nodeType":"204","endLine":360,"endColumn":12,"suggestions":"261"},{"ruleId":"202","severity":1,"message":"245","line":371,"column":8,"nodeType":"204","endLine":371,"endColumn":10,"suggestions":"262"},{"ruleId":"196","severity":1,"message":"263","line":577,"column":12,"nodeType":"198","messageId":"199","endLine":577,"endColumn":21},{"ruleId":"196","severity":1,"message":"264","line":4,"column":25,"nodeType":"198","messageId":"199","endLine":4,"endColumn":35},{"ruleId":"196","severity":1,"message":"265","line":134,"column":7,"nodeType":"198","messageId":"199","endLine":134,"endColumn":17},{"ruleId":"196","severity":1,"message":"266","line":195,"column":11,"nodeType":"198","messageId":"199","endLine":195,"endColumn":18},{"ruleId":"202","severity":1,"message":"267","line":224,"column":7,"nodeType":"204","endLine":224,"endColumn":9,"suggestions":"268"},{"ruleId":"202","severity":1,"message":"269","line":286,"column":8,"nodeType":"204","endLine":286,"endColumn":10,"suggestions":"270"},{"ruleId":"196","severity":1,"message":"271","line":12,"column":8,"nodeType":"198","messageId":"199","endLine":12,"endColumn":19},{"ruleId":"196","severity":1,"message":"272","line":16,"column":5,"nodeType":"198","messageId":"199","endLine":16,"endColumn":22},{"ruleId":"196","severity":1,"message":"273","line":32,"column":8,"nodeType":"198","messageId":"199","endLine":32,"endColumn":13},{"ruleId":"196","severity":1,"message":"274","line":263,"column":7,"nodeType":"198","messageId":"199","endLine":263,"endColumn":23},{"ruleId":"202","severity":1,"message":"275","line":353,"column":8,"nodeType":"204","endLine":353,"endColumn":19,"suggestions":"276"},{"ruleId":"196","severity":1,"message":"277","line":355,"column":11,"nodeType":"198","messageId":"199","endLine":355,"endColumn":15},{"ruleId":"196","severity":1,"message":"278","line":404,"column":7,"nodeType":"198","messageId":"199","endLine":404,"endColumn":19},{"ruleId":"196","severity":1,"message":"279","line":666,"column":11,"nodeType":"198","messageId":"199","endLine":666,"endColumn":24},{"ruleId":"280","severity":1,"message":"281","line":225,"column":5,"nodeType":"282","messageId":"283","endLine":249,"endColumn":6},{"ruleId":"196","severity":1,"message":"272","line":12,"column":5,"nodeType":"198","messageId":"199","endLine":12,"endColumn":22},{"ruleId":"196","severity":1,"message":"284","line":27,"column":8,"nodeType":"198","messageId":"199","endLine":27,"endColumn":18},{"ruleId":"196","severity":1,"message":"273","line":34,"column":8,"nodeType":"198","messageId":"199","endLine":34,"endColumn":13},{"ruleId":"196","severity":1,"message":"285","line":53,"column":7,"nodeType":"198","messageId":"199","endLine":53,"endColumn":22},{"ruleId":"196","severity":1,"message":"286","line":69,"column":12,"nodeType":"198","messageId":"199","endLine":69,"endColumn":17},{"ruleId":"196","severity":1,"message":"287","line":83,"column":11,"nodeType":"198","messageId":"199","endLine":83,"endColumn":28},{"ruleId":"202","severity":1,"message":"288","line":359,"column":7,"nodeType":"204","endLine":359,"endColumn":18,"suggestions":"289"},{"ruleId":"196","severity":1,"message":"290","line":647,"column":12,"nodeType":"198","messageId":"199","endLine":647,"endColumn":17},{"ruleId":"196","severity":1,"message":"291","line":698,"column":11,"nodeType":"198","messageId":"199","endLine":698,"endColumn":21},{"ruleId":"196","severity":1,"message":"292","line":857,"column":11,"nodeType":"198","messageId":"199","endLine":857,"endColumn":17},{"ruleId":"196","severity":1,"message":"279","line":995,"column":11,"nodeType":"198","messageId":"199","endLine":995,"endColumn":24},{"ruleId":"196","severity":1,"message":"293","line":1004,"column":11,"nodeType":"198","messageId":"199","endLine":1004,"endColumn":25},{"ruleId":"202","severity":1,"message":"294","line":1029,"column":8,"nodeType":"204","endLine":1029,"endColumn":19,"suggestions":"295"},{"ruleId":"196","severity":1,"message":"296","line":4,"column":10,"nodeType":"198","messageId":"199","endLine":4,"endColumn":18},{"ruleId":"196","severity":1,"message":"272","line":12,"column":5,"nodeType":"198","messageId":"199","endLine":12,"endColumn":22},{"ruleId":"196","severity":1,"message":"297","line":17,"column":5,"nodeType":"198","messageId":"199","endLine":17,"endColumn":18},{"ruleId":"196","severity":1,"message":"298","line":18,"column":5,"nodeType":"198","messageId":"199","endLine":18,"endColumn":17},{"ruleId":"196","severity":1,"message":"273","line":30,"column":8,"nodeType":"198","messageId":"199","endLine":30,"endColumn":13},{"ruleId":"196","severity":1,"message":"299","line":35,"column":7,"nodeType":"198","messageId":"199","endLine":35,"endColumn":20},{"ruleId":"196","severity":1,"message":"300","line":39,"column":24,"nodeType":"198","messageId":"199","endLine":39,"endColumn":34},{"ruleId":"202","severity":1,"message":"301","line":96,"column":7,"nodeType":"204","endLine":96,"endColumn":18,"suggestions":"302"},{"ruleId":"196","severity":1,"message":"290","line":140,"column":12,"nodeType":"198","messageId":"199","endLine":140,"endColumn":17},{"ruleId":"196","severity":1,"message":"303","line":242,"column":7,"nodeType":"198","messageId":"199","endLine":242,"endColumn":16},{"ruleId":"196","severity":1,"message":"304","line":260,"column":7,"nodeType":"198","messageId":"199","endLine":260,"endColumn":23},{"ruleId":"196","severity":1,"message":"279","line":355,"column":11,"nodeType":"198","messageId":"199","endLine":355,"endColumn":24},{"ruleId":"196","severity":1,"message":"293","line":364,"column":11,"nodeType":"198","messageId":"199","endLine":364,"endColumn":25},{"ruleId":"196","severity":1,"message":"296","line":3,"column":10,"nodeType":"198","messageId":"199","endLine":3,"endColumn":18},{"ruleId":"196","severity":1,"message":"305","line":4,"column":8,"nodeType":"198","messageId":"199","endLine":4,"endColumn":13},{"ruleId":"196","severity":1,"message":"271","line":5,"column":8,"nodeType":"198","messageId":"199","endLine":5,"endColumn":19},{"ruleId":"196","severity":1,"message":"306","line":33,"column":10,"nodeType":"198","messageId":"199","endLine":33,"endColumn":25},{"ruleId":"196","severity":1,"message":"307","line":46,"column":7,"nodeType":"198","messageId":"199","endLine":46,"endColumn":18},{"ruleId":"196","severity":1,"message":"308","line":139,"column":11,"nodeType":"198","messageId":"199","endLine":139,"endColumn":26},{"ruleId":"196","severity":1,"message":"309","line":140,"column":11,"nodeType":"198","messageId":"199","endLine":140,"endColumn":23},{"ruleId":"196","severity":1,"message":"310","line":321,"column":11,"nodeType":"198","messageId":"199","endLine":321,"endColumn":25},{"ruleId":"196","severity":1,"message":"311","line":322,"column":9,"nodeType":"198","messageId":"199","endLine":322,"endColumn":23},{"ruleId":"196","severity":1,"message":"312","line":348,"column":11,"nodeType":"198","messageId":"199","endLine":348,"endColumn":16},{"ruleId":"196","severity":1,"message":"313","line":410,"column":13,"nodeType":"198","messageId":"199","endLine":410,"endColumn":23},{"ruleId":"196","severity":1,"message":"314","line":429,"column":5,"nodeType":"198","messageId":"199","endLine":429,"endColumn":14},{"ruleId":"196","severity":1,"message":"315","line":430,"column":5,"nodeType":"198","messageId":"199","endLine":430,"endColumn":13},{"ruleId":"196","severity":1,"message":"316","line":437,"column":11,"nodeType":"198","messageId":"199","endLine":437,"endColumn":21},{"ruleId":"196","severity":1,"message":"317","line":455,"column":11,"nodeType":"198","messageId":"199","endLine":455,"endColumn":18},{"ruleId":"196","severity":1,"message":"318","line":477,"column":11,"nodeType":"198","messageId":"199","endLine":477,"endColumn":16},{"ruleId":"196","severity":1,"message":"319","line":511,"column":11,"nodeType":"198","messageId":"199","endLine":511,"endColumn":20},{"ruleId":"196","severity":1,"message":"237","line":519,"column":11,"nodeType":"198","messageId":"199","endLine":519,"endColumn":17},{"ruleId":"196","severity":1,"message":"320","line":557,"column":11,"nodeType":"198","messageId":"199","endLine":557,"endColumn":28},{"ruleId":"202","severity":1,"message":"294","line":606,"column":8,"nodeType":"204","endLine":606,"endColumn":14,"suggestions":"321"},{"ruleId":"202","severity":1,"message":"322","line":617,"column":8,"nodeType":"204","endLine":617,"endColumn":22,"suggestions":"323"},{"ruleId":"196","severity":1,"message":"324","line":6,"column":5,"nodeType":"198","messageId":"199","endLine":6,"endColumn":18},{"ruleId":"196","severity":1,"message":"325","line":8,"column":5,"nodeType":"198","messageId":"199","endLine":8,"endColumn":16},{"ruleId":"196","severity":1,"message":"326","line":25,"column":11,"nodeType":"198","messageId":"199","endLine":25,"endColumn":17},{"ruleId":"202","severity":1,"message":"327","line":56,"column":8,"nodeType":"204","endLine":56,"endColumn":10,"suggestions":"328"},{"ruleId":"196","severity":1,"message":"329","line":6,"column":8,"nodeType":"198","messageId":"199","endLine":6,"endColumn":18},{"ruleId":"196","severity":1,"message":"305","line":7,"column":8,"nodeType":"198","messageId":"199","endLine":7,"endColumn":13},{"ruleId":"196","severity":1,"message":"272","line":12,"column":5,"nodeType":"198","messageId":"199","endLine":12,"endColumn":22},{"ruleId":"196","severity":1,"message":"273","line":29,"column":8,"nodeType":"198","messageId":"199","endLine":29,"endColumn":13},{"ruleId":"196","severity":1,"message":"330","line":34,"column":5,"nodeType":"198","messageId":"199","endLine":34,"endColumn":12},{"ruleId":"196","severity":1,"message":"237","line":92,"column":11,"nodeType":"198","messageId":"199","endLine":92,"endColumn":17},{"ruleId":"196","severity":1,"message":"331","line":123,"column":7,"nodeType":"198","messageId":"199","endLine":123,"endColumn":21},{"ruleId":"196","severity":1,"message":"332","line":137,"column":7,"nodeType":"198","messageId":"199","endLine":137,"endColumn":19},{"ruleId":"196","severity":1,"message":"333","line":141,"column":24,"nodeType":"198","messageId":"199","endLine":141,"endColumn":37},{"ruleId":"202","severity":1,"message":"334","line":217,"column":7,"nodeType":"204","endLine":217,"endColumn":9,"suggestions":"335"},{"ruleId":"196","severity":1,"message":"336","line":624,"column":25,"nodeType":"198","messageId":"199","endLine":624,"endColumn":39},{"ruleId":"202","severity":1,"message":"294","line":778,"column":8,"nodeType":"204","endLine":778,"endColumn":15,"suggestions":"337"},"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'screenSet' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'check'. Either include it or remove the dependency array.","ArrayExpression",["338"],"no-native-reassign",["339"],"no-negated-in-lhs",["340"],"'Login2' is assigned a value but never used.","'SignUp2' is assigned a value but never used.","'setup' is assigned a value but never used.","no-const-assign","'queue' is constant.","const","'queuewhite' is defined but never used.","'queueaquamarine' is defined but never used.","'fullscreenaquamarine' is defined but never used.","'fullscreenwhite' is defined but never used.","'innerfullaquamarine' is defined but never used.","'innerfullwhite' is defined but never used.","'Expand' is defined but never used.","'volumesvg' is defined but never used.","'wait' is defined but never used.","'homeClass' is defined but never used.","'searchBarGlobal' is defined but never used.","'fetchStream' is assigned a value but never used.","'trial' is assigned a value but never used.","'buttonshow' is assigned a value but never used.","'setButtonshow' is assigned a value but never used.","'setTopBarConfig' is assigned a value but never used.","'topBar' is assigned a value but never used.","'songPausedLocal' is assigned a value but never used.","'goToNextForMediaSession' is assigned a value but never used.","'goToPreviousForMediaSession' is assigned a value but never used.","'onplay' is assigned a value but never used.","'lessen' is assigned a value but never used.","'screenSetting' is assigned a value but never used.","'calcColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'addToRecentlyPlayed', 'prevSong', and 'setLyricText'. Either include them or remove the dependency array.",["341"],"'loaded' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'canplay', 'ended', 'metadata', 'onpaused', 'onplaying', 'setQueue', 'setRepeatType', 'setSongPaused', 'shutdown', 'timeupdate', and 'waiting'. Either include them or remove the dependency array.",["342"],"React Hook useEffect has a missing dependency: 'click'. Either include it or remove the dependency array.",["343"],"'songIsPaused' is assigned a value but never used.","'setSongIsPaused' is assigned a value but never used.","'handleClick' is assigned a value but never used.",["344"],"'MidPanelLoader' is defined but never used.","'dropdown' is defined but never used.","'tick' is defined but never used.","'Button' is defined but never used.","'searchInputTimeout' is assigned a value but never used.","'Left' is assigned a value but never used.","'normalList' is assigned a value but never used.","'resetTop' is assigned a value but never used.","'keyDown' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'list'. Either include it or remove the dependency array.",["345"],["346"],"'isPlaying' is assigned a value but never used.","'useHistory' is defined but never used.","'ProfileBar' is assigned a value but never used.","'openNew' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleClick'. Either include it or remove the dependency array.",["347"],"React Hook useEffect has a missing dependency: 'handleScroll'. Either include it or remove the dependency array.",["348"],"'Placeholder' is defined but never used.","'queueOpenedGlobal' is defined but never used.","'Queue' is defined but never used.","'ActualHomeScreen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'mouseOut' and 'setTopBarConfig'. Either include them or remove the dependency array.",["349"],"'list' is assigned a value but never used.","'QuickPickRow' is assigned a value but never used.","'documentClick' is assigned a value but never used.","no-unreachable","Unreachable code.","IfStatement","unreachableCode","'BackButton' is defined but never used.","'ActualAlbumView' is assigned a value but never used.","'added' is assigned a value but never used.","'checkForLeftPanel' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'call', 'goBack', 'handleClick', 'redirectValue', and 'setTopBarConfig'. Either include them or remove the dependency array. You can also do a functional update 'setRedirectValue(r => ...)' if you only need 'redirectValue' in the 'setRedirectValue' call.",["350"],"'queue' is assigned a value but never used.","'playButton' is assigned a value but never used.","'goBack' is assigned a value but never used.","'documentScroll' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'call'. Either include it or remove the dependency array.",["351"],"'Redirect' is defined but never used.","'modifyLibrary' is defined but never used.","'routesGlobal' is defined but never used.","'ActualLibrary' is assigned a value but never used.","'setBgColor' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setTopBarConfig'. Either include it or remove the dependency array.",["352"],"'CreateRow' is assigned a value but never used.","'CreateAnotherRow' is assigned a value but never used.","'Close' is defined but never used.","'desktopCapturer' is defined but never used.","'SongInQueue' is assigned a value but never used.","'lyricsContainer' is assigned a value but never used.","'activeLyrics' is assigned a value but never used.","'keepScrollDown' is assigned a value but never used.","'scrollInterval' is assigned a value but never used.","'flush' is assigned a value but never used.","'setPlaying' is assigned a value but never used.","'firstpart' is assigned a value but never used.","'lastpart' is assigned a value but never used.","'clearQueue' is assigned a value but never used.","'initial' is assigned a value but never used.","'close' is assigned a value but never used.","'albumName' is assigned a value but never used.","'handlePlayingMenu' is assigned a value but never used.",["353"],"React Hook useEffect has missing dependencies: 'documentClick' and 'documentScroll'. Either include them or remove the dependency array.",["354"],"'playingGlobal' is defined but never used.","'albumGlobal' is defined but never used.","'decide' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'call' and 'isRadioOn'. Either include them or remove the dependency array.",["355"],"'SearchIcon' is defined but never used.","'timeout' is assigned a value but never used.","'RecommendedRow' is assigned a value but never used.","'ActualSearch' is assigned a value but never used.","'setTopBgColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setSearchConfig' and 'setTopBarConfig'. Either include them or remove the dependency array.",["356"],"'setPlayingSong' is assigned a value but never used.",["357"],{"desc":"358","fix":"359"},"no-global-assign","no-unsafe-negation",{"desc":"360","fix":"361"},{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},{"desc":"364","fix":"366"},{"desc":"367","fix":"368"},{"desc":"364","fix":"369"},{"desc":"370","fix":"371"},{"desc":"372","fix":"373"},{"desc":"374","fix":"375"},{"desc":"376","fix":"377"},{"desc":"378","fix":"379"},{"desc":"380","fix":"381"},{"desc":"382","fix":"383"},{"desc":"384","fix":"385"},{"desc":"386","fix":"387"},{"desc":"388","fix":"389"},{"desc":"390","fix":"391"},"Update the dependencies array to be: [check]",{"range":"392","text":"393"},"Update the dependencies array to be: [addToRecentlyPlayed, prevSong, setLyricText, song]",{"range":"394","text":"395"},"Update the dependencies array to be: [canplay, ended, metadata, onpaused, onplaying, setQueue, setRepeatType, setSongPaused, shutdown, song, timeupdate, update, waiting]",{"range":"396","text":"397"},"Update the dependencies array to be: [click]",{"range":"398","text":"399"},{"range":"400","text":"399"},"Update the dependencies array to be: [list, no]",{"range":"401","text":"402"},{"range":"403","text":"399"},"Update the dependencies array to be: [handleClick]",{"range":"404","text":"405"},"Update the dependencies array to be: [handleScroll]",{"range":"406","text":"407"},"Update the dependencies array to be: [isLoading, mouseOut, setTopBarConfig]",{"range":"408","text":"409"},"Update the dependencies array to be: [call, goBack, handleClick, isLoading, redirectValue, setTopBarConfig]",{"range":"410","text":"411"},"Update the dependencies array to be: [call, isLoading]",{"range":"412","text":"413"},"Update the dependencies array to be: [isLoading, setTopBarConfig]",{"range":"414","text":"415"},"Update the dependencies array to be: [call, song]",{"range":"416","text":"417"},"Update the dependencies array to be: [update, queue, documentClick, documentScroll]",{"range":"418","text":"419"},"Update the dependencies array to be: [call, isRadioOn]",{"range":"420","text":"421"},"Update the dependencies array to be: [setSearchConfig, setTopBarConfig]",{"range":"422","text":"423"},"Update the dependencies array to be: [call, input]",{"range":"424","text":"425"},[2011,2013],"[check]",[22439,22445],"[addToRecentlyPlayed, prevSong, setLyricText, song]",[27852,27866],"[canplay, ended, metadata, onpaused, onplaying, setQueue, setRepeatType, setSongPaused, shutdown, song, timeupdate, update, waiting]",[36201,36203],"[click]",[42110,42112],[12906,12910],"[list, no]",[13337,13339],[6776,6778],"[handleClick]",[8998,9000],"[handleScroll]",[12173,12184],"[isLoading, mouseOut, setTopBarConfig]",[12951,12962],"[call, goBack, handleClick, isLoading, redirectValue, setTopBarConfig]",[39903,39914],"[call, isLoading]",[2983,2994],"[isLoading, setTopBarConfig]",[22326,22332],"[call, song]",[22796,22810],"[update, queue, documentClick, documentScroll]",[1551,1553],"[call, isRadioOn]",[6815,6817],"[setSearchConfig, setTopBarConfig]",[29301,29308],"[call, input]"]