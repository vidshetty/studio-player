[{"F:\\F-Projects\\language_framework_library\\electronjs\\src\\index.js":"1","F:\\F-Projects\\language_framework_library\\electronjs\\src\\opening\\index.js":"2","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\index.js":"3","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\index.js":"4","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\index.js":"5","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\HomeScreen.js":"6","F:\\F-Projects\\language_framework_library\\electronjs\\src\\common.js":"7","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\AlbumView.js":"8","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Library.js":"9","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Queue.js":"10","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Radio.js":"11","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Search.js":"12"},{"size":1521,"mtime":1614441744515,"results":"13","hashOfConfig":"14"},{"size":26462,"mtime":1614322397888,"results":"15","hashOfConfig":"14"},{"size":26004,"mtime":1614441544059,"results":"16","hashOfConfig":"14"},{"size":14909,"mtime":1615560641688,"results":"17","hashOfConfig":"14"},{"size":8684,"mtime":1614441510512,"results":"18","hashOfConfig":"14"},{"size":14440,"mtime":1613818857725,"results":"19","hashOfConfig":"14"},{"size":7982,"mtime":1615529812988,"results":"20","hashOfConfig":"14"},{"size":25029,"mtime":1613190045712,"results":"21","hashOfConfig":"14"},{"size":4115,"mtime":1613547645854,"results":"22","hashOfConfig":"14"},{"size":13640,"mtime":1613205526459,"results":"23","hashOfConfig":"14"},{"size":2425,"mtime":1612003562897,"results":"24","hashOfConfig":"14"},{"size":11082,"mtime":1614499462258,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"bkz516",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"28"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"28"},"F:\\F-Projects\\language_framework_library\\electronjs\\src\\index.js",[],["60","61"],"F:\\F-Projects\\language_framework_library\\electronjs\\src\\opening\\index.js",["62","63"],"import { useState, useEffect, useRef } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n// import \"../css/openingstyles.css\";\r\nimport \"../css/opening2styles.css\";\r\n// import \"../css/loginstyles.css\";\r\n// import \"../css/signupstyles.css\";\r\n// import logo2 from \"../assets/colouredlogo.svg\";\r\nimport logo2 from \"../assets/aquamarinelogo.svg\";\r\nimport logo from \"../assets/blackandwhitelogo.svg\";\r\nimport {\r\n    wait,\r\n    CustomUseState,\r\n    homeClass,\r\n    tabGlobal,\r\n    playingGlobal,\r\n    albumGlobal,\r\n    queueGlobal,\r\n    sendRequest,\r\n    keepServersActive,\r\n    // keepButtonGlobal\r\n    topBarGlobal\r\n} from \"../common\";\r\nlet topBar, setup;\r\n\r\n\r\nconst Error = ({ msg }) => {\r\n    return(\r\n        <div className=\"errordiv\">\r\n            <p>Error: {msg}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\n// const Login = ({ shiftPage, setRedirectValue, setMainClass }) => {\r\n//     const [compClass, setCompClass] = useState(\"loginmain-fadein\");\r\n//     const [type, setType] = useState(\"password\");\r\n//     const [checkClass, setCheckClass] = useState(\"checkbox-start\");\r\n//     const [smallBallClass, setSmallBallClass] = useState(\"smallball-password\");\r\n//     const [loginErr, setLoginErr] = useState(false);\r\n//     const [isLoading, setIsLoading] = useState(\"Log In\");\r\n//     const [errMsg, setErrMsg] = useState(\"\");\r\n//     const emailRef = useRef();\r\n//     const passwordRef = useRef();\r\n\r\n//     const change = () => {\r\n//         if(type === \"text\") {\r\n//             setType(\"password\");\r\n//             setSmallBallClass(\"smallball-password\");\r\n//         } else {\r\n//             setType(\"text\");\r\n//             setSmallBallClass(\"smallball-text\");\r\n//         }\r\n//     };\r\n\r\n//     const checkbox = () => {\r\n//         if(checkClass === \"checkbox-start\") setCheckClass(\"checkbox-end\");\r\n//         else setCheckClass(\"checkbox-start\");\r\n//     };\r\n\r\n//     const submit = async () => {\r\n//         if(emailRef.current.value == \"\") {\r\n//             setErrMsg(\"Can't leave email empty\");\r\n//             setLoginErr(true);\r\n//         } else if (passwordRef.current.value == \"\") {\r\n//             setErrMsg(\"Can't leave password empty\");\r\n//             setLoginErr(true);\r\n//         } else {\r\n//             setIsLoading(\"Loading\");\r\n//             const res = await axios({\r\n//                 method: \"POST\",\r\n//                 url: `${baseLink}/login`,\r\n//                 data: {\r\n//                     em: emailRef.current.value,\r\n//                     pass: passwordRef.current.value\r\n//                 }\r\n//             });\r\n//             setIsLoading(\"Log In\");\r\n//             if (res.data.status === \"allowed\") {\r\n//                 if (checkClass === \"checkbox-end\") {\r\n//                     localStorage.setItem(\"email\",emailRef.current.value)\r\n//                     localStorage.setItem(\"password\",passwordRef.current.value)\r\n//                 }\r\n//                 setMainClass(\"main-end\");\r\n//                 setTimeout(() => {\r\n//                     setRedirectValue(true);\r\n//                 },1000);\r\n//             } else {\r\n//                 setErrMsg(\"Invalid credentials\");\r\n//                 setLoginErr(true);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const changePage = () => {\r\n//         setCompClass(\"loginmain-fadeout\");\r\n//         setTimeout(() => {\r\n//             shiftPage(false);\r\n//         },500);\r\n//     };\r\n\r\n//     const remError = () => {\r\n//         if(loginErr) {\r\n//             setTimeout(() => {\r\n//                 setLoginErr(false);\r\n//             },3000);\r\n//         }\r\n//     };\r\n//     remError();\r\n\r\n//     useEffect(() => {\r\n//         const email = localStorage.getItem(\"email\");\r\n//         const password = localStorage.getItem(\"password\");\r\n//         if (email != null && password != null) {\r\n//             emailRef.current.value = email;\r\n//             passwordRef.current.value = password;\r\n//             setCheckClass(\"checkbox-end\");\r\n//         }\r\n//     },[]);\r\n\r\n//     return(\r\n//         <div className={compClass}>\r\n//             <div className=\"logintitle\">\r\n//                 <p>Log in to continue.</p>\r\n//             </div>\r\n//             { loginErr ? <Error msg={errMsg}/> : <div className=\"empty\"></div> \r\n//             }\r\n//             <div className=\"email\">\r\n//                 <input type=\"email\" placeholder=\"Email\" spellCheck=\"false\" ref={emailRef} />\r\n//             </div>\r\n//             <div className=\"password\">\r\n//                 <div className=\"join\">\r\n//                     <input type={type} placeholder=\"Password\" spellCheck=\"false\" ref={passwordRef} />\r\n//                     <div className=\"viewdiv\" onClick={change}>\r\n//                         <div className={smallBallClass}></div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"remember\">\r\n//                 <p>Remember Me?</p>\r\n//                 <div className={checkClass} onClick={checkbox}>\r\n//                     <div className=\"ball\"></div>\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"login\">\r\n//                 <button onClick={submit}>{isLoading}</button>\r\n//             </div>\r\n//             <div className=\"gotosignup\">\r\n//                 <p>Not on Studio?</p>\r\n//                 <p onClick={changePage}>Sign Up</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const SignUp = ({ shiftPage }) => {\r\n//     const [compClass, setCompClass] = useState(\"signupmain-fadein\");\r\n//     const [loginErr, setLoginErr] = useState(false);\r\n//     const [type, setType] = useState(\"password\");\r\n//     const [smallBallClass, setSmallBallClass] = useState(\"smallball-password\");\r\n//     const [errMsg, setErrMsg] = useState(\"\");\r\n//     const emailRef = useRef();\r\n//     const passwordRef = useRef();\r\n//     const nameRef = useRef();\r\n//     const [isLoading, setIsLoading] = useState(\"Continue\");\r\n\r\n//     const change = () => {\r\n//         if(type === \"text\") {\r\n//             setType(\"password\");\r\n//             setSmallBallClass(\"smallball-password\");\r\n//         } else {\r\n//             setType(\"text\");\r\n//             setSmallBallClass(\"smallball-text\");\r\n//         }\r\n//     };\r\n\r\n//     const submit = async () => {\r\n//         if(emailRef.current.value === \"\") {\r\n//             setErrMsg(\"Can't leave email empty\");\r\n//             setLoginErr(true);\r\n//         } else if (passwordRef.current.value === \"\") {\r\n//             setErrMsg(\"Can't leave password empty\");\r\n//             setLoginErr(true);\r\n//         } else if (nameRef.current.value === \"\") {\r\n//             setErrMsg(\"Can't leave username empty\");\r\n//             setLoginErr(true);\r\n//         } else {\r\n//             setIsLoading(\"Loading\");\r\n//             const res = await axios({\r\n//                 method: \"POST\",\r\n//                 url: `${baseLink}/signup`,\r\n//                 data: {\r\n//                     em: emailRef.current.value,\r\n//                     pass: passwordRef.current.value,\r\n//                     name: nameRef.current.value\r\n//                 }\r\n//             });\r\n//             setIsLoading(\"Continue\");\r\n//             if (res.data.status === \"registered\") {\r\n//                 changePage();\r\n//             } else {\r\n//                 setErrMsg(\"Email already exists\");\r\n//                 setLoginErr(true);\r\n//             }\r\n//         }\r\n//     };\r\n\r\n//     const changePage = () => {\r\n//         setCompClass(\"signupmain-fadeout\");\r\n//         setTimeout(() => {\r\n//             shiftPage(true);\r\n//         },500);\r\n//     };\r\n\r\n//     const remError = () => {\r\n//         if(loginErr) {\r\n//             setTimeout(() => {\r\n//                 setLoginErr(false);\r\n//             },3000);\r\n//         }\r\n//     };\r\n//     remError();\r\n\r\n//     return(\r\n//         <div className={compClass}>\r\n//             <div className=\"title\">\r\n//                 <p>Sign up for free.</p>\r\n//             </div>\r\n//             { loginErr ? <Error msg={errMsg}/> : <div className=\"empty\"></div> \r\n//             }\r\n//             <div className=\"email\">\r\n//                 <input type=\"email\" placeholder=\"Email\" spellCheck=\"false\" ref={emailRef} />\r\n//             </div>\r\n//             <div className=\"password\">\r\n//                 <div className=\"join\">\r\n//                     <input type={type} placeholder=\"Password\" spellCheck=\"false\" ref={passwordRef} />\r\n//                     <div className=\"viewdiv\" onClick={change}>\r\n//                         <div className={smallBallClass}></div>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//             <div className=\"username\">\r\n//                 <input type=\"text\" placeholder=\"What do we call you?\" spellCheck=\"false\" ref={nameRef} />\r\n//             </div>\r\n//             <div className=\"signup\">\r\n//                 <button onClick={submit}>{isLoading}</button>\r\n//             </div>\r\n//             <div className=\"gotologin\">\r\n//                 <p>Already on Studio?</p>\r\n//                 <p onClick={changePage}>Log In</p>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// const Opening = () => {\r\n//     const [logoClass, setLogoClass] = useState(\"logo-start\");\r\n//     const [barClass, setBarClass] = useState(\"bar-initial\");\r\n//     const [mainClass, setMainClass] = useState(\"main-start\");\r\n//     const [redirectValue, setRedirectValue] = useState(false);\r\n//     const [logInScreen, setLogInScreen] = useState(true);\r\n\r\n//     const firstCheck = async () => {\r\n//         await setTimeout(async () => {\r\n//             // let res = { data: { status: \"\" } };\r\n//             let res;\r\n//             res = await axios({\r\n//                 method: \"GET\",\r\n//                 url: `${baseLink}/activateCheck`\r\n//             });\r\n//             // res.data.status = \"active\";\r\n//             if (res.data.status === \"active\") {\r\n//                 const token = localStorage.getItem(\"access\");\r\n//                 if (token === \"allowed\") {\r\n//                     setMainClass(\"main-end\");\r\n//                     setTimeout(() => {\r\n//                         setRedirectValue(true);\r\n//                     },1000);\r\n//                 } else {\r\n//                     setLogoClass(\"logo-mid\");\r\n//                     setBarClass(\"bar-start\");\r\n//                 }\r\n//             }\r\n//         },2000);\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         firstCheck();\r\n//     },[]);\r\n\r\n//     if(redirectValue) {\r\n//         return ( <Redirect to=\"/home/homescreen\" /> );\r\n//     }\r\n//     return(\r\n//         <div className={mainClass}>\r\n//             <div className={logoClass}>\r\n//                 <div className=\"left\">\r\n//                     <img className=\"logoimg\" src={logo} alt=\"logo\"/>\r\n//                 </div>\r\n//                 <div className=\"right\">\r\n//                     <p>Studio</p>\r\n//                 </div>\r\n//             </div>\r\n//             <div className={barClass}>\r\n//                 <div className=\"logincontainer\">\r\n//                     { logInScreen ? \r\n//                         <Login \r\n//                             shiftPage={setLogInScreen}\r\n//                             setRedirectValue={setRedirectValue}\r\n//                             setMainClass={setMainClass}\r\n//                         /> : \r\n//                         <SignUp \r\n//                             shiftPage={setLogInScreen}\r\n//                         /> }\r\n//                 </div>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// };\r\n\r\nconst Login2 = ({ setGoToLogin, setGoToSignUp, setMainClass, setRedirectValue }) => {\r\n    const [loginClass, setLoginClass] = useState(\"loginscreen-in\");\r\n    const [smallBallClass, setSmallBallClass] = useState(\"ball-password\");\r\n    const [type, setType] = useState(\"password\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [button, setButton] = useState(\"Log In\");\r\n    const [loginButton, setLoginButton] = useState(\"loginbutton\");\r\n    const [link, setLink] = useState(\"gotosignup\");\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [checkClass, setCheckClass] = useState(\"checkbox-start\");\r\n    const [,setClass] = CustomUseState(homeClass);\r\n    const [tab, setTab] = CustomUseState(tabGlobal);\r\n    // const [,setKeepButton] = CustomUseState(keepButtonGlobal);\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    topBar = topBarConfig;\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n\r\n    const fillIn = () => {\r\n        const text = localStorage.getItem(\"email\");\r\n        const pwd = localStorage.getItem(\"password\");\r\n        if (text !== null && pwd !== null) {\r\n            emailRef.current.value = text;\r\n            passwordRef.current.value = pwd;\r\n            setCheckClass(\"checkbox-end\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fillIn();\r\n    },[]);\r\n\r\n    const change = async () => {\r\n        setLoginClass(\"loginscreen-out\");\r\n        await wait(100);\r\n        setGoToLogin(false);\r\n        setGoToSignUp(true);\r\n    };\r\n\r\n    const goToMain = async () => {\r\n        // await setup();\r\n        setClass(\"homemain start\");\r\n        setMainClass(\"mainwindow-end\");\r\n        if (tab !== \"Home\") setTab(\"Home\");\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            button: false,\r\n            buttonFunc: () => {},\r\n            title: \"\",\r\n            bgColor: \"transparent\"\r\n        });\r\n        // setKeepButton(false);\r\n        await wait(500);\r\n        setRedirectValue(true);\r\n    };\r\n\r\n    const shift = () => {\r\n        if (type === \"password\") {\r\n            setType(\"text\");\r\n            setSmallBallClass(\"ball-text\");\r\n        } else {\r\n            setType(\"password\");\r\n            setSmallBallClass(\"ball-password\");\r\n        }\r\n    };\r\n\r\n    const checkbox = () => {\r\n        setCheckClass( checkClass === \"checkbox-start\" ?\r\n            \"checkbox-end\" : \"checkbox-start\" );\r\n    };\r\n\r\n    const submit = async () => {\r\n        if (emailRef.current.value === \"\") {\r\n            setIsError(true);\r\n            setMsg(\"Cannot leave email empty!\")\r\n            return;\r\n        }\r\n        if (passwordRef.current.value === \"\") {\r\n            setIsError(true);\r\n            setMsg(\"Cannot leave password empty!\");\r\n            return;\r\n        }\r\n        setButton(\"Logging you in....\");\r\n        setLoginButton(\"loginbutton-loading\");\r\n        setLink(\"gotosignup-loading\");\r\n        let res = await sendRequest({\r\n            method: \"POST\",\r\n            endpoint: \"/login\",\r\n            data: {\r\n                text: emailRef.current.value,\r\n                password: passwordRef.current.value\r\n            }\r\n        });\r\n        if (res.status === \"loggedin\") {\r\n            localStorage.setItem(\"token\",res.status);\r\n            localStorage.setItem(\"username\",res.username);\r\n            localStorage.setItem(\"userId\",res.userId);\r\n            if (checkClass === \"checkbox-end\") {\r\n                localStorage.setItem(\"email\",emailRef.current.value);\r\n                localStorage.setItem(\"password\",passwordRef.current.value);\r\n            }\r\n            goToMain();\r\n        } else {\r\n            setIsError(true);\r\n            setMsg(res.error);\r\n            setButton(\"Log In\");\r\n            setLoginButton(\"loginbutton\");\r\n            setLink(\"gotosignup\");\r\n        }\r\n    };\r\n\r\n    const remError = () => {\r\n        if (isError) {\r\n            setTimeout(() => {\r\n                setIsError(false);\r\n            },3000);\r\n        }\r\n    };\r\n    remError();\r\n\r\n    return(\r\n        <div className={loginClass}>\r\n            <div className=\"logocontainer\">\r\n                <div className=\"leftlogo\">\r\n                    <img src={logo} alt=\"Studio\" />\r\n                </div>\r\n                <div className=\"rightlogo\">\r\n                    <p>Studio</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"title\">\r\n                <p>Log in to continue.</p>\r\n            </div>\r\n            <div className=\"inputfields\">\r\n                {\r\n                    isError ? <Error msg={msg}/> : <div className=\"errordivreplacement\">\r\n                    </div>\r\n                }\r\n                <div className=\"email\">\r\n                    <input type=\"text\" name=\"email\" placeholder=\"Email / Username\" spellCheck=\"false\" ref={emailRef}/>\r\n                </div>\r\n                <div className=\"password\">\r\n                    <input type={type} name=\"password\" placeholder=\"Password\" ref={passwordRef}/>\r\n                    <div className=\"viewer\">\r\n                        <div className={smallBallClass} onClick={shift}></div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"remember\">\r\n                    <p>Remember Me?</p>\r\n                    <div className={checkClass} onClick={checkbox}>\r\n                        <div className=\"ball\"></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={loginButton}>\r\n                <button onClick={submit}>{button}</button>\r\n            </div>\r\n            <div className={link}>\r\n                <p>Not on Studio?</p><p onClick={change}>Sign Up</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SignUp2 = ({ setGoToLogin, setGoToSignUp }) => {\r\n    const [signUpClass, setSignUpClass] = useState(\"signupscreen-in\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [button, setButton] = useState(\"Sign Up\");\r\n    const [signUpButton, setSignUpButton] = useState(\"signupbutton\");\r\n    const [link, setLink] = useState(\"gotologin\");\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [type, setType] = useState(\"password\");\r\n    const [smallBallClass, setSmallBallClass] = useState(\"ball-password\");\r\n    const emailRef = useRef();\r\n    const passwordRef = useRef();\r\n    const usernameRef = useRef();\r\n\r\n    const change = async () => {\r\n        setSignUpClass(\"signupscreen-out\");\r\n        await wait(100);\r\n        setGoToSignUp(false);\r\n        setGoToLogin(true);\r\n    };\r\n\r\n    const shift = () => {\r\n        if (type === \"password\") {\r\n            setType(\"text\");\r\n            setSmallBallClass(\"ball-text\");\r\n        } else {\r\n            setType(\"password\");\r\n            setSmallBallClass(\"ball-password\");\r\n        }\r\n    };\r\n\r\n    const submit = async () => {\r\n        if (usernameRef.current.value === \"\") {\r\n            setIsError(true);\r\n            setMsg(\"Cannot leave username empty!\")\r\n            return;\r\n        }\r\n        if (emailRef.current.value === \"\") {\r\n            setIsError(true);\r\n            setMsg(\"Cannot leave email empty!\")\r\n            return;\r\n        }\r\n        const pattern = /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/;\r\n        if (!pattern.test(emailRef.current.value)) {\r\n            setIsError(true);\r\n            setMsg(\"Invalid email!\");\r\n            return;\r\n        }\r\n        if (passwordRef.current.value === \"\") {\r\n            setIsError(true);\r\n            setMsg(\"Cannot leave password empty!\");\r\n            return;\r\n        }\r\n        setButton(\"Signing you up....\");\r\n        setSignUpButton(\"signupbutton-loading\");\r\n        setLink(\"gotologin-loading\");\r\n        let res = await sendRequest({\r\n            method: \"POST\",\r\n            endpoint: `/signup`,\r\n            data: {\r\n                username: usernameRef.current.value,\r\n                email: emailRef.current.value,\r\n                password: passwordRef.current.value\r\n            }\r\n        });\r\n        if (res.status === \"registered\") {\r\n            change();\r\n        } else {\r\n            setIsError(true);\r\n            setMsg(res.error);\r\n            setButton(\"Sign Up\");\r\n            setSignUpButton(\"signupbutton\");\r\n            setLink(\"gotologin\");\r\n        }\r\n    };\r\n\r\n    const remError = () => {\r\n        if (isError) {\r\n            setTimeout(() => {\r\n                setIsError(false);\r\n            },3000);\r\n        }\r\n    };\r\n    remError();\r\n\r\n    return(\r\n        <div className={signUpClass}>\r\n            <div className=\"logocontainer\">\r\n                <div className=\"leftlogo\">\r\n                    <img src={logo} alt=\"Studio\" />\r\n                </div>\r\n                <div className=\"rightlogo\">\r\n                    <p>Studio</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"title\">\r\n                <p>Sign up for free.</p>\r\n            </div>\r\n            <div className=\"inputfields\">\r\n                {\r\n                    isError ? <Error msg={msg}/> : <div className=\"errordivreplacement\">\r\n                    </div>\r\n                }\r\n                <div className=\"username\">\r\n                    <input type=\"text\" name=\"username\" placeholder=\"Username\" spellCheck=\"false\" ref={usernameRef} />\r\n                </div>\r\n                <div className=\"email\">\r\n                    <input type=\"email\" name=\"email\" placeholder=\"Email\" spellCheck=\"false\" ref={emailRef}/>\r\n                </div>\r\n                <div className=\"password\">\r\n                    <input type={type} name=\"password\" placeholder=\"Password\" ref={passwordRef}/>\r\n                    <div className=\"viewer\">\r\n                        <div className={smallBallClass} onClick={shift}></div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={signUpButton}>\r\n                <button onClick={submit}>{button}</button>\r\n            </div>\r\n            <div className={link}>\r\n                <p>Already on Studio?</p><p onClick={change}>Log In</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Opening2 = () => {\r\n    const [redirectValue, setRedirectValue] = useState(false);\r\n    const [mainClass, setMainClass] = useState(\"mainwindow-start\");\r\n    const [loaderClass, setLoaderClass] = useState(\"openingloader hidden\");\r\n    const [goToLogin, setGoToLogin] = useState(false);\r\n    const [goToSignUp, setGoToSignUp] = useState(false);\r\n    const [,setClass] = CustomUseState(homeClass);\r\n    const [isPlaying, setIsPlaying] = CustomUseState(playingGlobal);\r\n    const [,setSong] = CustomUseState(albumGlobal);\r\n    const [,setQueue] = CustomUseState(queueGlobal);\r\n\r\n    setup = async () => {\r\n        let queue = JSON.parse(localStorage.getItem(\"queue\"));\r\n        if (queue !== null) {\r\n            setIsPlaying(true);\r\n            let nowplaying = JSON.parse(localStorage.getItem(\"nowplaying\"));\r\n            if (nowplaying !== null) {\r\n                const res = await sendRequest({\r\n                    method: \"POST\",\r\n                    endpoint: \"/updateUrls\",\r\n                    data: {\r\n                        list: queue.concat([nowplaying])\r\n                    }\r\n                });\r\n                queue = res.slice(0,res.length - 1);\r\n                nowplaying = res[res.length - 1];\r\n                localStorage.setItem(\"queue\",JSON.stringify(queue));\r\n                localStorage.setItem(\"nowplaying\",JSON.stringify(nowplaying));\r\n\r\n                const index = queue.findIndex(each => {\r\n                    if (each.Title && nowplaying.Title) {\r\n                        return each.Title === nowplaying.Title;\r\n                    } else {\r\n                        return each.Album === nowplaying.Album;\r\n                    }\r\n                });\r\n                if (nowplaying.url !== \"\") {\r\n                    nowplaying.backup = nowplaying.url;\r\n                    nowplaying.url = \"\";\r\n                }\r\n                queue[index] = nowplaying;\r\n                setSong(nowplaying);\r\n                setQueue(queue);\r\n            } else {\r\n                localStorage.removeItem(\"nowplaying\");\r\n                localStorage.removeItem(\"queue\");\r\n                setIsPlaying(false);\r\n            }\r\n        }\r\n    };\r\n\r\n    const call = async () => {\r\n        await wait(2000);\r\n        setLoaderClass(\"openingloader\");\r\n        let res;\r\n        keepServersActive();\r\n        res = await sendRequest({\r\n            method: \"GET\",\r\n            endpoint: \"/activateCheck\"\r\n        });\r\n        if (res.status === \"active\") {\r\n            const token = localStorage.getItem(\"token\");\r\n            if (token === null) {\r\n                setGoToLogin(true);\r\n            } else {\r\n                const id = localStorage.getItem(\"userId\");\r\n                if (id === null) {\r\n                    setGoToLogin(true);\r\n                    return;\r\n                } else {\r\n                    res = await sendRequest({\r\n                        method: \"GET\",\r\n                        endpoint: \"/checkLoginStatus\"\r\n                    });\r\n                    if (res.loggedOut) {\r\n                        setGoToLogin(true);\r\n                        return;\r\n                    }\r\n                }\r\n                sendRequest({\r\n                    method: \"GET\",\r\n                    endpoint: \"/recordTime\"\r\n                });\r\n                setClass(\"homemain start\");\r\n                await wait(500);\r\n                await setup();\r\n                setLoaderClass(\"openingloader hidden\");\r\n                await wait(500);\r\n                setMainClass(\"mainwindow-end\");\r\n                await wait(500);\r\n                setRedirectValue(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        call();\r\n    }, []);\r\n\r\n    if (redirectValue) {\r\n        return(\r\n            <Redirect to=\"/home/homescreen\" />\r\n        );\r\n    }\r\n    return(\r\n        <div className={mainClass}>\r\n            {\r\n                !goToLogin && !goToSignUp ?\r\n                <>\r\n                    <div className=\"logoholder\">\r\n                        <img src={logo2} alt=\"Studio\" />\r\n                    </div>\r\n                    <div className={loaderClass}>\r\n                        <div className=\"firstcircle\"></div>\r\n                        <div className=\"secondcircle\"></div>\r\n                        <div className=\"thirdcircle\"></div>\r\n                        <div className=\"fourthcircle\"></div>\r\n                    </div>\r\n                </> : \"\"\r\n            }\r\n            {\r\n                goToLogin ? <Login2 setGoToLogin={setGoToLogin} setGoToSignUp={setGoToSignUp}\r\n                    setMainClass={setMainClass} setRedirectValue={setRedirectValue}/> : \"\"\r\n            }\r\n            {\r\n                goToSignUp ? <SignUp2 setGoToLogin={setGoToLogin} setGoToSignUp={setGoToSignUp}/> : \"\"\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Opening2;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\index.js",["64","65","66","67","68","69","70","71","72"],"import \"../css/homestyles.css\";\r\nimport \"../css/playerstyles.css\";\r\nimport \"../css/albumview.css\";\r\nimport MainPanel from \"./mainpanel\";\r\nimport { useState, useEffect } from \"react\";\r\n// import Play from \"../assets/playwhite.png\";\r\nimport Play from \"../assets/playblack.png\";\r\n// import Pause from \"../assets/pausewhite.png\";\r\nimport Pause from \"../assets/pauseblack.png\";\r\n// import Close from \"../assets/deletewhite.svg\";\r\nimport Placeholder from \"../assets/placeholder.svg\";\r\nimport repeat from \"../assets/repeat.png\";\r\nimport repeatOne from \"../assets/repeatone.png\";\r\nimport noRepeat from \"../assets/norepeat.png\";\r\nimport shuffleoff from \"../assets/shufflewhite.png\";\r\nimport shuffleon from \"../assets/shuffleaquamarine.png\";\r\nimport next from \"../assets/nexttrack.png\";\r\nimport previous from \"../assets/previoustrack.png\";\r\nimport queuewhite from \"../assets/queuewhite.png\";\r\nimport queueaquamarine from \"../assets/queueaquamarine.png\";\r\nimport fullscreenaquamarine from \"../assets/fullscreenaquamarine.svg\";\r\nimport fullscreenwhite from \"../assets/fullscreenwhite.svg\";\r\nimport innerfullaquamarine from \"../assets/innerfullaquamarine.svg\";\r\nimport innerfullwhite from \"../assets/innerfullwhite.svg\";\r\nimport {\r\n    CustomUseState,\r\n    playingGlobal,\r\n    albumGlobal,\r\n    convertTime,\r\n    wait,\r\n    queueGlobal,\r\n    queueOpenedGlobal,\r\n    songIsPausedGlobal,\r\n    repeatTypeGlobal,\r\n    radioGlobal,\r\n    openerGlobal,\r\n    homeClass,\r\n    topBarGlobal,\r\n    sendRequest,\r\n    Timer,\r\n    fullScreenGlobal\r\n} from \"../common\";\r\nexport const audio = new Audio();\r\nlet mainVolume = 1;\r\nlet loaded = false;\r\nlet whichRepeat;\r\nlet ctrlKey = false;\r\nlet currentSongIndex = 0, isSongPlaying, actualQueue;\r\nlet volumerange, elapsedTime, duration, range, percent = 0, style;\r\nexport let pauseOrPlay;\r\nlet setVolume = 1, isBuffering, topBar, songPausedLocal;\r\nlet trackingTimer, screenLocal;\r\n// const { ipcRenderer } = window.electron;\r\n\r\n\r\nconst changeColor = percent => {\r\n    return `linear-gradient(to right, aquamarine ${percent}%, rgba(255,255,255,0.1) 0%)`;\r\n};\r\n\r\nconst changeColorVolume = (value) => {\r\n    return `linear-gradient(to right, white ${value}%, rgba(255,255,255,0.1) 0%)`;\r\n};\r\n\r\nconst trial = async () => {\r\n    // const res = await fetch(\"https://scriptwaale.herokuapp.com/listen/Bekhayali\");\r\n    // const reader = res.body.getReader();\r\n    // while (true) {\r\n    //     const { value, done } = await reader.read();\r\n    //     console.log(\"value\",value);\r\n    //     const blob = new Blob(value);\r\n    //     audio.src = URL.createObjectURL(blob);\r\n    //     audio.play();\r\n    //     if (done) break;\r\n    // }\r\n    // console.log(\"Response done\");\r\n    async function fetchAudio() {\r\n        const requestOptions = {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          }\r\n        };\r\n        let url = 'https://scriptwaale.herokuapp.com/listen/Bekhayali';\r\n        return fetch(url, requestOptions)\r\n          .then(res => {\r\n            // if (!res.ok)\r\n            //   throw new Error(`${res.status} = ${res.statusText}`);\r\n            var reader = res.body.getReader();\r\n            return reader\r\n              .read()\r\n              .then((result) => {\r\n                return result;\r\n              });\r\n          })\r\n      }\r\n    fetchAudio()\r\n      .then((response) => {\r\n        var blob = new Blob([response.value], { type: 'audio/mp3' });\r\n        var url = window.URL.createObjectURL(blob)\r\n        const music = new Audio();\r\n        music.src = url;\r\n        console.log(\"playing\");\r\n        music.play();\r\n      })\r\n      .catch((error) => {\r\n        // this.setState({\r\n        //     error: error.message\r\n        // });\r\n      });\r\n};\r\n\r\n\r\nconst Player = () => {\r\n    const [song, setSong] = CustomUseState(albumGlobal);\r\n    const [playerOn,setPlaying] = CustomUseState(playingGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    const [buffering, setBuffering] = useState(false);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [buttonshow, setButtonshow] = useState(false);\r\n    const [repeatType, setRepeatType] = CustomUseState(repeatTypeGlobal);\r\n    const [shuffle, setShuffle] = useState(false);\r\n    const [queueOpened, setQueueOpened] = CustomUseState(queueOpenedGlobal);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [screen, setScreen] = CustomUseState(fullScreenGlobal);\r\n    screenLocal = screen;\r\n    topBar = topBarConfig;\r\n    // const [, setTab] = CustomUseState(tabGlobal);\r\n    const [isRadioOn, setRadioOn] = CustomUseState(radioGlobal);\r\n    const [update, setUpdate] = useState(true);\r\n    actualQueue = queue;\r\n    currentSongIndex = queue.indexOf(song);\r\n    isSongPlaying = isPlaying;\r\n    isBuffering = buffering;\r\n    songPausedLocal = songPaused;\r\n    let playerOnLocal = playerOn;\r\n\r\n\r\n    const changeRepeat = () => {\r\n        localStorage.setItem(\"repeatType\",repeatType+1 > 2 ? 0 : repeatType+1);\r\n        whichRepeat = repeatType+1 > 2 ? 0 : repeatType+1;\r\n        setRepeatType(repeatType+1 > 2 ? 0 : repeatType+1);\r\n    };\r\n    pauseOrPlay = async () => {\r\n        if (song.url === \"\") {\r\n            const index = actualQueue.indexOf(song);\r\n            song.url = song.backup;\r\n            delete song.backup;\r\n            setSong(song);\r\n            actualQueue[index] = song;\r\n            setQueue(actualQueue);\r\n            setUpdate(!update);\r\n            return;\r\n        }\r\n        if (isSongPlaying) {\r\n            setSongPaused(true);\r\n            setIsPlaying(false);\r\n            // mainVolume = audio.volume;\r\n            // const reduce = setInterval(() => {\r\n            //     audio.volume = audio.volume - 0.2 >= 0 ? audio.volume - 0.2 : audio.volume;\r\n            // },50);\r\n            // await wait(800);\r\n            // clearInterval(reduce);\r\n            audio.pause();\r\n        } else {\r\n            setSongPaused(false);\r\n            setIsPlaying(true);\r\n            audio.play();\r\n            // const increase = setInterval(() => {\r\n            //     audio.volume = audio.volume + 0.2 <= mainVolume ? audio.volume + 0.2 : mainVolume;\r\n            // },50);\r\n            // await wait(800);\r\n            // clearInterval(increase);\r\n        }\r\n    };\r\n    const openQueue = () => {\r\n        if (queueOpened) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: false\r\n            });\r\n        }\r\n        setQueueOpened(!queueOpened);\r\n    };\r\n    const goToNext = () => {\r\n        if (actualQueue.length === 1) {\r\n            audio.currentTime = 0;\r\n        } else {\r\n            const nextIndex = currentSongIndex < actualQueue.length - 1 ? currentSongIndex + 1 : 0;\r\n            setSong(actualQueue[nextIndex]);\r\n            currentSongIndex = nextIndex;\r\n        }\r\n        setSongPaused(true);\r\n    };\r\n    const goToPrevious = () => {\r\n        setSongPaused(true);\r\n        if (actualQueue.length === 1 || audio.currentTime > 10) {\r\n            audio.currentTime = 0;\r\n            trackingTimer = null;\r\n            trackingTimer = new Timer(30, addToRecentlyPlayed);\r\n            if (!trackingTimer.hasStarted()) trackingTimer.start();\r\n        } else {\r\n            const index = actualQueue.indexOf(song);\r\n            setSong(index === 0 ? actualQueue[actualQueue.length-1] : actualQueue[index-1]);\r\n        }\r\n    };\r\n    const shutdown = () => {\r\n        setPlaying(false);\r\n        audio.src = \"\";\r\n        setSong({});\r\n        localStorage.removeItem(\"queue\");\r\n        setQueue([]);\r\n        setRadioOn(false);\r\n        if (queueOpened) setQueueOpened(!queueOpened);\r\n    };\r\n    const randomize = (arr) => {\r\n        let i, len = arr.length, rand;\r\n        for (i=len-1; i>0; i--) {\r\n            rand = Math.floor(Math.random() * len);\r\n            [arr[i], arr[rand]] = [arr[rand], arr[i]];\r\n        }\r\n        arr.splice(0,0,song);\r\n        return arr;\r\n    };\r\n    const shuffleHandler = () => {\r\n        if (!shuffle && actualQueue.length > 3) {\r\n            const dummyQueue = actualQueue;\r\n            const index = dummyQueue.indexOf(song);\r\n            [dummyQueue[0], dummyQueue[index]] = [dummyQueue[index], dummyQueue[0]];\r\n            const shuffled = randomize(dummyQueue.slice(1,actualQueue.length));\r\n            console.log(\"shuffled\",shuffled);\r\n            localStorage.setItem(\"queue\",JSON.stringify(shuffled));\r\n            setQueue(shuffled);\r\n            setShuffle(!shuffle);\r\n        }\r\n        if (shuffle) {\r\n            setShuffle(!shuffle);\r\n        }\r\n    };\r\n\r\n\r\n    const volumeinput = (e) => {\r\n        volumerange.style.background = changeColorVolume(volumerange.value);\r\n        audio.volume = volumerange.value/100;\r\n        mainVolume = volumerange.value/100;\r\n        setVolume = volumerange.value/100;\r\n    };\r\n    const volumechange = (e) => {\r\n        volumerange.style.background = changeColorVolume(volumerange.value);\r\n        audio.volume = volumerange.value/100;\r\n        mainVolume = volumerange.value/100;\r\n        setVolume = volumerange.value/100;\r\n    };\r\n\r\n\r\n    const progressinput = (e) => {\r\n        range.focus();\r\n        elapsedTime.innerText = convertTime(range.value);\r\n        percent = range.value/range.max * 100;\r\n        range.style.background = changeColor(percent);\r\n    };\r\n    const progresschange = (e) => {\r\n        audio.currentTime = range.value;\r\n        audio.volume = mainVolume;\r\n        range.blur();\r\n        percent = range.value/range.max * 100;\r\n        range.style.background = changeColor(percent);\r\n    };\r\n\r\n\r\n    const metadata = (e) => {\r\n        loaded = true;\r\n        range.max = audio.duration;\r\n        duration.innerText = convertTime(audio.duration);\r\n        // audio.play();\r\n        setBuffering(false);\r\n        setSongPaused(false);\r\n        audio.currentTime = 0;\r\n        if (!trackingTimer.hasStarted()) trackingTimer.start();\r\n    };\r\n    const waiting = (e) => {\r\n        setBuffering(true);\r\n        setSongPaused(true);\r\n        if (trackingTimer.canPause()) {\r\n            trackingTimer.pause();\r\n        }\r\n    };\r\n    const timeupdate = (e) => {\r\n        // if (elapsedTime.innerText === \"0: 10\") audio.currentTime = audio.duration - 10;\r\n        elapsedTime.innerText = convertTime(audio.currentTime);\r\n        if(loaded) duration.innerText = `-${convertTime(audio.duration - audio.currentTime)}`;\r\n        if ((range === document.activeElement)) {\r\n        } else {\r\n            range.value = audio.currentTime;\r\n            percent = range.value/range.max * 100;\r\n            range.style.background = changeColor(percent);\r\n        }\r\n    };\r\n    const canplay = (e) => {\r\n        setBuffering(false);\r\n        audio.play();\r\n        setSongPaused(false);\r\n        if (trackingTimer.canContinue()) {\r\n            trackingTimer.continue();\r\n        }\r\n    };\r\n    const onplay = (e) => {\r\n        setIsPlaying(true);\r\n        setSongPaused(false);\r\n    };\r\n    const ended = (e) => {\r\n        range.value = 0;\r\n        elapsedTime.innerText = \"0: 00\";\r\n        if (!trackingTimer.hasFinished()) {\r\n            trackingTimer.stop();\r\n        }\r\n        if (whichRepeat === 2) {\r\n            audio.play();\r\n            trackingTimer = null;\r\n            trackingTimer = new Timer(30, addToRecentlyPlayed);\r\n            if (!trackingTimer.hasStarted()) trackingTimer.start();\r\n        } else if (whichRepeat === 0) {\r\n            setIsPlaying(false);\r\n            setSongPaused(true);\r\n            range.style.background = changeColor(0);\r\n        } else {\r\n            if (queue.length === 1) {\r\n                audio.play();\r\n            } else {\r\n                goToNext();\r\n            }\r\n        }\r\n    };\r\n    const onpaused = async (e) => {\r\n        setSongPaused(true);\r\n        setIsPlaying(false);\r\n        if (trackingTimer.canPause()) {\r\n            trackingTimer.pause();\r\n        }\r\n        // ipcRenderer.send(\"paused\");\r\n        // await wait(1000);\r\n        // audio.volume = 0;\r\n    };\r\n    const onplaying = async (e) => {\r\n        setSongPaused(false);\r\n        setIsPlaying(true);\r\n        if (trackingTimer.canContinue()) {\r\n            trackingTimer.continue();\r\n        }\r\n        // ipcRenderer.send(\"playing\");\r\n        // await wait(1000);\r\n        // audio.volume = mainVolume;\r\n        // pauseOrPlay();\r\n    };\r\n\r\n\r\n    const onkeydown = (e) => {\r\n        if (e.keyCode === 17) {\r\n            ctrlKey = true;\r\n        }\r\n        if (e.keyCode === 32 && ctrlKey && !isBuffering) {\r\n            e.preventDefault();\r\n            pauseOrPlay();\r\n        }\r\n        if (e.keyCode === 78 && ctrlKey) {\r\n            e.preventDefault();\r\n            goToNext();\r\n        }\r\n        if (e.keyCode === 80 && ctrlKey) {\r\n            e.preventDefault();\r\n            goToPrevious();\r\n        }\r\n        if (e.keyCode === 39 && ctrlKey) {\r\n            const duration = audio.duration;\r\n            const time = audio.currentTime;\r\n            if (time + 10 < duration) {\r\n                audio.currentTime = time + 10;\r\n            }\r\n        }\r\n        if (e.keyCode === 37 && ctrlKey) {\r\n            const time = audio.currentTime;\r\n            if (time - 10 > 0) {\r\n                audio.currentTime = time - 10;\r\n            }\r\n        }\r\n    };\r\n    const onkeyup = (e) => {\r\n        if (e.keyCode === 17) {\r\n            ctrlKey = false;\r\n        }\r\n    };\r\n\r\n    const lessen = () => {\r\n        const split = song.Color.split(\",\");\r\n        split[3] = \"0.3)\";\r\n        return split.join(\",\");\r\n    };\r\n\r\n    const addToRecentlyPlayed = () => {\r\n        sendRequest({\r\n            method: \"POST\",\r\n            endpoint: \"/addToRecentlyPlayed\",\r\n            data: {\r\n                album: song.Album\r\n            }\r\n        });\r\n    };\r\n\r\n    const screenSetting = () => {\r\n        if (playerOnLocal) {\r\n            setScreen({\r\n                ...screenLocal,\r\n                show: !screenLocal.show\r\n            });\r\n            // ipcRenderer.send(\"full\");\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        trackingTimer = new Timer(30,addToRecentlyPlayed);\r\n        return () => {\r\n            trackingTimer = null;\r\n        };\r\n    },[song]);\r\n\r\n    useEffect(() => {\r\n        const setUp = async () => {\r\n            audio.volume = setVolume;\r\n            elapsedTime = document.querySelector(\".elapsedtime\");\r\n            duration = document.querySelector(\".progressduration\");\r\n            range = document.querySelector(\".range\");\r\n            volumerange = document.querySelector(\".volumerange\");\r\n            const rType = parseInt(localStorage.getItem(\"repeatType\"));\r\n            whichRepeat = 0;\r\n            if (rType) {\r\n                setRepeatType(rType);\r\n                whichRepeat = rType;\r\n            }\r\n\r\n            document.addEventListener(\"keydown\",onkeydown);\r\n            document.addEventListener(\"keyup\",onkeyup);\r\n\r\n            volumerange.value = audio.volume * 100;\r\n            volumerange.style.background = changeColorVolume(volumerange.value);\r\n            volumerange.addEventListener(\"input\",volumeinput);\r\n            volumerange.addEventListener(\"change\",volumechange);\r\n            range.addEventListener(\"input\",progressinput);\r\n            range.addEventListener(\"change\",progresschange);\r\n\r\n            // setIsPlaying(true);\r\n            percent = 0;\r\n            duration.innerText = \"0: 00\";\r\n            loaded = false;\r\n            if (Object.keys(song).length !== 0) {\r\n                // if (song.url !== \"\") {\r\n                //     const link = await sendRequest({\r\n                //         method: \"POST\",\r\n                //         endpoint: \"/getUrl\",\r\n                //         data: {\r\n                //             title: song.Type === \"Single\" ? song.Album : song.Title\r\n                //         }\r\n                //     });\r\n                //     audio.src = link;\r\n                // } else {\r\n                    audio.src = song.url;\r\n                // }\r\n            } else {\r\n                shutdown();\r\n            }\r\n\r\n            if (song.url !== \"\") {\r\n                setIsPlaying(true);\r\n                setBuffering(true);\r\n                audio.addEventListener(\"loadedmetadata\",metadata);\r\n                audio.addEventListener(\"waiting\",waiting);\r\n                audio.addEventListener(\"timeupdate\",timeupdate);\r\n                audio.addEventListener(\"canplay\",canplay);\r\n                audio.addEventListener(\"play\",onplay);\r\n                audio.addEventListener(\"ended\",ended);\r\n                audio.addEventListener(\"pause\",onpaused);\r\n                audio.addEventListener(\"playing\",onplaying);\r\n                localStorage.setItem(\"nowplaying\",JSON.stringify(song));\r\n            } else {\r\n                setSongPaused(true);\r\n            }\r\n        };\r\n\r\n        setUp();\r\n\r\n        return () => {\r\n            if (song.url === \"\") {\r\n                const index = actualQueue.indexOf(song);\r\n                console.log(\"actualindex\",index);\r\n                song.url = song.backup;\r\n                delete song.backup;\r\n                actualQueue[index] = song;\r\n                setQueue(actualQueue);\r\n            }\r\n            document.removeEventListener(\"keydown\",onkeydown);\r\n            document.removeEventListener(\"keyup\",onkeyup);\r\n\r\n            volumerange.removeEventListener(\"input\",volumeinput);\r\n            volumerange.removeEventListener(\"change\",volumechange);\r\n            range.removeEventListener(\"input\",progressinput);\r\n            range.removeEventListener(\"change\",progresschange);\r\n\r\n            audio.removeEventListener(\"loadedmetadata\",metadata);\r\n            audio.removeEventListener(\"waiting\",waiting);\r\n            audio.removeEventListener(\"timeupdate\",timeupdate);\r\n            audio.removeEventListener(\"canplay\",canplay);\r\n            audio.removeEventListener(\"play\",onplay);\r\n            audio.removeEventListener(\"ended\",ended);\r\n            audio.removeEventListener(\"pause\",onpaused);\r\n            audio.removeEventListener(\"playing\",onplaying);\r\n        };\r\n\r\n    },[song, update]);\r\n\r\n    return(\r\n        <div className=\"outerplayer\">\r\n            <div className=\"player\"\r\n            // style={{ backgroundColor: `${lessen()}` }}\r\n            // style={{ backgroundColor: `#181818` }}\r\n            style={{ backgroundColor: `#202020` }}\r\n            >\r\n                <div className=\"innerplayer\">\r\n                    <div className=\"albumpart\">\r\n                        { Object.keys(song).length !== 0 ?\r\n                            <>\r\n                            <div className=\"albumthumbnail\" style={{\r\n                                backgroundImage: `url(${Placeholder})`,\r\n                                backgroundSize: \"cover\"\r\n                            }}>\r\n                                <img src={song.Thumbnail || \"\"} alt=\"\" />\r\n                            </div>\r\n                            <div className=\"songdetails\">\r\n                                <p className=\"songtitle\">{song.Title || song.Album}</p>\r\n                                <p className=\"songartists\">{song.Artist}</p>\r\n                            </div></> : \"\"\r\n                        }\r\n                    </div>\r\n                    <div className=\"playerpart\">\r\n                        <div className=\"controlsdiv\">\r\n                            <div className=\"shuffle\" onClick={shuffleHandler}>\r\n                                { !isRadioOn ? <img src={shuffle ? shuffleon : shuffleoff} alt=\"\"/> : \"\" }\r\n                            </div>\r\n                            <div className=\"back\" onClick={goToPrevious}>\r\n                                <img src={previous} alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"middle\">\r\n                                { Object.keys(song).length !== 0 ?\r\n                                    <>\r\n                                    {\r\n                                        buffering ? <div className=\"bufferloader\"></div> : \r\n                                        <div className=\"mainplay\" onClick={pauseOrPlay}>\r\n                                            <img src={ isSongPlaying ? Pause : Play } alt=\"\" />\r\n                                        </div>\r\n                                    }\r\n                                    </> :\r\n                                    <>\r\n                                    <div className=\"mainplay\">\r\n                                        <img src={Play} alt=\"\" />\r\n                                    </div> \r\n                                    </>\r\n                                }\r\n                            </div>\r\n                            <div className=\"forward\" onClick={goToNext}>\r\n                                <img src={next} alt=\"\"/>\r\n                            </div>\r\n                            <div className=\"repeat\">\r\n                                <img src={\r\n                                    repeatType === 0 ? noRepeat :\r\n                                    repeatType === 1 ? repeat : repeatOne\r\n                                } alt=\"\" onClick={changeRepeat} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"progressbar\">\r\n                            <div className=\"elapsedtime\">0: 00</div>\r\n                            <div className=\"progresscontainer\">\r\n                                <input type=\"range\" min=\"0\" defaultValue=\"0\" className=\"range\" />\r\n                            </div>\r\n                            <div className=\"progressduration\">0: 00</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"volumepart\">\r\n                        {\r\n                            screenLocal.show ? \"\" :\r\n                            <div className=\"queueopener\" onClick={openQueue}>\r\n                                <img src={queueOpened ? queueaquamarine : queuewhite} alt=\"\"/>\r\n                            </div>\r\n                        }\r\n                        <div className=\"volumerocker\">\r\n                            {/* <div className=\"volumebutton\">\r\n                                <img alt=\"\" />\r\n                            </div> */}\r\n                            <div className=\"volumeinput\">\r\n                                <input type=\"range\" min=\"0\" max=\"100\" defaultValue=\"100\" className=\"volumerange\" />\r\n                            </div>\r\n                        </div>\r\n                        {/* { Object.keys(song).length !== 0 ?\r\n                            <div className=\"destroyplayer\" onClick={shutdown}>\r\n                                <img src={Close} alt=\"\" />\r\n                            </div> : \"\"\r\n                        } */}\r\n                        <div className=\"fullscreenbutton\"\r\n                        onClick={screenSetting}\r\n                        onMouseOver={() => setButtonshow(true)}\r\n                        onMouseOut={() => setButtonshow(false)}\r\n                        >\r\n                            <img src={ screenLocal.show ? (buttonshow ? innerfullaquamarine : innerfullwhite) : \r\n                                (buttonshow ? fullscreenaquamarine : fullscreenwhite) } alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport const Opener = () => {\r\n    const [openerDetails,] = CustomUseState(openerGlobal);\r\n    const { open, xValue, yValue, type = \"\", data = [] } = openerDetails;\r\n    style = {\r\n        top: `${yValue}px`,\r\n        left: `${xValue}px`\r\n    };\r\n\r\n    if (!open) {\r\n        return \"\";\r\n    }\r\n    // if (type === \"album\" || type === \"song\") {\r\n        return(\r\n            <div className=\"opener\" style={style}>\r\n                { data.length !== 0 ?\r\n                    data.map(menu => {\r\n                        return(\r\n                            <div className=\"rowinmenu\" onClick={menu.func}>\r\n                                <div className=\"rowtext\">{menu.name}</div>\r\n                            </div>\r\n                        );\r\n                    })\r\n                  : \"\"\r\n                }\r\n            </div>\r\n        );\r\n    // }\r\n};\r\n\r\nconst FullScreen = () => {\r\n    const [song,] = CustomUseState(albumGlobal);\r\n\r\n    const lessen = value => {\r\n        let color = song.Color.split(\",\");\r\n        color[3] = `${value}`;\r\n        color = color.join(\",\");\r\n        return color;\r\n    };\r\n    \r\n    return(\r\n        <div className=\"fulldisplay\">\r\n            <div className=\"innerfulldisplay\"\r\n            // style={{ background: `linear-gradient(to bottom,${song.Color || \"\"},${song.Color || \"\"},black` }}\r\n            // style={{ background: `linear-gradient(to bottom,black,${lessen(0.5)},${lessen(0.5)},black` }}\r\n            // style={{ background: `${lessen(0.3)}` }}\r\n            style={{ background: `#7fffd430` }}\r\n            // style={{ background: `#252525` }}\r\n            // style={{ background: `radial-gradient(${lessen(1)},${lessen(1)},black)` }}\r\n            >\r\n                <div className=\"imageholder\"\r\n                // style={{ backgroundImage: `url(${song.Thumbnail})`, backgroundSize: \"cover\" }}\r\n                >\r\n                    {/* <div className=\"innerimageholder\">\r\n                    </div> */}\r\n                    <img src={song.Thumbnail} alt=\"\"/>\r\n                </div>\r\n                <div className=\"bottombar\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Home = () => {\r\n    const [playing,] = CustomUseState(playingGlobal);\r\n    const [name,] = CustomUseState(homeClass);\r\n    const [screen, setScreen] = CustomUseState(fullScreenGlobal);\r\n\r\n    return(\r\n        <div className={name}>\r\n            <Opener/>\r\n            <MainPanel/>\r\n            { screen.show ? <FullScreen/> : \"\" }\r\n            { playing ? <Player/> : \"\" }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\index.js",["73","74","75","76","77","78","79"],"F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\index.js",["80","81"],"import \"../../../css/homestyles.css\";\r\nimport \"../../../css/albumview.css\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport HomeScreen from \"./HomeScreen\";\r\nimport AlbumView from \"./AlbumView\";\r\nimport Library from \"./Library\";\r\nimport Radio from \"./Radio\";\r\nimport Search from \"./Search\";\r\nimport back from \"../../../assets/backbutton.png\";\r\nimport dropdown from \"../../../assets/dropdown.png\";\r\nimport SearchIcon from \"../../../assets/searchicon.svg\";\r\nimport Close from \"../../../assets/blackclose.png\";\r\nimport { \r\n    CustomUseState,\r\n    openerGlobal,\r\n    homeClass,\r\n    wait,\r\n    sendRequest,\r\n    albumGlobal,\r\n    topBarGlobal,\r\n    searchBarGlobal,\r\n} from \"../../../common\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nlet actualIsOpen, topBar, timeout = undefined, searchBar;\r\n// const { ipcRenderer } =  window.electron;\r\n\r\n\r\nexport const MidPanelLoader = () => {\r\n    return(\r\n        <div className=\"loader\">\r\n            <div className=\"loaderinner\">\r\n                <div className=\"one\"></div>\r\n                <div className=\"two\"></div>\r\n                <div className=\"three\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst NewReleases = () => {\r\n    return(\r\n        <div className=\"third\"></div>\r\n    );\r\n};\r\n\r\nconst SearchBar = () => {\r\n    const [searchConfig, setSearchConfig] = CustomUseState(searchBarGlobal);\r\n    searchBar = searchConfig;\r\n\r\n    const call = async () => {\r\n        timeout = undefined;\r\n        let res;\r\n        if (searchBar.input !== \"\") {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                callLoading: true\r\n            });\r\n            res = await sendRequest({\r\n                method: \"GET\",\r\n                endpoint: `/search?name=${searchBar.input}`\r\n            });\r\n            console.log(\"res\",res);\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                result: res,\r\n                callLoading: false\r\n            });\r\n        } else {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                callLoading: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleInput = e => {\r\n        if (e.target.value) {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                input: e.target.value,\r\n                callLoading: true,\r\n                result: {}\r\n            }); \r\n        } else {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                input: e.target.value,\r\n                callLoading: true\r\n            });\r\n        }\r\n        // setInput(e.target.value);\r\n        if (timeout) clearTimeout(timeout);\r\n        timeout = setTimeout(call,500);\r\n    };\r\n\r\n    const clearInput = e => {\r\n        // setInput(\"\");\r\n        // setResult({ songs: {}, albums: {} });\r\n        setSearchConfig({\r\n            ...searchBar,\r\n            input: \"\",\r\n            result: { songs: {}, albums: {} }\r\n        });\r\n        timeout = undefined;\r\n    };\r\n\r\n    if (searchBar.show) {\r\n        return(\r\n            <div className=\"searchrelated\">\r\n                <div className=\"searchbar\">\r\n                    <div className=\"searchimg\">\r\n                        <img src={SearchIcon} alt=\"\" />\r\n                    </div>\r\n                    <input type=\"text\" value={searchBar.input} placeholder=\"Search for Songs or Albums\"\r\n                    className=\"searchinput\" spellCheck=\"false\" onInput={handleInput} autoFocus={true}/>\r\n                    {\r\n                        searchBar.input !== \"\" ?\r\n                        <div className=\"clearinput\">\r\n                            <img src={Close} alt=\"\" onClick={clearInput} />\r\n                        </div> : <div style={{ width: \"50px\", height: \"100%\" }}></div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    return <></>;\r\n};\r\n\r\nconst ProfileBar = () => {\r\n    const userName = localStorage.getItem(\"username\");\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [redirectValue, setRedirectValue] = useState({ status: false, to: \"\" });\r\n    const [,setClass] = CustomUseState(homeClass);\r\n    const [,setSong] = CustomUseState(albumGlobal);\r\n    const [topBarConfig,] = CustomUseState(topBarGlobal);\r\n    actualIsOpen = openerDetails.open;\r\n    topBar = topBarConfig;\r\n    let { button, buttonFunc, title, bgColor } = topBar;\r\n\r\n    const min = () => {\r\n        // ipcRenderer.send(\"minimize\");\r\n        // ipcRenderer.send(\"full\");\r\n    };\r\n\r\n    // const max = () => {\r\n    //     ipcRenderer.send(\"maximize\");\r\n    // };\r\n\r\n    const close = () => {\r\n        // ipcRenderer.send(\"close\");\r\n    };\r\n\r\n    const handleClick = (e) => {\r\n        const list = [\"rowinmenu\",\"rowtext\"];\r\n        if (list.indexOf(e.target.className) === -1 && actualIsOpen) {\r\n            setOpenerDetails({\r\n                open: false,\r\n                xValue: 0,\r\n                yValue: 0,\r\n                type: null\r\n            });\r\n        }\r\n        // setOpenerDetails({ ...openerDetails, open: false });\r\n    };\r\n\r\n    const modifyLocalStorage = async () => {\r\n        let text = localStorage.getItem(\"email\");\r\n        let password = localStorage.getItem(\"password\");\r\n        await wait(1000);\r\n        localStorage.clear();\r\n        localStorage.setItem(\"email\",text);\r\n        localStorage.setItem(\"password\",password);\r\n        await wait(1000);\r\n        sessionStorage.clear();\r\n    };\r\n\r\n    const logOut = async () => {\r\n        modifyLocalStorage();\r\n        sendRequest({\r\n            method: \"GET\",\r\n            endpoint: `/logout`\r\n        });\r\n        setClass(\"homemain end\");\r\n        setSong({});\r\n        await wait(500);\r\n        setRedirectValue({ status: true, to: \"/\" });\r\n        setOpenerDetails({ ...openerDetails, open: false });\r\n    };\r\n\r\n    const openNew = async () => {\r\n        // ipcRenderer.send(\"opennew\");\r\n    };\r\n\r\n    const handleMenu = (e) => {\r\n        e.stopPropagation();\r\n        setOpenerDetails({\r\n            open: !actualIsOpen,\r\n            yValue: e.clientY + 10,\r\n            xValue: e.clientX - 200,\r\n            type: \"album\",\r\n            data: [\r\n                // {\r\n                //     name: \"Account\",\r\n                //     func: openNew\r\n                // },\r\n                {\r\n                    name: \"Log out\",\r\n                    func: logOut\r\n                }\r\n            ]\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousedown\",handleClick);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\",handleClick);\r\n        }\r\n    },[]);\r\n\r\n\r\n    if (redirectValue.status) {\r\n        return <Redirect to={redirectValue.to} />\r\n    }\r\n    return(\r\n        <div className=\"entiretop\"\r\n        style={ bgColor === \"transparent\" ? { backgroundColor: \"transparent\" } : { backgroundColor: \"#121212\" } }\r\n        >\r\n            <div className=\"topbar\" style={{backgroundColor: bgColor}}>\r\n                <SearchBar/>\r\n                { button ?\r\n                    <div className=\"backbutton\" onClick={buttonFunc}>\r\n                        <img src={back} alt=\"\"/>\r\n                    </div> : \"\"\r\n                }\r\n                {\r\n                    title ? \r\n                    <div className=\"toptitlediv\">{title}</div> : \"\"\r\n                }\r\n                <div className=\"profilebardiv\">\r\n                    <div className=\"name\">{userName}</div>\r\n                    <div className=\"logoutbutton\">\r\n                        <img src={dropdown} alt=\"\" onClick={handleMenu}/>\r\n                    </div>\r\n                </div>\r\n                <div className=\"topbuttons\">\r\n                    <div onClick={min} className=\"minimize\"></div>\r\n                    {/* <div onClick={max} className=\"maximize\"></div> */}\r\n                    <div onClick={close} className=\"close\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Mid = () => {\r\n    const [playing,] = useState(false);\r\n\r\n    return(\r\n        <div className={ playing ? \"midmain-with-player\" : \"midmain-without-player\" }>\r\n            <ProfileBar/>\r\n            <Switch>\r\n                <Route path=\"/home/homescreen\"><HomeScreen/></Route>\r\n                <Route path=\"/home/search\"><Search/></Route>\r\n                <Route path=\"/home/new-releases\"><NewReleases/></Route>\r\n                <Route path=\"/home/album/:name\"><AlbumView/></Route>\r\n                <Route path=\"/home/library\"><Library/></Route>\r\n                <Route path=\"/home/radio\"><Radio/></Route>\r\n            </Switch>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Mid;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\HomeScreen.js",["82","83","84"],"import \"../../../css/homestyles.css\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport playbutton from \"../../../assets/playwhite.png\";\r\nimport pausebutton from \"../../../assets/pausewhite.png\";\r\nimport Close from \"../../../assets/deletewhite.svg\";\r\nimport Placeholder from \"../../../assets/placeholder.svg\";\r\nimport {\r\n    CustomUseState,\r\n    routesGlobal,\r\n    queueOpenedGlobal,\r\n    sendRequest,\r\n    topBarGlobal,\r\n    openerGlobal,\r\n    albumGlobal,\r\n    songIsPausedGlobal,\r\n    playingGlobal,\r\n    queueGlobal,\r\n    topBgColorGlobal\r\n} from \"../../../common\";\r\nimport Queue from \"./Queue\";\r\nimport { pauseOrPlay } from \"../../../homepage\";\r\nlet topBar, actualIsOpen;\r\n\r\n\r\nconst EachInList = ({ addCloseButton, closeFunc, item }) => {\r\n    const [routes, setRoutes] = CustomUseState(routesGlobal);\r\n    const [redirectTo, setRedirectTo] = useState(\"\");\r\n    const [song, setAlbumForPlayer] = CustomUseState(albumGlobal);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [, setQueue] = CustomUseState(queueGlobal);\r\n    let songPausedLocal = songPaused;\r\n\r\n\r\n    const display = item => {\r\n        routes.push(`/home/album/${item.Album}`);\r\n        setRoutes(routes);\r\n        setRedirectTo(`${item.Album}`);\r\n    };\r\n\r\n    const handlePlayPause = (e) => {\r\n        e.stopPropagation();\r\n        if (song.Album === item.Album) {\r\n            pauseOrPlay();\r\n            return;\r\n        }\r\n        const main = item.Type === \"Album\" ? item.Tracks : [item];\r\n        if (!playing) setPlaying(true);\r\n        if (item.Type === \"Single\") {\r\n            setQueue(main);\r\n            setAlbumForPlayer(main[0]);\r\n        } else {\r\n            main.forEach(song => {\r\n                song.Album = item.Album;\r\n                song.Thumbnail = item.Thumbnail;\r\n                song.Color = item.Color;\r\n            });\r\n            setQueue(main);\r\n            setAlbumForPlayer(main[0]);\r\n        }\r\n        localStorage.setItem(\"queue\",JSON.stringify(main));\r\n        setSongPaused(true);\r\n    };\r\n\r\n    const handleMenu = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    if (redirectTo !== \"\") {\r\n        return <Redirect to={`/home/album/${redirectTo}`} />\r\n    }\r\n    return(\r\n        <div className=\"cover\">\r\n            {\r\n                addCloseButton ? \r\n                <div className=\"crossinsearch\" onClick={() => closeFunc(item)}>\r\n                    <img src={Close} alt=\"\" />\r\n                </div> : \"\"\r\n            }\r\n            <div className=\"inner\" \r\n            onClick={() => display(item)}\r\n            onContextMenu={handleMenu}\r\n            >\r\n                {\r\n                    // noBg ?\r\n                    // <img src={item.Thumbnail} alt=\"\" className=\"innercoverimg\"/> :\r\n                    // <div className=\"coverimg\"\r\n                    // style={{ backgroundImage: `url(${Placeholder})`, backgroundSize: \"cover\" }}\r\n                    // >\r\n                        <img src={item.Thumbnail} alt=\"\" className=\"innercoverimg\"/>\r\n                    // </div>\r\n                }\r\n                <p className=\"album\">{item.Album}</p>\r\n                <p className=\"artist\">{item.AlbumArtist}</p>\r\n                {/* <div className={ show ? \"blackblurtop\" : \"blackblurtop hidden\" }></div>\r\n                <div className={ show ? \"blackblurbottom\" : \"blackblurbottom hidden\" }></div> */}\r\n                <div className={ (!songPausedLocal && song.Album === item.Album) ? \"floater-stay\" : \"floater\" }>\r\n                    <div className=\"rowplaybutton\" onClick={handlePlayPause}>\r\n                        <img src={ !songPausedLocal && song.Album === item.Album ? pausebutton : playbutton } alt=\"\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const HorizontalList = ({ list, addCloseButton = false, closeFunc = ()=>{} }) => {\r\n    // const [redirectTo, setRedirectTo] = useState(\"\");\r\n    // const [, setTab] = CustomUseState(tabGlobal);\r\n    // const [routes, setRoutes] = CustomUseState(routesGlobal);\r\n    // const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    // actualIsOpen = openerDetails.open;\r\n\r\n    // const handleMenu = (e) => {\r\n    //     e.stopPropagation();\r\n    //     e.preventDefault();\r\n    //     setOpenerDetails({\r\n    //         open: !actualIsOpen,\r\n    //         yValue: e.clientY,\r\n    //         xValue: e.clientX,\r\n    //         type: \"album\",\r\n    //         data: [\r\n    //             {\r\n    //                 name: \"Add album to queue\",\r\n    //                 func: () => {}\r\n    //             },\r\n    //             {\r\n    //                 name: `Play next`,\r\n    //                 func: () => {}\r\n    //             }\r\n    //         ]\r\n    //     });\r\n    // };\r\n\r\n    // if (redirectTo !== \"\") {\r\n    //     return <Redirect to={`/home/album/${redirectTo}`} />\r\n    // }\r\n    return(\r\n        <>\r\n        <div className=\"innerlist\">\r\n            {\r\n                list.map((item,i) => {\r\n                    if (i<5) {\r\n                        return(\r\n                            <EachInList addCloseButton={addCloseButton} closeFunc={closeFunc} item={item} />\r\n                        );\r\n                    }\r\n                    return null;\r\n                })\r\n            }\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nconst EachTile = ({ mouseOver, mouseOut, album }) => {\r\n    let songPausedLocal;\r\n    const [redirectTo, setRedirectTo] = useState(\"\");\r\n    const [routes, setRoutes] = CustomUseState(routesGlobal);\r\n    const [song, setAlbumForPlayer] = CustomUseState(albumGlobal);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [, setQueue] = CustomUseState(queueGlobal);\r\n    songPausedLocal = songPaused;\r\n\r\n    const moveOver = (album,e) => {\r\n        e.stopPropagation();\r\n        routes.push(`/home/album/${album}`);\r\n        setRoutes(routes);\r\n        setRedirectTo(`${album}`);\r\n    };\r\n    \r\n    const handlePlayPause = (e) => {\r\n        e.stopPropagation();\r\n        // console.log(\"album\",album,\"song\",song);\r\n        if (song.Album === album.Album) {\r\n            pauseOrPlay();\r\n            return;\r\n        }\r\n        const main = album.Type === \"Album\" ? album.Tracks : [album];\r\n        if (!playing) setPlaying(true);\r\n        if (album.Type === \"Single\") {\r\n            setQueue(main);\r\n            setAlbumForPlayer(main[0]);\r\n        } else {\r\n            main.forEach(song => {\r\n                song.Album = album.Album;\r\n                song.Thumbnail = album.Thumbnail;\r\n                song.Color = album.Color;\r\n            });\r\n            setQueue(main);\r\n            setAlbumForPlayer(main[0]);\r\n        }\r\n        localStorage.setItem(\"queue\",JSON.stringify(main));\r\n        setSongPaused(true);\r\n    };\r\n\r\n    if (redirectTo !== \"\") {\r\n        return <Redirect to={`/home/album/${redirectTo}`} />\r\n    }\r\n    return(\r\n        <div className=\"rowfirst\"\r\n        onMouseOver={() => mouseOver(album.Color)}\r\n        onClick={(e) => moveOver(album.Album,e)}\r\n        onMouseOut={mouseOut}>\r\n            <img src={album.Thumbnail} alt=\"\" className=\"rowimage\" />\r\n            <div className=\"rowname\">{album.Album}</div>\r\n            <div className={  (!songPausedLocal && song.Album === album.Album) ? \r\n            \"rowplaybuttoncontainer-stay\" : \"rowplaybuttoncontainer\" }>\r\n                <div className=\"rowplaybutton\" onClick={handlePlayPause}>\r\n                    <img src={ !songPausedLocal && song.Album === album.Album ? pausebutton : playbutton } alt=\"\" />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst EachRow = ({ row, mouseOver, mouseOut }) => {\r\n    return(\r\n        <div className=\"row\">\r\n            {\r\n                row.map(each => {\r\n                    return(\r\n                        <EachTile mouseOver={mouseOver} mouseOut={mouseOut} album={each} />\r\n                    );\r\n                })\r\n            }\r\n            {/* <div className=\"rowfirst\"></div>\r\n            <div className=\"rowfirst\"></div> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst TopDisplay = ({ mostPlayed, mouseOver, mouseOut }) => {\r\n    const { title, list } = mostPlayed;\r\n\r\n    return(\r\n        <div className=\"shortcuts\">\r\n            <div className=\"bigmaintitle\">\r\n                <p>{title}</p>\r\n            </div>\r\n            <div style={{ width: \"100%\", height: \"15px\" }}></div>\r\n            {\r\n                Object.keys(list).map(each => {\r\n                    return(\r\n                        <EachRow row={list[each]} mouseOver={mouseOver} mouseOut={mouseOut}/>\r\n                    );\r\n                })\r\n            }\r\n            <div style={{ width: \"100%\", height: \"15px\" }}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ActualHomeScreen = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [all, setAll] = useState({});\r\n    const [played, setPlayed] = useState({});\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [bg, setBg] = useState(\"\");\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [, setTopBgColor] = CustomUseState(topBgColorGlobal);\r\n    actualIsOpen = openerDetails.open;\r\n    topBar = topBarConfig;\r\n\r\n    const mouseOut = () => {\r\n        const { list } = played;\r\n        if (Object.keys(list).length === 0) {\r\n            // setBg(`#121212`);\r\n            // setTopBgColor(\"#202020\");\r\n            setTopBgColor(\"#252525\");\r\n            return;\r\n        }\r\n        let color = list[0][0].Color.split(\",\");\r\n        let another = color;\r\n        color[3] = \"0.3)\";\r\n        color = color.join(\",\");\r\n        setBg(color);\r\n        another[3] = \"0.3)\";\r\n        another = another.join(\",\");\r\n        setTopBgColor(another);\r\n        // return color;\r\n    };\r\n\r\n    const mouseOver = (color) => {\r\n        let changedColor = color.split(\",\");\r\n        changedColor[3] = \"0.3)\";\r\n        changedColor = changedColor.join(\",\");\r\n        setBg(changedColor);\r\n    };\r\n\r\n    const scrollHandler = (e) => {\r\n        const top = e.currentTarget.scrollTop;\r\n        sessionStorage.setItem(\"home-scroll\",top);\r\n        if (Object.keys(played.list).length === 0) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                // bgColor: bg\r\n                bgColor: \"#252525\"\r\n            });\r\n            return;\r\n        }\r\n        if (top > 200 && topBar.bgColor === \"transparent\") {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                bgColor: bg\r\n            });\r\n        }\r\n        if (top < 200 && topBar.bgColor !== \"transparent\") {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                bgColor: \"transparent\"\r\n            });\r\n        }\r\n        if (actualIsOpen) {\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const call = async () => {\r\n            const res = await sendRequest({\r\n                method: \"GET\",\r\n                endpoint: `/getHomeAlbums`\r\n            });\r\n            setAll(res.albums);\r\n            setPlayed(res.mostPlayed);\r\n            setIsLoading(false);\r\n        };\r\n        if (isLoading) {\r\n            call();\r\n        } else {\r\n            const main = document.querySelector(\".main\");\r\n            main.scrollTop = sessionStorage.getItem(\"home-scroll\") || 0;\r\n            mouseOut();\r\n        }\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            button: false,\r\n            bgColor: \"transparent\"\r\n        });\r\n    }, [isLoading]);\r\n\r\n    const list = [\"New Releases\",\"Recently Added\",\"Most Played\",\"On Loop\",\"More Like DIVINE\"];\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader />\r\n    }\r\n    return(\r\n        <div className=\"homescreen\">\r\n            <div className=\"main\" onScroll={scrollHandler}>\r\n                <div className=\"colourtop\"\r\n                style={ Object.keys(played.list).length !== 0 ?\r\n                    // { backgroundImage: `linear-gradient(${bg},#121212)` } : \r\n                    { backgroundColor: `${bg}` } : \r\n                    // { backgroundImage: `linear-gradient(rgba(127,255,212,0.2),#121212,#121212,#121212)` } }\r\n                    // { backgroundColor: `#121212` } }\r\n                    { backgroundColor: `#252525` } }\r\n                >\r\n                    <div className=\"forblur\"></div>\r\n                </div>\r\n                <div className=\"noncolour\">\r\n                    {\r\n                        Object.keys(played.list).length !== 0 ? <TopDisplay mostPlayed={played} mouseOver={mouseOver} mouseOut={mouseOut}/> : \"\"\r\n                    }\r\n                    {   \r\n                        Object.keys(all).map((key,i) => {\r\n                            if (all[key].length !== 0) {\r\n                                return(\r\n                                    <div className=\"outline\">\r\n                                        <div className={ i === 0 && Object.keys(played.list).length === 0 ? \"bigmaintitle\" : \"maintitle\" }>\r\n                                            <p>{key}</p>\r\n                                            {/* { all[key].length > 5 ?\r\n                                                <div className=\"viewmore\">\r\n                                                    <p>VIEW MORE</p>\r\n                                                </div> : \"\"\r\n                                            } */}\r\n                                        </div>\r\n                                        <div className=\"list\">\r\n                                            <HorizontalList list={all[key]} />\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            }\r\n                            return null;\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst HomeScreen = () => {\r\n    const [queueOpened,] = CustomUseState(queueOpenedGlobal);\r\n\r\n    if (queueOpened) {\r\n        return <Queue/>\r\n    }\r\n    return <ActualHomeScreen/>\r\n};\r\n\r\nexport default HomeScreen;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\common.js",["85"],"F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\AlbumView.js",["86","87","88"],"import { useState, useEffect, useRef } from \"react\";\r\nimport \"../../../css/albumview.css\";\r\nimport {\r\n    CustomUseState,\r\n    playingGlobal,\r\n    routesGlobal,\r\n    tabGlobal,\r\n    // keepButtonGlobal,\r\n    // onClickFuncGlobal,\r\n    // topTitleGlobal,\r\n    // topBgColor,\r\n    topBarGlobal,\r\n    checkArtist,\r\n    albumGlobal,\r\n    queueGlobal,\r\n    queueOpenedGlobal,\r\n    songIsPausedGlobal,\r\n    openerGlobal,\r\n    responseBar,\r\n    sendRequest\r\n} from \"../../../common\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport { HorizontalList } from \"./HomeScreen\";\r\nimport { useParams, Redirect } from \"react-router-dom\";\r\nimport play from \"../../../assets/playwhite.png\";\r\nimport pause from \"../../../assets/pausewhite.png\";\r\nimport copyright from \"../../../assets/copyright.png\";\r\nimport Placeholder from \"../../../assets/placeholder.svg\";\r\nimport Queue from \"./Queue\";\r\nimport { pauseOrPlay } from \"../../../homepage\";\r\nlet mainscreen, actualIsOpen, bgChanged = false, topBar;\r\n\r\n\r\nconst ShowMoreAlbum = ({ moreAlbums, albumartist }) => {\r\n    if (moreAlbums.length === 0) {\r\n        return \"\";\r\n    }\r\n    return(\r\n        <div className=\"morealbumdiv\">\r\n            <div className=\"morebydisplay\">More By {albumartist.split(\",\")[0]}</div>\r\n            <div className=\"list\">\r\n                <HorizontalList list={moreAlbums} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ActualAlbumView = () => {\r\n    const [p, setP] = useState(\"\");\r\n    const params = useParams();\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [albumDetails, setAlbumDetails] = useState({});\r\n    const [routes, setRoutes] = CustomUseState(routesGlobal);\r\n    const [,setTab] = CustomUseState(tabGlobal);\r\n    const [redirectValue, setRedirectValue] = useState({ status: false, to: \"\" });\r\n    // const [,setKeepButton] = CustomUseState(keepButtonGlobal);\r\n    // const [,setOnClickFunc] = CustomUseState(onClickFuncGlobal);\r\n    // const [,setTopTitle] = CustomUseState(topTitleGlobal);\r\n    // const [,setBgColor] = CustomUseState(topBgColor);\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [albumSong, setAlbumForPlayer] = CustomUseState(albumGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    const [added, setAdded] = useState(false);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const albummain = useRef();\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [moreAlbums, setMoreAlbums] = useState([]);\r\n    const [,setResObj] = CustomUseState(responseBar);\r\n    actualIsOpen = openerDetails.open;\r\n    topBar = topBarConfig;\r\n    if (p !== params.name) {\r\n        setIsLoading(true);\r\n        setP(params.name);\r\n    }\r\n\r\n\r\n    const checkForLeftPanel = () => {\r\n        const route = routes[routes.length - 1];\r\n        if (route.toLowerCase().includes(\"homescreen\")) setTab(\"Home\");\r\n        else if (route.toLowerCase().includes(\"search\")) setTab(\"Search\");\r\n        else if (route.toLowerCase().includes(\"new-releases\")) setTab(\"New Releases\");\r\n        else if (route.toLowerCase().includes(\"library\")) setTab(\"Library\");\r\n    };\r\n\r\n    const scrollHandler = e => {\r\n        if (albummain.current.scrollTop > 300 && !bgChanged) {\r\n        // if (mainscreen.current.scrollTop > 300 && bgChanged === false) {\r\n            const initColor = albumDetails && albumDetails.Color.substring(5,albumDetails.Color.length-1).split(\",\");\r\n            bgChanged = true;\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                title: albumDetails.Album,\r\n                bgColor: `rgba(${initColor[0]},${initColor[1]},${initColor[2]},0.3)`\r\n            });\r\n            // setTopTitle(albumDetails.Album);\r\n            // setBgColor(`rgba(${initColor[0]},${initColor[1]},${initColor[2]},0.3)`);\r\n        }\r\n        if (albummain.current.scrollTop < 300 && bgChanged) {\r\n        // if (mainscreen.current.scrollTop < 300 && bgChanged === true) {\r\n            bgChanged = false;\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                title: \"\",\r\n                bgColor: \"transparent\"\r\n            });\r\n            // setTopTitle(\"\");\r\n            // setBgColor(\"transparent\");\r\n        }\r\n        if (actualIsOpen) {\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        }\r\n    };\r\n\r\n    const goBack = () => {\r\n        if (routes.length > 1) {\r\n            routes.splice(routes.length-1,1);\r\n            setRoutes(routes);\r\n        }\r\n        // checkForLeftPanel();\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            button: false,\r\n            title: \"\",\r\n            bgColor: \"transparent\"\r\n        });\r\n        setRedirectValue({ status: true, to: routes[routes.length - 1] });\r\n    };\r\n\r\n    const call = async () => {\r\n        let res = await sendRequest({\r\n            method: \"POST\",\r\n            endpoint: `/getAlbumDetails`,\r\n            data: {\r\n                album: params.name\r\n            }\r\n        });\r\n        if (res) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: true,\r\n                buttonFunc: goBack\r\n            });\r\n            // setKeepButton(true);\r\n            // setOnClickFunc(goBack);\r\n            // setBgColor(\"transparent\")\r\n            setAlbumDetails(res.album);\r\n            setMoreAlbums(res.moreAlbums);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const playButton = (albumDetails) => {\r\n        if (decidePlayOrPause()) {\r\n            pauseOrPlay();\r\n        } else {\r\n            const main = albumDetails.Type === \"Album\" ? albumDetails.Tracks : [albumDetails];\r\n            if (!playing) setPlaying(true);\r\n            if (albumDetails.Type === \"Single\") {\r\n                setQueue(main);\r\n                setAlbumForPlayer(main[0]);\r\n            } else {\r\n                main.forEach(song => {\r\n                    song.Album = albumDetails.Album;\r\n                    song.Thumbnail = albumDetails.Thumbnail;\r\n                    song.Color = albumDetails.Color;\r\n                });\r\n                setQueue(main);\r\n                setAlbumForPlayer(main[0]);\r\n            }\r\n            localStorage.setItem(\"queue\",JSON.stringify(main));\r\n            setSongPaused(true);\r\n        }\r\n    };\r\n\r\n    const addAlbumToQueue = () => {\r\n        // if (!added) {\r\n            const main = albumDetails.Type === \"Album\" ? albumDetails.Tracks : [albumDetails];\r\n            const mainQueue = queue;\r\n            const index = mainQueue.indexOf(albumSong);\r\n            if (index === -1) return;\r\n            if (albumDetails.Type === \"Single\") {\r\n                mainQueue.push(main[0]);\r\n                // mainQueue.splice(index,0,main[0]);\r\n                localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n                setQueue(mainQueue);\r\n                // setAlbumForPlayer(main[0]);\r\n                setResObj({ open: true, msg: \"Added single to queue\" });\r\n            } else {\r\n                // let i = 0;\r\n                main.forEach(song => {\r\n                    song.Album = albumDetails.Album;\r\n                    song.Color = albumDetails.Color;\r\n                    song.Thumbnail = albumDetails.Thumbnail;\r\n                    mainQueue.push(song);\r\n                    // mainQueue.splice(index+i,0,song);\r\n                    // ++i;\r\n                });\r\n                localStorage.setItem(\"queue\",JSON.stringify(mainQueue));\r\n                setQueue(mainQueue);\r\n                setResObj({ open: true, msg: \"Added album to queue\" });\r\n                // setAlbumForPlayer(main[0]);\r\n            }\r\n            setAdded(true);\r\n            setOpenerDetails({\r\n                ...openerDetails,\r\n                open: false\r\n            });\r\n        // }\r\n    };\r\n\r\n    const playAlbumNext = () => {\r\n        if (queue.length !== 0) {\r\n            const index = queue.indexOf(albumSong);\r\n            if (albumDetails.Type === \"Single\") {\r\n                queue.splice(index+1,0,albumDetails);\r\n            } else {\r\n                albumDetails.Tracks.forEach((song,i) => {\r\n                    song.Album = albumDetails.Album;\r\n                    song.Color = albumDetails.Color;\r\n                    song.Thumbnail = albumDetails.Thumbnail;\r\n                    queue.splice(index+1+i,0,song);\r\n                });\r\n            }\r\n            localStorage.setItem(\"queue\",JSON.stringify(queue));\r\n            setQueue(queue);\r\n            setResObj({ open: true, msg: `Playing '${albumDetails.Album}' next` });\r\n        }\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: false\r\n        });\r\n    };\r\n\r\n    const displayDirect = (album) => {\r\n        if (Object.keys(album).length > 0) {\r\n            const type = album.Type === \"Album\";\r\n            const dur = type ? album.Tracks[0].Duration.split(\": \") : album.Duration.split(\": \");\r\n            const sec = parseInt(dur[1]);\r\n            return `${dur[0]} min${ sec !== 0 ? ` ${sec} sec` : `` }`;\r\n        }\r\n    };\r\n\r\n    const addAndDisplay = (album) => {\r\n        if (Object.keys(album).length > 0) {\r\n            let min = 0, sec = 0;\r\n            album.Tracks.forEach(track => {\r\n                const dur = track.Duration.split(\": \");\r\n                min += parseInt(dur[0]);\r\n                sec += parseInt(dur[1]);\r\n            });\r\n            min += Math.floor(sec/60);\r\n            sec = sec%60;\r\n            return `${min} min${ sec !== 0 ? ` ${sec} sec` : `` }`;\r\n        }\r\n    };\r\n\r\n    const decidePlayOrPause = () => {\r\n        let sameAlbum = false;\r\n        const titleInSong = albumSong.Title || false;\r\n        if (!titleInSong && albumDetails.Type === \"Album\") {\r\n            return false;\r\n        }\r\n        if (!titleInSong && albumDetails.Type === \"Single\") {\r\n            return albumSong.Album === albumDetails.Album;\r\n        }\r\n        albumDetails.Tracks && albumDetails.Tracks.every(song => {\r\n            if (song.Title === titleInSong) {\r\n                sameAlbum = true;\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return sameAlbum;\r\n    };\r\n\r\n    const handleClick = (e) => {\r\n        const list = [\"opener\",\"rowinmenu\",\"rowtext\"];\r\n        if (list.indexOf(e.target.className) === -1 && actualIsOpen) {\r\n            mainscreen.style.overflow = \"overlay\";\r\n            setOpenerDetails({\r\n                open: false,\r\n                xValue: 0,\r\n                yValue: 0,\r\n                type: null\r\n            });\r\n        }\r\n    };\r\n\r\n    const change = (color) => {\r\n        // color = color.split(\",\");\r\n        // color[3] = \"0.5)\";\r\n        // color = color.join(\",\");\r\n        // console.log(\"color\",color);\r\n        return color;\r\n    };\r\n\r\n    const handleMenu = (e) => {\r\n        e.stopPropagation();\r\n        setOpenerDetails({\r\n            open: !actualIsOpen,\r\n            yValue: e.clientY + 10,\r\n            xValue: e.clientX + 10,\r\n            type: \"album\",\r\n            data: [\r\n                {\r\n                    name: \"Add album to queue\",\r\n                    func: addAlbumToQueue\r\n                },\r\n                {\r\n                    name: `Play ${albumDetails.Type.toLowerCase()} next`,\r\n                    func: playAlbumNext\r\n                }\r\n            ]\r\n        });\r\n    };\r\n\r\n    const compare = (a,b) => {\r\n        if (a.Title > b.Title) return 1;\r\n        return -1;\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isLoading) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: false,\r\n                title: \"\",\r\n                bgColor: \"transparent\"\r\n            });\r\n            call();\r\n        } else {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: true,\r\n                buttonFunc: goBack\r\n            });\r\n            mainscreen = document.querySelector(\".albummain\");\r\n            document.addEventListener(\"mousedown\",handleClick);\r\n        }\r\n        return () => {\r\n            setRedirectValue({ ...redirectValue, status: false });\r\n            document.removeEventListener(\"mousedown\",handleClick);\r\n        };\r\n    },[isLoading]);\r\n\r\n\r\n    if (redirectValue.status) {\r\n        return <Redirect to={`${redirectValue.to}`} />\r\n    }\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"albummain\" onScroll={scrollHandler} ref={albummain}>\r\n            <div className=\"topview\"\r\n            style={{background: `linear-gradient(to bottom, ${change(albumDetails.Color || \"\")}, #121212)`}}\r\n            >\r\n                <div className=\"albumcontainer\">\r\n                    <div className=\"albumart\" style={{\r\n                        backgroundImage: `url(${Placeholder})`,\r\n                        backgroundSize: \"cover\"\r\n                    }}>\r\n                        <img src={albumDetails.Thumbnail || \"\"} alt=\"albumart\" />\r\n                    </div>\r\n                    <div className=\"titlecontainer\">\r\n                        <div className=\"albumtype\">\r\n                            {(albumDetails.Type && albumDetails.Type.toUpperCase()) || \"\"}\r\n                        </div>\r\n                        <div className={albumDetails.Album && albumDetails.Album.length > 22 ? \"albumname-extrasmall\" :\r\n                            albumDetails.Album && albumDetails.Album.length > 18 ? \"albumname-small\" : \"albumname-large\"}>\r\n                        {/* <div className={albumDetails.Album && albumDetails.Album.length > 22 ? \"albumname-extrasmall\" :\r\n                            albumDetails.Album && albumDetails.Album.length > 18 ? \"albumname-extrasmall\" : \"albumname-extrasmall\"}> */}\r\n                            <p>{albumDetails.Album}</p>\r\n                        </div>\r\n                        <div className=\"albumartist\">\r\n                            {\r\n                                Object.keys(albumDetails).length > 0 ?\r\n                                albumDetails.AlbumArtist.split(\", \").map((item,i) => {\r\n                                    return(\r\n                                        <>\r\n                                            <div className=\"albumartistname\"\r\n                                            onMouseOver={(e) => checkArtist(item,e,\"albumartist\")}>\r\n                                                {item || \"\"}\r\n                                            </div>\r\n                                            {\r\n                                                i !== albumDetails.AlbumArtist.split(\", \").length - 1 ?\r\n                                                <div className=\"separator\"></div> : \"\"\r\n                                            }\r\n                                        </>\r\n                                    );\r\n                                }) : \"\"\r\n                            }\r\n                            <div className=\"separator\"></div>\r\n                            <div className=\"year\">{albumDetails.Year || \"\"}</div>\r\n                            <div className=\"separator\"></div>\r\n                            <div className=\"noofsongs\">\r\n                                {\r\n                                    albumDetails.Type === \"Album\" ? \r\n                                    albumDetails.Tracks.length === 1 ? `1 Song` : `${albumDetails.Tracks.length} Songs` : \"1 Song\"\r\n                                }\r\n                            </div>\r\n                            <div className=\"separator\"></div>\r\n                            <div className=\"noofsongs\">\r\n                                {\r\n                                    albumDetails.Tracks && albumDetails.Tracks.length >= 1 ? addAndDisplay(albumDetails) : displayDirect(albumDetails)\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"bottomview\">\r\n                <div className=\"bottomcontainer\">\r\n                    <div className={ decidePlayOrPause() && !songPaused ? \"playcontainerpause\" : \"playcontainer\" }\r\n                    // style={{backgroundColor: albumDetails.Color || \"\"}}\r\n                    // style={{backgroundColor: \"rgba(127,255,212,0.9)\"}}\r\n                    onClick={() => playButton(albumDetails)}>\r\n                        <img src={ decidePlayOrPause() && !songPaused ? pause : play } alt=\"Play\" />\r\n                    </div>\r\n                    <div className=\"openercontrol\" onClick={handleMenu}>\r\n                        <div className=\"opener1\"></div>\r\n                        <div className=\"opener2\"></div>\r\n                        <div className=\"opener3\"></div>\r\n                    </div>\r\n                    {/* <div className=\"addqueuebutton\" onClick={addAlbumToQueue}>\r\n                        {\r\n                            added ? `Added to queue` : `Add ${albumDetails.Album} to queue`\r\n                        }\r\n                    </div>  */}\r\n                </div>\r\n                <div className=\"table\">\r\n                    <div className=\"innertable\">\r\n                        <div className=\"titlerow\">\r\n                            <div className=\"hash\">#</div>\r\n                            <div className=\"nameofthesong\">TITLE</div>\r\n                            <div className=\"duration\">DURATION</div>\r\n                        </div>\r\n                        {\r\n                            albumDetails.Type === \"Album\" ?\r\n                            albumDetails.Tracks.sort(compare).map((song,i) => {\r\n                                return <SongRow song={song} index={i} type=\"Album\" album={albumDetails} albummainDiv={mainscreen}/>\r\n                            }) : \r\n                            <SongRow song={albumDetails} index={0} type=\"Single\" album={albumDetails}/>\r\n                        }\r\n                    </div>        \r\n                </div>\r\n                <div className=\"copyright1\">\r\n                    <img src={copyright} alt=\"\" />\r\n                    All the songs on Studio are pirated and we are aware of this being illegal.\r\n                </div>\r\n                <div className=\"copyright2\">\r\n                    <img src={copyright} alt=\"\" />\r\n                    We do not own any of the songs. This is just a project. Please do not sue us.\r\n                </div>\r\n                {/* <div className=\"dummy\"></div> */}\r\n                <ShowMoreAlbum moreAlbums={moreAlbums} albumartist={albumDetails.AlbumArtist}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SongRow = ({ song, index, type, album }) => {\r\n    const artistArr = song.Artist ? song.Artist.split(\", \") : [];\r\n    const [playing, setPlaying] = CustomUseState(playingGlobal);\r\n    const [albumSong, setAlbumForPlayer] = CustomUseState(albumGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    const [songPaused, setSongPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [hidden, setHide] = useState(true);\r\n    const [openerDetails, setOpenerDetails] = CustomUseState(openerGlobal);\r\n    const [,setResObj] = CustomUseState(responseBar);\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    actualIsOpen = openerDetails.open;\r\n    if (!actualIsOpen && isOpen) setIsOpen(false);\r\n\r\n\r\n    const setUpPlayer = (song) => {\r\n        if (!playing) setPlaying(true);\r\n        let newQueue = [];\r\n        if (album.Type === \"Album\") {\r\n            album.Tracks.forEach(each => {\r\n                each.Album = album.Album;\r\n                each.Color = album.Color;\r\n                each.Thumbnail = album.Thumbnail;\r\n            });\r\n            newQueue = album.Tracks;\r\n        }\r\n        if (album.Type === \"Single\") {\r\n            song.Color = album.Color;\r\n            song.Thumbnail = album.Thumbnail;\r\n            newQueue.push(song);\r\n        }\r\n        setQueue(newQueue);\r\n        localStorage.setItem(\"queue\",JSON.stringify(newQueue));\r\n        if (albumSong !== song) setSongPaused(true);\r\n        setAlbumForPlayer(song);\r\n    };\r\n\r\n    const addSongToQueue = () => {\r\n        if (album.Type === \"Album\") {\r\n            song.Album = album.Album;\r\n        }\r\n        song.Color = album.Color;\r\n        song.Thumbnail = album.Thumbnail;\r\n        queue.push(song);\r\n        localStorage.setItem(\"queue\",JSON.stringify(queue));\r\n        setQueue(queue);\r\n        setResObj({ open: true, msg: `Added '${song.Title || song.Album}' to queue` });\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: false\r\n        });\r\n    };\r\n\r\n    const playNextInQueue = () => {\r\n        if (queue.length !== 0) {\r\n            if (album.Type === \"Album\") {\r\n                song.Album = album.Album;\r\n            }\r\n            song.Color = album.Color;\r\n            song.Thumbnail = album.Thumbnail;\r\n            const index = queue.indexOf(albumSong);\r\n            queue.splice(index+1,0,song);\r\n            localStorage.setItem(\"queue\",JSON.stringify(queue));\r\n            setQueue(queue);\r\n            setResObj({ open: true, msg: `Playing '${song.Title || song.Album}' next` });\r\n        }\r\n        setOpenerDetails({\r\n            ...openerDetails,\r\n            open: false\r\n        });\r\n    };\r\n\r\n    const isCurrentlyPlaying = () => {\r\n        const titleInSong = song.Title || false;\r\n        const titleInAlbumSong = albumSong.Title || false;\r\n        if (titleInSong && titleInAlbumSong) {\r\n            return song.Title === albumSong.Title;\r\n        } else if (!titleInSong && !titleInAlbumSong) {\r\n            return song.Album === albumSong.Album;\r\n        }\r\n    };\r\n\r\n    const handleSongMenu = (e) => {\r\n        e.stopPropagation();\r\n        setIsOpen(true);\r\n        setOpenerDetails({\r\n            open: !actualIsOpen,\r\n            yValue: e.clientY + 10,\r\n            xValue: e.clientX - 200,\r\n            type: \"song\",\r\n            data: [\r\n                {\r\n                    name: \"Add song to queue\",\r\n                    func: addSongToQueue\r\n                },\r\n                {\r\n                    name: \"Play next\",\r\n                    func: playNextInQueue\r\n                }\r\n            ]\r\n        });\r\n    };\r\n\r\n    const decide = () => {\r\n        if (isOpen && openerDetails.open) {\r\n            return false;\r\n        } else {\r\n            return hidden;\r\n        }\r\n    };\r\n\r\n\r\n    return(\r\n        <div className=\"songrow\" onClick={() => setUpPlayer(song)}\r\n        onMouseOver={() => setHide(false)} onMouseOut={() => setHide(true)}\r\n        style={{ backgroundColor: decide() ? \"transparent\" : \"rgba(255,255,255,0.1)\" }}>\r\n            <div className=\"number\">\r\n                {\r\n                    isCurrentlyPlaying() && !songPaused ?\r\n                    <div className=\"playinganim\">\r\n                        <div className=\"div1\"></div>\r\n                        <div className=\"div2\"></div>\r\n                        <div className=\"div3\"></div>\r\n                        <div className=\"div4\"></div>\r\n                    </div> : index+1\r\n                }\r\n            </div>\r\n            <div className=\"songname\">\r\n                <div className=\"song\" style={{ color: `${ isCurrentlyPlaying() && !songPaused ? \"aquamarine\" : \"white\" }` }}>\r\n                    {\r\n                        type === \"Album\" ? song.Title : song.Album\r\n                    }\r\n                </div>\r\n                <div className=\"artistlist\">\r\n                    {\r\n                        artistArr.map((artist,i) => {\r\n                            return(\r\n                                <>\r\n                                    <p className=\"artistpara\"\r\n                                    onMouseOver={(e) => checkArtist(artist,e,\"artist\")}>{artist}</p>\r\n                                    {\r\n                                        artistArr.length > 1 && i !== artistArr.length-1 ?\r\n                                        <div className=\"artistseparator\"></div> : \"\"\r\n                                    }\r\n                                </>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n            <div className=\"songduration\">\r\n                <div className={ decide() ? \"beforesongduration hidden\" : \"beforesongduration\" } onClick={handleSongMenu}>\r\n                    <div className=\"songopenercontrol\">\r\n                        <div className=\"songopener1\"></div>\r\n                        <div className=\"songopener2\"></div>\r\n                        <div className=\"songopener3\"></div>\r\n                    </div>\r\n                </div>\r\n                {song.Duration || \"\"}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst AlbumView = () => {\r\n    const [queueOpened,] = CustomUseState(queueOpenedGlobal);\r\n\r\n    if (queueOpened) {\r\n        return <Queue/>\r\n    }\r\n    return <ActualAlbumView/>\r\n};\r\n\r\n\r\nexport default AlbumView;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Library.js",["89","90"],"import \"../../../css/library.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport { HorizontalList } from \"./HomeScreen\";\r\nimport {\r\n    wait,\r\n    queueOpenedGlobal,\r\n    CustomUseState,\r\n    sendRequest,\r\n    topBarGlobal,\r\n    topBgColorGlobal\r\n} from \"../../../common\";\r\nimport Queue from \"./Queue\";\r\nlet topBar;\r\n\r\n\r\nconst ActualLibrary = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [library, setLibrary] = useState({});\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [topBgColor, setBgColor] = CustomUseState(topBgColorGlobal);\r\n    topBar = topBarConfig;\r\n    // let scrolled = false;\r\n\r\n    const scrollHandler = (e) => {\r\n        const top = e.currentTarget.scrollTop;\r\n        sessionStorage.setItem(\"library-scroll\",top);\r\n        if (top > 200 && topBar.bgColor === \"transparent\") {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: false,\r\n                bgColor: topBgColor\r\n            });\r\n        } else if (top < 200 && topBar.bgColor !== \"transparent\") {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: false,\r\n                bgColor: \"transparent\"\r\n            });\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const call = async () => {\r\n            const saved = JSON.parse(sessionStorage.getItem(\"library\"));\r\n            if (saved !== null) {\r\n                setLibrary(saved);\r\n                setIsLoading(false);\r\n                return;\r\n            }\r\n            const res = await sendRequest({\r\n                method: \"GET\",\r\n                endpoint: `/getLibrary`\r\n            });\r\n            await wait(500);\r\n            sessionStorage.setItem(\"library\",JSON.stringify(res));\r\n            setLibrary(res);\r\n            setIsLoading(false);\r\n        };\r\n        if (isLoading) {\r\n            call();\r\n        } else {\r\n            const main = document.querySelector(\".main\");\r\n            main.scrollTop = sessionStorage.getItem(\"library-scroll\") || 0;\r\n        }\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            button: false,\r\n            // bgColor: \"transparent\"\r\n        });\r\n        // return () => {\r\n        //     setTopBarConfig({\r\n        //         ...topBar,\r\n        //         button: false,\r\n        //         bgColor: \"transparent\"\r\n        //     }); \r\n        // };\r\n    },[isLoading]);\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"library\">\r\n            <div className=\"main\" onScroll={scrollHandler}>\r\n                <div className=\"librarytop\"\r\n                style={{ backgroundColor: `${topBgColor}` }}\r\n                >\r\n                    <div className=\"innerlibrarytop\">\r\n                        <div className=\"forblur\"></div>\r\n                        <div className=\"bigtitle\">Library</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"librarybottom\">\r\n                    <div className=\"outline\">\r\n                        {/* <div className=\"bigmaintitle\">\r\n                            <p>Library</p>\r\n                        </div> */}\r\n                        {   \r\n                            Object.keys(library).map(key => {\r\n                                if (library[key].length !== 0) {\r\n                                    return(\r\n                                        <div className=\"list\">\r\n                                            <HorizontalList list={library[key]}/>\r\n                                        </div>\r\n                                    );\r\n                                }\r\n                                return null;\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Library = () => {\r\n    const [queueOpened,] = CustomUseState(queueOpenedGlobal);\r\n    \r\n    if (queueOpened) {\r\n        return <Queue/>\r\n    }\r\n    return <ActualLibrary/>\r\n};\r\n\r\n\r\nexport default Library;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Queue.js",["91","92","93"],"import \"../../../css/queuestyles.css\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Close from \"../../../assets/deletewhite.svg\";\r\nimport Placeholder from \"../../../assets/placeholder.svg\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport {\r\n    CustomUseState,\r\n    queueGlobal,\r\n    queueOpenedGlobal,\r\n    songIsPausedGlobal,\r\n    albumGlobal,\r\n    responseBar,\r\n    // keepButtonGlobal,\r\n    // onClickFuncGlobal\r\n    topBarGlobal\r\n} from \"../../../common\";\r\nlet finalQueue = [], queueLength, songIndex, smallArr;\r\nlet actualQueue, firstpart, lastpart, topBar;\r\n\r\n\r\n\r\nconst NowPlaying = ({ songIsPaused, song }) => {\r\n    return(\r\n        <div className=\"nowplaying\">\r\n            <div className=\"innernowplaying\">\r\n                <div className=\"firstpart\">\r\n                    {\r\n                        !songIsPaused ?\r\n                        <div className=\"playinganim\">\r\n                            <div className=\"div1\"></div>\r\n                            <div className=\"div2\"></div>\r\n                            <div className=\"div3\"></div>\r\n                            <div className=\"div4\"></div>\r\n                        </div> : \r\n                        <div className=\"pausedanim\">\r\n                            <div className=\"div5\"></div>\r\n                            <div className=\"div6\"></div>\r\n                            <div className=\"div7\"></div>\r\n                            <div className=\"div8\"></div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div className=\"nowplayingart\">\r\n                    <img src={song.Thumbnail} alt=\"\"/>\r\n                </div>\r\n                <div className=\"queuesongdetails\">\r\n                    <div className=\"startingpart\">\r\n                        <div className=\"playingsongname\"\r\n                        style={{ color: \"aquamarine\" }}>{song.Title || song.Album}</div>\r\n                        <div className=\"playingsongartist\">{song.Artist}</div>\r\n                    </div>\r\n                    <div className=\"centerpart\">\r\n                        {/* {song.Album} */}\r\n                    </div>\r\n                    <div className=\"lastpart\">\r\n                        <div className=\"lastpartduration\">{song.Duration}</div>\r\n                        <div className=\"removesong\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst NowPlaying2 = () => {\r\n    return(\r\n        <div className=\"nowplaying2\">\r\n            <div className=\"innernowplaying2\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst Queue = () => {\r\n    const [, setQueueOpened] = CustomUseState(queueOpenedGlobal);\r\n    const [songIsPaused, setSongIsPaused] = CustomUseState(songIsPausedGlobal);\r\n    const [song, setSong] = CustomUseState(albumGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    const [update, setUpdate] = useState(true);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [,setResBar] = CustomUseState(responseBar);\r\n    // const [,setKeepButton] = CustomUseState(keepButtonGlobal);\r\n    // const [,setOnClickFunc] = CustomUseState(onClickFuncGlobal);\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    actualQueue = queue;\r\n    topBar = topBarConfig;\r\n    queueLength = queue.length;\r\n    songIndex = actualQueue.indexOf(song);\r\n    firstpart = actualQueue.slice(0,songIndex);\r\n    lastpart = actualQueue.slice(songIndex+1,queueLength);\r\n\r\n    const clearQueue = (e) => {\r\n        e.stopPropagation();\r\n        const index = actualQueue.indexOf(song);\r\n        actualQueue = [actualQueue[index]];\r\n        localStorage.setItem(\"queue\",JSON.stringify(actualQueue));\r\n        setQueue(actualQueue);\r\n        setResBar({ open: true, msg: \"Queue cleared\" });\r\n        setUpdate(!update);\r\n    };\r\n    \r\n    const initial = () => {\r\n        finalQueue = [];\r\n        if (queueLength === 1) {\r\n            return;\r\n        }\r\n        songIndex = queue.indexOf(song);\r\n        if (songIndex === 0) {\r\n            finalQueue = queue.slice(1,queueLength);\r\n            return;\r\n        }\r\n        if (songIndex === queueLength-1) {\r\n            finalQueue = queue.slice(0,queueLength-1);\r\n            return;\r\n        }\r\n        finalQueue = queue.slice(songIndex+1,queueLength);\r\n        smallArr = queue.slice(0,songIndex);\r\n        smallArr.forEach(each => {\r\n            finalQueue.push(each);\r\n        });\r\n        return;\r\n    };\r\n\r\n    const close = () => {\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            button: false\r\n        });\r\n        setQueueOpened(false);\r\n    };\r\n\r\n    const call = () => {\r\n        // setTopBarConfig({\r\n        //     button: true,\r\n        //     buttonFunc: close,\r\n        //     bgColor: \"transparent\",\r\n        //     title: \"\"\r\n        // });\r\n        // setKeepButton(true);\r\n        // setOnClickFunc(close);\r\n        setTopBarConfig({\r\n            button: true,\r\n            title: \"\",\r\n            bgColor: \"transparent\",\r\n            buttonFunc: close\r\n        });\r\n    };\r\n\r\n    const removeSong = (song,e) => {\r\n        e.stopPropagation();\r\n        const removeIndex = actualQueue.indexOf(song);\r\n        if (removeIndex !== -1) {\r\n            actualQueue.splice(removeIndex, 1);\r\n            localStorage.setItem(\"queue\",JSON.stringify(actualQueue));\r\n            setQueue(actualQueue);\r\n            setUpdate(!update);\r\n        }\r\n    };\r\n\r\n    const albumName = () => {\r\n        const index = songIndex+1 < actualQueue.length ? songIndex+1 : 0;\r\n        return actualQueue[index].Album;\r\n    };\r\n\r\n    // initial();\r\n\r\n    const lessen = (num) => {\r\n        if (song.Color) {\r\n            let color = song.Color.split(\",\");\r\n            color[3] = `${num})`;\r\n            color = color.join(\",\");\r\n            return color;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        call();\r\n        setIsLoading(false);\r\n        return () => {\r\n            // setTopBarConfig({\r\n            //     button: false,\r\n            //     buttonFunc: () => {},\r\n            //     title: \"\",\r\n            //     bgColor: \"transparent\"\r\n            // });\r\n            // setKeepButton(false);\r\n            // setOnClickFunc(() => {});\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                button: false\r\n            });\r\n        };\r\n    }, [update]);\r\n\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"queue\"\r\n        style={{ backgroundImage: `linear-gradient(to right,${lessen(0.2)},#121212,#121212,#121212)`}}\r\n        >\r\n            <div className=\"queuetitle\">Now Playing</div>\r\n            <div className=\"bottomqueue\">\r\n                <div className=\"leftqueuepart\">\r\n                    <div className=\"leftalbumcontainer\" style={{\r\n                        backgroundImage: `url(${Placeholder})`,\r\n                        backgroundSize: \"cover\",\r\n                    }}>\r\n                        <img src={song.Thumbnail} alt=\"\" \r\n                        // style={{boxShadow: `0px 0px 20px ${lessen(0.5)}`}}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"rightqueuepart\">\r\n                    <div className=\"nowplayingtitle\">Now Playing</div>\r\n                    <NowPlaying songIsPaused={songIsPaused} song={song}/>\r\n                    {/* <NowPlaying2/> */}\r\n                    { actualQueue.length !== 1 ?\r\n                        <div className=\"nowplayingtitle\">\r\n                            <div className=\"frontblock\">Next from: {albumName()}</div>\r\n                            <div className=\"backblock\" onClick={clearQueue}>Clear queue</div>\r\n                        </div> : \"\"\r\n                    }\r\n                    {\r\n                        lastpart.length !== 0 ?\r\n                        <div className=\"queuelist\">\r\n                            {\r\n                                lastpart.map((each,i) => {\r\n                                    return(\r\n                                        <div className=\"queuelistsong\" onClick={() => {\r\n                                            console.log(\"songindex\",songIndex,\"i\",i);\r\n                                            // if (songIndex !== i) {\r\n                                                console.log(\"lastpart clicked\");\r\n                                                setSong(each);\r\n                                                setSongIsPaused(true);\r\n                                            // }\r\n                                        }}>\r\n                                            <div className=\"dummyanim\">{songIndex+i+2}</div>\r\n                                            <div className=\"nowplayingart\" style={{\r\n                                                backgroundImage: `url(${Placeholder})`,\r\n                                                backgroundSize: \"cover\"\r\n                                            }}>\r\n                                                <img src={each.Thumbnail} alt=\"\"/>\r\n                                            </div>\r\n                                            <div className=\"queuesongdetails\">\r\n                                                <div className=\"startingpart\">\r\n                                                    <div className=\"queuesongname\">{each.Title || each.Album}</div>\r\n                                                    <div className=\"queuesongartist\">{each.Artist}</div>\r\n                                                </div>\r\n                                                <div className=\"centerpart\">\r\n                                                    {/* {each.Album} */}\r\n                                                </div>\r\n                                                <div className=\"lastpart\">\r\n                                                    <div className=\"lastpartduration\">{each.Duration}</div>\r\n                                                    <div className=\"removesong\">\r\n                                                        <div className=\"destroyplayer\" onClick={(e) => removeSong(each,e)}>\r\n                                                            <img src={Close} alt=\"\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div> : \"\"\r\n                    }\r\n                    {\r\n                        firstpart.length !== 0 ?\r\n                        <div className=\"queuelist\">\r\n                            {\r\n                                firstpart.map((each,i) => {\r\n                                    return(\r\n                                        <div className=\"queuelistsong\" onClick={() => {\r\n                                            if (songIndex !== i) {\r\n                                                console.log(\"firspart click\");\r\n                                                setSong(each);\r\n                                                setSongIsPaused(true);\r\n                                            }\r\n                                        }}>\r\n                                            <div className=\"dummyanim\">{i+1}</div>\r\n                                            <div className=\"nowplayingart\" style={{\r\n                                                backgroundImage: `url(${Placeholder})`,\r\n                                                backgroundSize: \"cover\"\r\n                                            }}>\r\n                                                <img src={each.Thumbnail} alt=\"\"/>\r\n                                            </div>\r\n                                            <div className=\"queuesongdetails\">\r\n                                                <div className=\"startingpart\">\r\n                                                    <div className=\"queuesongname\">{each.Title || each.Album}</div>\r\n                                                    <div className=\"queuesongartist\">{each.Artist}</div>\r\n                                                </div>\r\n                                                <div className=\"centerpart\">\r\n                                                    {/* {each.Album} */}\r\n                                                </div>\r\n                                                <div className=\"lastpart\">\r\n                                                    <div className=\"lastpartduration\">{each.Duration}</div>\r\n                                                    <div className=\"removesong\">\r\n                                                        <div className=\"destroyplayer\" onClick={(e) => removeSong(each,e)}>\r\n                                                            <img src={Close} alt=\"\" />\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </div> : \"\"\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Queue;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Radio.js",["94","95","96","97"],"import { useState, useEffect } from \"react\";\r\nimport \"../../../css/radiostyles.css\";\r\nimport {\r\n    CustomUseState,\r\n    radioGlobal,\r\n    playingGlobal,\r\n    queueGlobal,\r\n    albumGlobal,\r\n    queueOpenedGlobal,\r\n    // topBarGlobal,\r\n    sendRequest\r\n} from \"../../../common\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport Queue from \"./Queue\";\r\n\r\n\r\nconst ActualRadio = () => {\r\n    const [isRadioOn,] = CustomUseState(radioGlobal);\r\n    // const [song, setSong] = CustomUseState(albumGlobal);\r\n    const [queue, setQueue] = CustomUseState(queueGlobal);\r\n    // const [, setPlaying] = CustomUseState(playingGlobal);\r\n    // const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    const decide = (color) => {\r\n        color = color.split(\",\");\r\n        color[3] = \"0.5)\";\r\n        color = color.join(\",\");\r\n        return color;\r\n    };\r\n\r\n    const call = async () => {\r\n        const res = await sendRequest({\r\n            method: \"GET\",\r\n            endpoint: `/shuffle`\r\n        });\r\n        setQueue(res);\r\n        setIsLoading(false);\r\n        // setPlaying(true);\r\n        // setSong(res.data[0]);\r\n        // setRadioOn(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isRadioOn) {\r\n            call();\r\n        } else {\r\n            setIsLoading(false);\r\n        }\r\n        // setTopBarConfig({\r\n        //     buttonFunc: () => {},\r\n        //     title: \"\",\r\n        //     bgColor: \"transparent\",\r\n        //     button: false\r\n        // });\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"radio\"\r\n        // style={{ backgroundColor: `${decide(queue[1].Color)}` }}\r\n        >\r\n            <div className=\"topdiv\">\r\n                <div className=\"firstalbum\">\r\n                    <img src={queue[0].Thumbnail} alt=\"\"/>\r\n                </div>\r\n                <div className=\"mainalbum\">\r\n                    <img src={queue[1].Thumbnail} alt=\"\"/>\r\n                </div>\r\n                <div className=\"secondalbum\">\r\n                    <img src={queue[2].Thumbnail} alt=\"\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Radio = () => {\r\n    const [queueOpened,] = CustomUseState(queueOpenedGlobal);\r\n\r\n    if (queueOpened) {\r\n        return <Queue/>\r\n    }\r\n    return <ActualRadio/>\r\n};\r\n\r\n\r\nexport default Radio;","F:\\F-Projects\\language_framework_library\\electronjs\\src\\homepage\\mainpanel\\midpanel\\Search.js",["98","99","100","101","102","103","104"],"import { useState, useEffect } from \"react\";\r\nimport \"../../../css/searchstyles.css\";\r\nimport \"../../../css/homestyles.css\";\r\nimport SearchIcon from \"../../../assets/searchicon.svg\";\r\nimport Close from \"../../../assets/blackclose.png\";\r\nimport Play from \"../../../assets/playwhite.png\";\r\nimport {\r\n    sendRequest,\r\n    queueOpenedGlobal,\r\n    CustomUseState,\r\n    searchBarGlobal,\r\n    topBarGlobal,\r\n    topBgColorGlobal\r\n} from \"../../../common\";\r\nimport Queue from \"./Queue\";\r\nimport { MidPanelLoader } from \"./index\";\r\nimport { HorizontalList } from \"./HomeScreen\";\r\nlet timeout = undefined, searchBar, topBar, topBgColorLocal, setcolor = false;\r\n\r\n\r\nconst InnerSongList = ({ obj }) => {\r\n    const [hidden, setHidden] = useState(true);\r\n\r\n    const decide = () => {\r\n        if (hidden) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    return(\r\n        <div className=\"leftlist\" onMouseOver={() => setHidden(false)} onMouseOut={() => setHidden(true)}\r\n        style={{ backgroundColor: decide() ? \"#181818\" : \"rgba(255,255,255,0.1)\" }}>\r\n            <div className=\"leftalbumart\">\r\n                {/* <div className=\"innerleftalbumart\"> */}\r\n                    <img src={obj.Thumbnail} alt=\"\" />\r\n                {/* </div> */}\r\n            </div>\r\n            <div className=\"names\">\r\n                <div className=\"songtitlename\">{obj.Title || obj.Album}</div>\r\n                <div className=\"songartist\">{obj.Artist}</div>\r\n            </div>\r\n            <div className={ decide() ? \"songplay hidden\" : \"songplay\" }>\r\n                <div className=\"innersongplay\">\r\n                    <img src={Play} alt=\"\" className=\"img\"/>\r\n                </div>\r\n            </div>\r\n            <div className={ decide() ? \"beforesongresult hidden\" : \"beforesongresult\" }>\r\n                <div className=\"customopener\">\r\n                    <div className=\"opener1\"></div>\r\n                    <div className=\"opener2\"></div>\r\n                    <div className=\"opener3\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SongList = ({ list }) => {\r\n    return(\r\n        <div className=\"songlist\">\r\n            {\r\n                list.map(each => {\r\n                    return <InnerSongList obj={each} />;\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Each = ({ each }) => {\r\n    const [hover, setHover] = useState(false);\r\n    // let hoverLocal = hover;\r\n\r\n    const lessen = (value) => {\r\n        let colors = each.Color.split(\",\");\r\n        colors[3] = `${value})`;\r\n        colors = colors.join(\",\");\r\n        return colors;\r\n    };\r\n\r\n    return(\r\n        <div className=\"eachitem\">\r\n            <div className=\"songitem\"\r\n            // style={{ backgroundColor: `${ hover ? lessen(0.1) : lessen(0.7) }` }}\r\n            // style={{ backgroundImage: `url(${each.Thumbnail})`, backgroundSize: \"cover\" }}\r\n            onMouseOver={() => setHover(true)}\r\n            onMouseOut={() => setHover(false)}\r\n            >\r\n                <div className=\"innersongitem\"\r\n                style={{ backgroundImage: `url(${each.Thumbnail})`, backgroundSize: \"cover\" }}\r\n                >\r\n                    <div className=\"fullscreen\"\r\n                    style={{ backgroundColor: `${ hover ? \"rgba(0,0,0,0.4)\" : \"rgba(0,0,0,0.7)\" }` }}>\r\n                        <div className=\"actualcontents\">\r\n                            {/* <img src={each.Thumbnail} className=\"itemart\" alt=\"\" /> */}\r\n                            <div className=\"itemalbum\">{each.Album}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst RecommendedRow = ({ row }) => {\r\n    return(\r\n        <div className=\"recommendedrow\">\r\n            {\r\n                row.map(each => {\r\n                    return(\r\n                        <Each each={each} />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ActualSearch = () => {\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [searchConfig, setSearchConfig] = CustomUseState(searchBarGlobal);\r\n    const [topBarConfig, setTopBarConfig] = CustomUseState(topBarGlobal);\r\n    const [topBgColor, setTopBgColor] = CustomUseState(topBgColorGlobal);\r\n    const [recents, setRecents] = useState([]);\r\n    const [recommended, setRecommended] = useState({});\r\n    searchBar = searchConfig;\r\n    topBar = topBarConfig;\r\n    topBgColorLocal = topBgColor;\r\n    let { result, input, callLoading } = searchBar;\r\n\r\n    const recentSearches = async () => {\r\n        const res = await sendRequest({\r\n            method: \"GET\",\r\n            endpoint: \"/getRecentSearch\"\r\n        });\r\n        setIsLoading(false);\r\n        setRecents(res.recents);\r\n        setRecommended(res.recommended);\r\n        // setTopBarConfig({\r\n        //     ...topBar,\r\n        //     // bgColor: \"#121212\"\r\n        //     bgColor: topBgColor\r\n        // });\r\n    };\r\n\r\n    const closeFunc = async (item) => {\r\n        // console.log(\"item\",item);\r\n        const res = await sendRequest({\r\n            method: \"POST\",\r\n            endpoint: \"/removeFromRecents\",\r\n            data: {\r\n                item\r\n            }\r\n        });\r\n        console.log(\"res\",res);\r\n    };\r\n\r\n    const scrollHandler = (e) => {\r\n        const top = e.currentTarget.scrollTop;\r\n        if (top > 100 && !setcolor) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                bgColor: topBgColorLocal\r\n            });\r\n            setcolor = true;\r\n        }\r\n        if (top < 100 && setcolor) {\r\n            setTopBarConfig({\r\n                ...topBar,\r\n                // bgColor: \"#121212\"\r\n                bgColor: \"transparent\"\r\n            });\r\n            setcolor = false;\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setSearchConfig({\r\n            ...searchBar,\r\n            show: true,\r\n            // input: \"\",\r\n            result: {}\r\n        });\r\n        setTopBarConfig({\r\n            ...topBar,\r\n            // bgColor: \"#121212\"\r\n            bgColor: \"transparent\"\r\n        });\r\n        recentSearches();\r\n        return () => {\r\n            setSearchConfig({\r\n                ...searchBar,\r\n                input: \"\",\r\n                show: false,\r\n                callLoading: false\r\n            });\r\n        }\r\n    },[]);\r\n\r\n    if (isLoading) {\r\n        return <MidPanelLoader/>\r\n    }\r\n    return(\r\n        <div className=\"searchmain\" onScroll={scrollHandler}>\r\n            <div className=\"librarytop\"\r\n            style={{ backgroundColor: topBgColor }}\r\n            >\r\n                <div className=\"innerlibrarytop\">\r\n                    <div className=\"forblur\"></div>\r\n                    <div className=\"bigtitle\">Search</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"noncolour\">\r\n            {\r\n                callLoading ? <MidPanelLoader/> : \"\"\r\n            }\r\n            {\r\n                recents.length !== 0 && !callLoading && input === \"\" ?\r\n                <>\r\n                    <div style={{ width: \"100%\", height: \"10px\" }}/>\r\n                    <div className=\"outline\">\r\n                        <div className=\"maintitle\">\r\n                            <p>Recent Searches</p>\r\n                            <div className=\"viewmore\">\r\n                                <p>Clear All</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"list\">\r\n                            <HorizontalList list={recents} addCloseButton={true} closeFunc={closeFunc}/>\r\n                        </div>\r\n                    </div>\r\n                </> : \"\"\r\n            }\r\n            {\r\n                Object.keys(recommended).length !== 0 && !callLoading && input === \"\" ?\r\n                <div className=\"outline\">\r\n                    <div className=\"maintitle\">\r\n                        <p>Recommended</p>\r\n                    </div>\r\n                    <div style={{ width: \"100%\", height: \"0px\" }}></div>\r\n                    {/* {\r\n                        Object.keys(recommended).map(row => {\r\n                            return(\r\n                                <RecommendedRow row={recommended[row]} />\r\n                            );\r\n                        })\r\n                    } */}\r\n                    {\r\n                        Object.keys(recommended).map(each => {\r\n                            return(\r\n                                <div className=\"list\">\r\n                                    <HorizontalList list={recommended[each]} />\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </div> : \"\"\r\n            }\r\n            {\r\n                result.noResults && !callLoading && input !== \"\" ?\r\n                <div className=\"noresults\">No results found for \"{input}\"</div> : \"\"\r\n            }\r\n            {   \r\n                Object.keys(result).length > 1 && input !== \"\" ?\r\n                <div className=\"smain\">\r\n                    <div className=\"outline\">\r\n                        {\r\n                            Object.keys(result.songs).length !== 0 ?\r\n                            <div className=\"maintitle\">\r\n                                <p>Songs</p>\r\n                            </div> : \"\"\r\n                        }\r\n                        {   \r\n                            Object.keys(result.songs).map(each => {\r\n                                return(\r\n                                    // <div className=\"list\">\r\n                                        <SongList list={result.songs[each]}/>\r\n                                    // </div>\r\n                                );\r\n                            })\r\n                        }\r\n                        {\r\n                            Object.keys(result.albums).length !== 0 ?\r\n                            <div style={{ width: \"100%\", height: \"15px\" }}></div> : \"\"\r\n                        }\r\n                        {\r\n                            Object.keys(result.albums).length !== 0 ?\r\n                            <div className=\"maintitle\">\r\n                                <p>Albums</p>\r\n                            </div> : \"\"\r\n                        }\r\n                        {   \r\n                            Object.keys(result.albums).map(each => {\r\n                                return(\r\n                                    <div className=\"list\">\r\n                                        <HorizontalList list={result.albums[each]}/>\r\n                                    </div>\r\n                                );\r\n                            })\r\n                        }\r\n                    </div>\r\n                </div> \r\n                : \"\"\r\n            }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Search = () => {\r\n    const [queueOpened,] = CustomUseState(queueOpenedGlobal);\r\n\r\n    if (queueOpened) {\r\n        return <Queue/>\r\n    }\r\n    return <ActualSearch/>\r\n};\r\n\r\n\r\nexport default Search;",{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":616,"column":12,"nodeType":"111","messageId":"112","endLine":616,"endColumn":21},{"ruleId":"113","severity":1,"message":"114","line":706,"column":8,"nodeType":"115","endLine":706,"endColumn":10,"suggestions":"116"},{"ruleId":"109","severity":1,"message":"117","line":30,"column":5,"nodeType":"111","messageId":"112","endLine":30,"endColumn":9},{"ruleId":"109","severity":1,"message":"118","line":64,"column":7,"nodeType":"111","messageId":"112","endLine":64,"endColumn":12},{"ruleId":"109","severity":1,"message":"119","line":135,"column":5,"nodeType":"111","messageId":"112","endLine":135,"endColumn":20},{"ruleId":"109","severity":1,"message":"120","line":393,"column":11,"nodeType":"111","messageId":"112","endLine":393,"endColumn":17},{"ruleId":"113","severity":1,"message":"121","line":424,"column":7,"nodeType":"115","endLine":424,"endColumn":13,"suggestions":"122"},{"ruleId":"113","severity":1,"message":"123","line":517,"column":7,"nodeType":"115","endLine":517,"endColumn":21,"suggestions":"124"},{"ruleId":"109","severity":1,"message":"125","line":623,"column":35,"nodeType":"111","messageId":"112","endLine":623,"endColumn":39},{"ruleId":"109","severity":1,"message":"120","line":653,"column":11,"nodeType":"111","messageId":"112","endLine":653,"endColumn":17},{"ruleId":"109","severity":1,"message":"126","line":686,"column":20,"nodeType":"111","messageId":"112","endLine":686,"endColumn":29},{"ruleId":"109","severity":1,"message":"127","line":1,"column":8,"nodeType":"111","messageId":"112","endLine":1,"endColumn":11},{"ruleId":"109","severity":1,"message":"128","line":37,"column":7,"nodeType":"111","messageId":"112","endLine":37,"endColumn":11},{"ruleId":"109","severity":1,"message":"129","line":39,"column":11,"nodeType":"111","messageId":"112","endLine":39,"endColumn":21},{"ruleId":"109","severity":1,"message":"130","line":54,"column":5,"nodeType":"111","messageId":"112","endLine":54,"endColumn":11},{"ruleId":"109","severity":1,"message":"131","line":189,"column":11,"nodeType":"111","messageId":"112","endLine":189,"endColumn":19},{"ruleId":"109","severity":1,"message":"132","line":256,"column":7,"nodeType":"111","messageId":"112","endLine":256,"endColumn":12},{"ruleId":"109","severity":1,"message":"133","line":354,"column":7,"nodeType":"111","messageId":"112","endLine":354,"endColumn":23},{"ruleId":"109","severity":1,"message":"134","line":191,"column":11,"nodeType":"111","messageId":"112","endLine":191,"endColumn":18},{"ruleId":"113","severity":1,"message":"135","line":220,"column":7,"nodeType":"115","endLine":220,"endColumn":9,"suggestions":"136"},{"ruleId":"109","severity":1,"message":"137","line":8,"column":8,"nodeType":"111","messageId":"112","endLine":8,"endColumn":19},{"ruleId":"113","severity":1,"message":"138","line":347,"column":8,"nodeType":"115","endLine":347,"endColumn":19,"suggestions":"139"},{"ruleId":"109","severity":1,"message":"140","line":349,"column":11,"nodeType":"111","messageId":"112","endLine":349,"endColumn":15},{"ruleId":"141","severity":1,"message":"142","line":183,"column":5,"nodeType":"143","messageId":"144","endLine":207,"endColumn":6},{"ruleId":"109","severity":1,"message":"145","line":64,"column":12,"nodeType":"111","messageId":"112","endLine":64,"endColumn":17},{"ruleId":"109","severity":1,"message":"146","line":78,"column":11,"nodeType":"111","messageId":"112","endLine":78,"endColumn":28},{"ruleId":"113","severity":1,"message":"147","line":348,"column":7,"nodeType":"115","endLine":348,"endColumn":18,"suggestions":"148"},{"ruleId":"109","severity":1,"message":"149","line":21,"column":24,"nodeType":"111","messageId":"112","endLine":21,"endColumn":34},{"ruleId":"113","severity":1,"message":"150","line":78,"column":7,"nodeType":"115","endLine":78,"endColumn":18,"suggestions":"151"},{"ruleId":"109","severity":1,"message":"152","line":66,"column":7,"nodeType":"111","messageId":"112","endLine":66,"endColumn":18},{"ruleId":"109","severity":1,"message":"153","line":103,"column":11,"nodeType":"111","messageId":"112","endLine":103,"endColumn":18},{"ruleId":"113","severity":1,"message":"154","line":194,"column":8,"nodeType":"115","endLine":194,"endColumn":16,"suggestions":"155"},{"ruleId":"109","severity":1,"message":"156","line":6,"column":5,"nodeType":"111","messageId":"112","endLine":6,"endColumn":18},{"ruleId":"109","severity":1,"message":"157","line":8,"column":5,"nodeType":"111","messageId":"112","endLine":8,"endColumn":16},{"ruleId":"109","severity":1,"message":"158","line":25,"column":11,"nodeType":"111","messageId":"112","endLine":25,"endColumn":17},{"ruleId":"113","severity":1,"message":"159","line":56,"column":8,"nodeType":"115","endLine":56,"endColumn":10,"suggestions":"160"},{"ruleId":"109","severity":1,"message":"161","line":4,"column":8,"nodeType":"111","messageId":"112","endLine":4,"endColumn":18},{"ruleId":"109","severity":1,"message":"162","line":5,"column":8,"nodeType":"111","messageId":"112","endLine":5,"endColumn":13},{"ruleId":"109","severity":1,"message":"163","line":18,"column":5,"nodeType":"111","messageId":"112","endLine":18,"endColumn":12},{"ruleId":"109","severity":1,"message":"120","line":75,"column":11,"nodeType":"111","messageId":"112","endLine":75,"endColumn":17},{"ruleId":"109","severity":1,"message":"164","line":106,"column":7,"nodeType":"111","messageId":"112","endLine":106,"endColumn":21},{"ruleId":"109","severity":1,"message":"165","line":124,"column":24,"nodeType":"111","messageId":"112","endLine":124,"endColumn":37},{"ruleId":"113","severity":1,"message":"166","line":199,"column":7,"nodeType":"115","endLine":199,"endColumn":9,"suggestions":"167"},"no-native-reassign",["168"],"no-negated-in-lhs",["169"],"no-unused-vars","'isPlaying' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'call'. Either include it or remove the dependency array.","ArrayExpression",["170"],"'wait' is defined but never used.","'trial' is assigned a value but never used.","'songPausedLocal' is assigned a value but never used.","'lessen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'addToRecentlyPlayed'. Either include it or remove the dependency array.",["171"],"React Hook useEffect has missing dependencies: 'canplay', 'ended', 'metadata', 'onkeydown', 'onpaused', 'onplay', 'onplaying', 'setQueue', 'setRepeatType', 'setSongPaused', 'shutdown', and 'waiting'. Either include them or remove the dependency array.",["172"],"'type' is assigned a value but never used.","'setScreen' is assigned a value but never used.","'Mid' is defined but never used.","'Left' is assigned a value but never used.","'normalList' is assigned a value but never used.","'topBar' is assigned a value but never used.","'resetTop' is assigned a value but never used.","'Right' is assigned a value but never used.","'CreateAnotherRow' is assigned a value but never used.","'openNew' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handleClick'. Either include it or remove the dependency array.",["173"],"'Placeholder' is defined but never used.","React Hook useEffect has missing dependencies: 'mouseOut' and 'setTopBarConfig'. Either include them or remove the dependency array.",["174"],"'list' is assigned a value but never used.","no-unreachable","Unreachable code.","IfStatement","unreachableCode","'added' is assigned a value but never used.","'checkForLeftPanel' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'call', 'goBack', 'handleClick', 'redirectValue', and 'setTopBarConfig'. Either include them or remove the dependency array. You can also do a functional update 'setRedirectValue(r => ...)' if you only need 'redirectValue' in the 'setRedirectValue' call.",["175"],"'setBgColor' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setTopBarConfig'. Either include it or remove the dependency array.",["176"],"'NowPlaying2' is assigned a value but never used.","'initial' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'call' and 'setTopBarConfig'. Either include them or remove the dependency array.",["177"],"'playingGlobal' is defined but never used.","'albumGlobal' is defined but never used.","'decide' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'call' and 'isRadioOn'. Either include them or remove the dependency array.",["178"],"'SearchIcon' is defined but never used.","'Close' is defined but never used.","'timeout' is assigned a value but never used.","'RecommendedRow' is assigned a value but never used.","'setTopBgColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setSearchConfig' and 'setTopBarConfig'. Either include them or remove the dependency array.",["179"],"no-global-assign","no-unsafe-negation",{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [call]",{"range":"200","text":"201"},"Update the dependencies array to be: [addToRecentlyPlayed, song]",{"range":"202","text":"203"},"Update the dependencies array to be: [canplay, ended, metadata, onkeydown, onpaused, onplay, onplaying, setQueue, setRepeatType, setSongPaused, shutdown, song, update, waiting]",{"range":"204","text":"205"},"Update the dependencies array to be: [handleClick]",{"range":"206","text":"207"},"Update the dependencies array to be: [isLoading, mouseOut, setTopBarConfig]",{"range":"208","text":"209"},"Update the dependencies array to be: [call, goBack, handleClick, isLoading, redirectValue, setTopBarConfig]",{"range":"210","text":"211"},"Update the dependencies array to be: [isLoading, setTopBarConfig]",{"range":"212","text":"213"},"Update the dependencies array to be: [call, setTopBarConfig, update]",{"range":"214","text":"215"},"Update the dependencies array to be: [call, isRadioOn]",{"range":"216","text":"217"},"Update the dependencies array to be: [setSearchConfig, setTopBarConfig]",{"range":"218","text":"219"},[25307,25309],"[call]",[14252,14258],"[addToRecentlyPlayed, song]",[18134,18148],"[canplay, ended, metadata, onkeydown, onpaused, onplay, onplaying, setQueue, setRepeatType, setSongPaused, shutdown, song, update, waiting]",[6663,6665],"[handleClick]",[11842,11853],"[isLoading, mouseOut, setTopBarConfig]",[12303,12314],"[call, goBack, handleClick, isLoading, redirectValue, setTopBarConfig]",[2444,2455],"[isLoading, setTopBarConfig]",[6397,6405],"[call, setTopBarConfig, update]",[1551,1553],"[call, isRadioOn]",[6376,6378],"[setSearchConfig, setTopBarConfig]"]